<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_0nQaMtnmEdmO6L4XMImrsA" name="generalization_in_the_business_analysis_model,1.410487898839562E-305" guid="_0nQaMtnmEdmO6L4XMImrsA" changeDate="2005-06-20T19:14:02.975-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_generalizations_in_business_object_model__guidelines_for&quot;&#xD;
name=&quot;XE_generalizations_in_business_object_model__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Many things in real life have common properties. For example, both dogs and cats are animals. Classes can have common&#xD;
    properties as well. Relationships of this type between classes can be clarified by means of a &lt;b>generalization&lt;/b>. By&#xD;
    extracting common properties into classes of their own, the business model will be easier to change in the future.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A class that inherits general characteristics from another class is called a descendant. The class from which the&#xD;
    descendant has inherited is called the ancestor. A generalization shows that one class inherits from another. This&#xD;
    means that the definition of the ancestor, including any attributes or operations, is also valid for the descendant.&#xD;
    The ancestor's relationships are also inherited.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Generalization can take place in several stages, which makes it possible to model complex, multileveled inheritance&#xD;
    hierarchies, although the number of levels should be restricted for easier understanding. General properties are placed&#xD;
    in the upper part of the inheritance hierarchy, and special properties lower down in the hierarchy. In other words, the&#xD;
    generalization-relationship can be used to model specializations of a more general concept.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Example:&#xD;
&lt;/h5>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Passengers arriving at the airport check-in bring different kinds of baggage, Normal Baggage, Hand Baggage and Special&#xD;
    Baggage. From the airline's viewpoint, they have a few common properties, besides being baggage-each bag has an owner&#xD;
    and a weight, for example. These common properties can be modeled by attributes and operations in a separate class&#xD;
    called Baggage. Normal Baggage, Hand Baggage and Special Baggage will inherit from this class.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;147&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/bgener1.gif&quot; width=&quot;176&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Normal Baggage, Hand Baggage, and Special Baggage classes have common properties. They are all specializations of the&#xD;
    general concept Baggage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A class can inherit several other classes-this is called &quot;multiple inheritance&quot;-although normally it will inherit only&#xD;
    one. If the class inherits several classes, it is important to check how the associations, the attributes, and the&#xD;
    operations are named in the ancestors. If the same name appears in several ancestors, you must describe what this means&#xD;
    to the specific inheriting class.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Concrete and Abstract Classes&quot; name=&quot;Concrete and Abstract Classes&quot;>Concrete and Abstract Classes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A class that exists only so that other classes can inherit it is an abstract class. An abstract class is never&#xD;
    instantiated. However, an object of a class that inherits an abstract class conforms to its own description and the&#xD;
    description of the inherited class. Classes that are instantiated in the business are concrete classes&lt;b>.&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this context, &quot;abstract&quot; means something completely different to what it means in ordinary speech. Something may&#xD;
    very well be abstract in the ordinary sense of the word without being represented by an abstract class. Lessons in&#xD;
    school are abstract phenomena, or concepts' because they cannot be touched. However, if you model school tasks, a&#xD;
    lesson would most likely resemble a concrete class-one that is instantiated. Similarly, concrete phenomena, such as&#xD;
    products and persons, can be said to produce abstract classes if they have properties in common with other classes.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Use&quot; name=&quot;Use&quot;>Use&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The main purpose of using inheritance is to achieve an object model that accommodates change. However, inheritance&#xD;
    should be used carefully:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inheritance is &quot;only&quot; a way to structure the description. You visualize which phenomena have some properties in&#xD;
        common.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        When it comes to realization, you still have to find an employee capable of performing both the job of the&#xD;
        ancestor, and that of the descendant whenever a descendant class should be instantiated.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use generalizations only between classes of the same stereotype.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        Because different class stereotypes have different purposes, a generalization from a class of one stereotype to a&#xD;
        class of another stereotype would not make sense. If you let a business worker class inherit a business entity, for&#xD;
        instance, the business worker would become a kind of hybrid.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
