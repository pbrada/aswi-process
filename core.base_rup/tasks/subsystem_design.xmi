<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_12Ouw9nmEdmO6L4XMImrsA" name="subsystem_design,{CAA385CA-2BA2-40F2-8FE3-E21089D02119}" guid="_12Ouw9nmEdmO6L4XMImrsA" changeDate="2005-10-05T13:28:32.891-0700" version="7.1.0">
  <mainDescription>&lt;h4>&#xD;
    &amp;nbsp;UML 1.x Representation&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The same considerations about &lt;a href=&quot;#Describe%20Subsystem%20Dependencies&quot;>subsystemdependencies&lt;/a>&amp;nbsp;apply if&#xD;
    UML 1.5 notation is being used:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;br />&#xD;
     &lt;img height=&quot;554&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/layerib.gif&quot; width=&quot;496&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example of Subsystem Layering using direct dependencies&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    &lt;img height=&quot;322&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/layerif.gif&quot; width=&quot;496&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example of Subsystem Layering using Interface dependencies&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Refer to &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/supportingmaterials/differences_between_uml_1_x_and_uml_2_0_CA70F2E6.html&quot;&#xD;
    guid=&quot;4.792914878943572E-306&quot;>Differences Between UML 1.x and UML 2.0&lt;/a> for more information.&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_Tfw_cNnnEdmO6L4XMImrsA" name=" Distribute Subsystem Behavior to Subsystem Elements " guid="_Tfw_cNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_design_subsystem__distributing_behavior_on_subsystem_elements&quot;&#xD;
name=&quot;XE_design_subsystem__distributing_behavior_on_subsystem_elements&quot;>&lt;/a>&lt;a id=&quot;Distribute Subsystem behavior&quot;&#xD;
name=&quot;Distribute Subsystem behavior&quot;>&lt;/a> &#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;100%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;5%&quot;>&#xD;
                    &lt;b>Purpose&lt;/b>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;95%&quot;>&#xD;
                    To specify the internal behavior of the subsystem.&lt;br />&#xD;
                     To identify new &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
                    href=&quot;./../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
                    guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>design classes&lt;/a> or &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
                    href=&quot;./../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
                    guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot;>design subsystems&lt;/a> needed to satisfy subsystem&#xD;
                    behavioral requirements.&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
     The external behavior of a subsystem is primarily defined by the interfaces it realizes. When a subsystem realizes an&#xD;
    interface, it makes a commitment to support each and every operation defined by the interface. The operation may be in&#xD;
    turn realized by an operation on a design element (i.e., &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot; guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>Design&#xD;
    Class&lt;/a> or &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
    guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot;>Design Subsystem&lt;/a>) contained by the subsystem; this operation may&#xD;
    require collaboration with other design elements&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    The collaborations of model elements within the subsystem should be documented using sequence diagrams which show how&#xD;
    the subsystem behavior is realized. Each operation on an interface realized by the subsystem should have one or more&#xD;
    documenting sequence diagrams. This diagram is owned by the subsystem, and is used to design the &lt;b>internal&lt;/b>&#xD;
    behavior of the subsystem.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the behavior of the subsystem is highly state-dependent and represents one or more threads of control, state&#xD;
    machines are typically more useful in describing the behavior of the subsystem. State machines in this context are&#xD;
    typically used in conjunction with active classes to represent a decomposition of the threads of control of the system&#xD;
    (or subsystem in this case), and are described in statechart diagrams, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/statechart_diagram_640B5D0B.html&quot; guid=&quot;1.4528459404144188E-304&quot;>Guideline:&#xD;
    Statechart Diagram&lt;/a>. &lt;font color=&quot;#000000&quot;>In real-time systems, the behavior of &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_capsule_FC4A34FD.html&quot; guid=&quot;{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}&quot;>Artifact:&#xD;
    Capsule&lt;/a>s will also be described using state machines.&lt;/font>&lt;font color=&quot;#000000&quot;>Within the subsystem, there may&#xD;
    be independent threads of execution, represented by active classes.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;font color=&quot;#000000&quot;>In real-time systems, &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_capsule_FC4A34FD.html&quot; guid=&quot;{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}&quot;>Artifact:&#xD;
    Capsule&lt;/a>s will be used to encapsulate these threads.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The collaboration of subsystems to perform some required behavior of the system can be expressed using sequence&#xD;
    diagrams:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;298&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/excollab.gif&quot; width=&quot;429&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    This diagram shows how the interfaces of the subsystems are used to perform a scenario. Specifically, for the Network&#xD;
    Handling subsystem, we see the specific interfaces (ICoordinator in this case) and operations the subsystem must&#xD;
    support. We also see the NetworkHandling subsystems is dependent on the IBHandler and IAHandler interfaces.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Looking inside the Subsystem, we see how the ICoordinator interface is realized:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;314&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/incollab.gif&quot; width=&quot;504&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The Coordinator class acts as a &quot;proxy&quot; for the ICoordinator interface, handling the interface operations and&#xD;
    coordinating the interface behavior.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This &quot;internal&quot; sequence diagram shows exactly what classes provide the interface, what needs to happen internally to&#xD;
    provide the subsystem's functionality, and which classes send messages out from the subsystem. The diagram clarifies&#xD;
    the internal design, and is essential for subsystems with complex internal designs. It also enables the subsystem&#xD;
    behavior to be easily understood, hopefully rendering it reusable across contexts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Creating these &quot;interface realization&quot; diagrams, it may be necessary to create new classes and subsystems to perform&#xD;
    the required behavior. The process is similar to that defined in Use Case Analysis, but instead of Use Cases we are&#xD;
    working with interface operations. For each interface operation, identify the classes (or in some cases where the&#xD;
    required behavior is complex, a contained subsystem) within the current subsystem which are needed to perform the&#xD;
    operation. Create new classes/subsystems where existing classes/subsystems cannot provide the required behavior (but&#xD;
    try to reuse first).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Creation of new design elements should force reconsideration of subsystem content and boundary. Be careful to avoid&#xD;
    having effectively the same class in two different subsystems. Existence of such a class implies that the subsystem&#xD;
    boundaries may not be well-drawn. Periodically revisit &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/tasks/identify_design_elements_E884AB82.html&quot; guid=&quot;{97D7343A-6993-4AB7-8F86-4DAC8C9075C8}&quot;>Task:&#xD;
    Identify Design Elements&lt;/a> to re-balance subsystem responsibilities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is sometimes useful to create two separate internal models of the subsystem - a specification targeted to the&#xD;
    subsystem client and a realization targeted to the implementers. The specification may include &quot;ideal&quot; classes and&#xD;
    collaborations to describe the behavior of the subsystem in terms of ideal classes and collaborations. The realization,&#xD;
    on the other hand, corresponds more closely to the implementation, and may evolve to become the implementation.&amp;nbsp;&#xD;
    For more information on Design Subsystem specification and realization, see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/design_subsystem_B26FD609.html#Subsystem%20Specification%20and%20Realization&quot;&#xD;
    guid=&quot;1.2314266786534317E-305&quot;>Work Product Guideline: Design Subsystem, Subsystem Specification and Realization&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_ThjvMNnnEdmO6L4XMImrsA" name=" Document Subsystem Elements " guid="_ThjvMNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Document Subsystem Elements&quot; name=&quot;Document Subsystem Elements&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                To document the internal structure of the subsystem.&amp;nbsp;&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    To document the internal structure of the subsystem, create one or more class diagrams showing the elements contained&#xD;
    by the subsystem, and their associations with one another. One class diagram should be sufficient, but more can be used&#xD;
    to reduce complexity and improve readability.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example class diagram is shown below:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/classdg.gif&quot; alt=&quot;Diagram described in accompanying text.&quot; width=&quot;470&quot; height=&quot;396&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example Class Diagram for an Order-Entry System.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Modeled as a component, the internal content of a subsystem can be alternatively represented within the component&#xD;
    rectangle in a component diagram. This representation also allows us to include the interaction points of this&#xD;
    subsystem to other parts of the system, which is done through its interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of component diagram is shown below, depicting the Order subsystem, its internal content, as well as its&#xD;
    provided and required interfaces.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/compdg.jpg&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example component diagram for Order Subsystem&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As a component is a &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/guidances/termdefinitions/structured_class_4BB99B12.html&quot;&#xD;
    guid=&quot;_yW3E4NnmEdmO6L4XMImrsA&quot;>structured class&lt;/a>, it can be tightly encapsulated by forcing communications from&#xD;
    outside to pass through ports obeying declared interfaces, which brings additional precision in specification and&#xD;
    interconnection for that component. This representation allows us to &quot;wire&quot; instances of parts through connectors to&#xD;
    play a specific role in the component implementation (refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/structured_class_FF8DB16F.html&quot; guid=&quot;1.1994826813129747E-304&quot;>Concept: Structured&#xD;
    Class&lt;/a> for additional information).&#xD;
&lt;/p>An example of composite structure diagram for the Order subsystem using interfaces and ports is shown below. &#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/structdg.jpg&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example composite structure diagram for Order Subsystem&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
 In addition, a statechart diagram may be needed to document the possible states the subsystem can assume, see &lt;a&#xD;
class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/guidances/guidelines/statechart_diagram_640B5D0B.html&quot;&#xD;
guid=&quot;1.4528459404144188E-304&quot;>Guideline: Statechart Diagram&lt;/a>. &#xD;
&lt;p>&#xD;
    The description of the classes contained in the subsystem itself is handled in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/tasks/class_design_98F20FF9.html&quot; guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class&#xD;
    Design&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TkGF0NnnEdmO6L4XMImrsA" name=" Describe Subsystem Dependencies " guid="_TkGF0NnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_design_subsystem__describing_subsystem_dependencies&quot;&#xD;
name=&quot;XE_design_subsystem__describing_subsystem_dependencies&quot;>&lt;/a>&lt;a id=&quot;Describe Subsystem Dependencies&quot;&#xD;
name=&quot;Describe Subsystem Dependencies&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                To document the interfaces upon which the subsystem is dependent.&amp;nbsp;&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    When an element contained by a subsystem uses some behavior of an element contained by another subsystem, a dependency&#xD;
    is created between the enclosing subsystems. To improve reuse and reduce maintenance dependencies, we want to express&#xD;
    this in terms of a dependency on a particular &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_interface_9816B54F.html&quot; guid=&quot;{C6938487-1DAA-4F6A-B3BC-CB99165F0680}&quot;>Interface&lt;/a>&#xD;
    of the subsystem, not upon the subsystem itself nor on the element contained in the subsystem.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The reason for this is two-fold:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        We want to be able to substitute one model element (including subsystems) for one another as long as they offer the&#xD;
        same behavior. We specify the required behavior in terms of interfaces, so any behavioral requirements one model&#xD;
        element has on another should be expressed in terms of interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        We want to allow the designer total freedom in designing the &lt;b>internal&lt;/b> behavior of the subsystem so long as&#xD;
        it provides the correct external behavior. If a model element in one subsystem references a model element in&#xD;
        another subsystem, the designer is no longer free to remove that model element or redistribute the behavior of that&#xD;
        model element to other elements. As a result, the system is more brittle.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In creating dependencies, ensure that there are no direct dependencies or associations between model elements contained&#xD;
    by the subsystem and model elements contained by other subsystems. Also ensure that there are no circular dependencies&#xD;
    between subsystems and interfaces; a subsystem cannot both realize an interface and be dependent on it as well.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Dependencies between subsystems, and between subsystems and packages, can be drawn directly as shown below. When shown&#xD;
    this way, the dependency states that one subsystem (Invoice Management, for example) is directly dependent on another&#xD;
    subsystem (Payment Scheduling Management).&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;br />&#xD;
     &lt;img src=&quot;resources/layerib1.jpg&quot; border=&quot;0&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example of Subsystem Layering using direct dependencies&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When there is a potential for substitution of one subsystem for another (where they have the same interfaces), the&#xD;
    dependency can be drawn to an &lt;b>&lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/workproducts/rup_interface_9816B54F.html&quot;&#xD;
    guid=&quot;{C6938487-1DAA-4F6A-B3BC-CB99165F0680}&quot;>Interface&lt;/a>&lt;/b> realized by the subsystem, rather than to the subsystem&#xD;
    itself. This allows any other model element (subsystem or class) which realizes the same interface to be used. Using&#xD;
    interface dependencies allows flexible frameworks to be designed using replaceable design elements.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;br />&#xD;
     &lt;img src=&quot;resources/layerif1.jpg&quot; border=&quot;0&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Example of Subsystem Layering using Interface dependencies&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    &amp;nbsp;&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_design_subsystem__designing&quot; name=&quot;XE_design_subsystem__designing&quot;>&lt;/a> &#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To define the behaviors specified in the subsystem's interfaces in terms of collaborations of contained design&#xD;
        elements and external subsystems/interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To document the internal structure of the subsystem.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To define realizations between the subsystem's interfaces and contained classes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To determine the dependencies upon other subsystems&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
