<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_117z0tnmEdmO6L4XMImrsA" name="class_design,{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}" guid="_117z0tnmEdmO6L4XMImrsA" changeDate="2005-07-25T19:47:05.727-0700" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    Classes are the workhorses of the design effort-they actually perform the real work of the system. Other design&#xD;
    elements, such as subsystems, packages, and collaborations, describe how classes are grouped or how they interoperate.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Capsules are also stereotyped classes, used to represent concurrent threads of execution in real-time systems. In such&#xD;
    cases, other design classes are passive classes, used within the execution context provided by the active capsules.&#xD;
    When the software architect and designer choose not to use a design approach based on capsules, it's still possible to&#xD;
    model concurrent behavior using active classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Active classes are design classes that coordinate and drive the behavior of the passive classes-an active class is a&#xD;
    class whose instances are active objects, owning their own thread of control.&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_TFPmoNnnEdmO6L4XMImrsA" name=" Use Design Patterns and Mechanisms " guid="_TFPmoNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_patterns__using&quot; name=&quot;XE_patterns__using&quot;>&lt;/a>&lt;a id=&quot;XE_mechanisms__using&quot; name=&quot;XE_mechanisms__using&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Use Design Patterns and Mechanisms&quot; name=&quot;Use Design Patterns and Mechanisms&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Use design patterns and mechanisms as suited to the class or capability being designed, and in accordance with project&#xD;
    design guidelines.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Incorporating a pattern and/or mechanism is effectively performing many of the subsequent steps in this task (adding&#xD;
    new classes, operations, attributes, and relationships), but in accordance with the rules defined by the pattern or&#xD;
    mechanism.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that patterns and mechanisms are typically incorporated as the design evolves, and not just as the first step in&#xD;
    this task. They are also frequently applied across a set of classes, rather than only to a single class.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFPmodnnEdmO6L4XMImrsA" name=" Create Initial Design Classes " guid="_TFPmodnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_class__creating_design_classes_initially&quot; name=&quot;XE_class__creating_design_classes_initially&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Create Initial Design Classes&quot; name=&quot;Create Initial Design Classes&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Create one or several initial design classes for the analysis class given as input to this task and assign trace&#xD;
    dependencies. The design classes created in this step will be refined, adjusted, split, or merged in subsequent steps&#xD;
    when assigned various design properties-such as operations, methods, and a state machine-that describe how the analysis&#xD;
    class is designed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Depending on the type of the analysis class (boundary, entity, or control) being designed, there are specific&#xD;
    strategies you can use to create initial design classes.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_boundary_class__designing&quot; name=&quot;XE_boundary_class__designing&quot;>&lt;/a>&lt;a id=&quot;Designing boundary classes&quot;&#xD;
    name=&quot;Designing boundary classes&quot;>Designing boundary classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Boundary classes either represent interfaces to users or to other systems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Typically, boundary classes that represent interfaces to other systems are modeled as subsystems, because they often&#xD;
    have complex internal behavior. If the interface behavior is simple (perhaps acting as only a pass-through to an&#xD;
    existing API to the external system), you might choose to represent the interface with one or more design classes. If&#xD;
    you choose this route, use a single design class per protocol, interface, or API and note special requirements about&#xD;
    standards you used in the special requirements of the class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Boundary classes that represent interfaces to users generally follow the rule of one boundary class for each window, or&#xD;
    one for each form, in the user interface. Consequently the responsibilities of the boundary classes can be on a fairly&#xD;
    high-level, and need to be refined and detailed in this step. Additional models or prototypes of the user interface can&#xD;
    be another source of input to be considered in this step.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The design of boundary classes depends on the user interface (UI) development tools available to the project. Using&#xD;
    current technology, it's common that the UI is visually constructed directly in the development tool. This&#xD;
    automatically creates UI classes that need to be related to the design of control and entity classes. If the UI&#xD;
    development environment automatically creates the supporting classes it needs to implement the UI, there is no need to&#xD;
    consider them in design. You design only what the development environment does not create for you.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_entity_class__designing&quot; name=&quot;XE_entity_class__designing&quot;>&lt;/a>&lt;a id=&quot;Designing Entity Classes&quot;&#xD;
    name=&quot;Designing Entity Classes&quot;>Designing entity classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    During analysis, entity classes represent manipulated units of information. They are often passive and persistent, and&#xD;
    might be identified and associated with the analysis mechanism for persistence. The details of designing a&#xD;
    database-based persistence mechanism are covered in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/tasks/database_design_8552DD3.html&quot; guid=&quot;{2E74A414-49F5-4F27-BFCB-AA2DAC675F58}&quot;>Task: Database&#xD;
    Design&lt;/a>. Performance considerations could force some refactoring of persistent classes, causing changes to the&#xD;
    Design Model that are discussed jointly between the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Role:&#xD;
    Database Designer&lt;/a> and the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot;&#xD;
    guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Role: Designer&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A broader discussion of design issues for persistent classes is presented later under the heading &lt;a&#xD;
    href=&quot;#Define%20Persistent%20Classes&quot;>Identify Persistent Classes&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_control_class__designing&quot; name=&quot;XE_control_class__designing&quot;>&lt;/a>&lt;a id=&quot;Designing Control Classes&quot;&#xD;
    name=&quot;Designing Control Classes&quot;>Designing control classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A control object is responsible for managing the flow of a use case and, therefore, coordinates most of its actions;&#xD;
    control objects encapsulate logic that is not particularly related to user interface issues (boundary objects) or to&#xD;
    data engineering issues (entity objects). This logic is sometimes called &lt;b>application logic&lt;/b> or &lt;b>business&#xD;
    logic&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Take the following issues into consideration when control classes are designed:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Complexity&lt;/b> - You can handle uncomplicated controlling or coordinating behavior using boundary or entity&#xD;
        classes. As the complexity of the application grows, however, significant drawbacks to this approach surface, such&#xD;
        as:&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            the use-case coordinating behavior becomes embedded in the UI, making it more difficult to change the system&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            the same UI cannot be used in different use-case realizations without difficulty&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            the UI becomes burdened with additional functionality, degrading its performance&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            the entity objects might become burdened with use-case specific behavior, reducing their generality&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        To avoid these problems, control classes are introduced to provide behavior related to coordinating&#xD;
        flows-of-events.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Change probability&lt;/b> - If the probability of changing flows of events is low or the cost is negligible, the&#xD;
        extra expense and complexity of additional control classes might not be justified.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Distribution and performance&lt;/b> - The need to run parts of the application on different nodes, or in different&#xD;
        process spaces, introduces the need to specialize design model elements. This specialization is often accomplished&#xD;
        by adding control objects and distributing behavior from the boundary and entity classes onto the control classes.&#xD;
        In doing this, the boundary classes migrate toward providing purely UI services, the entity classes move toward&#xD;
        providing purely data services, and the control classes provide the rest.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Transaction management&lt;/b> - Managing transactions is a classic coordination activity. Without a framework to&#xD;
        handle transaction management, one or more &lt;b>transaction manager&lt;/b> classes would have to interact to ensure that&#xD;
        you maintain the integrity of the transactions.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In the latter two cases, if the control class represents a separate thread of control, it might be more appropriate to&#xD;
    use an active class to model the thread of control. In a real-time system, the use of &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_capsule_FC4A34FD.html&quot; guid=&quot;{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}&quot;>Artifact:&#xD;
    Capsule&lt;/a>s is the preferred modeling approach.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFZXoNnnEdmO6L4XMImrsA" name=" Identify Persistent Classes " guid="_TFZXoNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_persistent_class__identifying&quot; name=&quot;XE_persistent_class__identifying&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_entity_class__define_persistent_classes&quot; name=&quot;XE_entity_class__define_persistent_classes&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Define Persistent Classes&quot; name=&quot;Define Persistent Classes&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Classes that need to store their state on a permanent medium are referred to as persistent. The need to store their&#xD;
    state might be for permanent recording of class information, for backup in case of system failure, or for exchange of&#xD;
    information. A persistent class might have both persistent and transient instances; labeling a class persistent means&#xD;
    merely that some instances of the class might need to be persistent.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Incorporate design mechanisms corresponding to persistency mechanisms found during analysis. For example, depending on&#xD;
    what is required by the class, the analysis mechanism for persistency might be realized by one of these design&#xD;
    mechanisms:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        In-memory storage&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Flash card&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Binary file&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Database Management System (DBMS)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Persistent objects might not be derived from entity classes only; persistent objects could also be needed to handle&#xD;
    nonfunctional requirements in general. Examples are persistent objects needed to maintain information relevant to&#xD;
    process control or to maintain state information between transactions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Identifying persistent classes serves to notify the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Role:&#xD;
    Database Designer&lt;/a> that the class requires special attention to its physical storage characteristics. It also&#xD;
    notifies the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/roles/rup_software_architect_DB0BF177.html&quot;&#xD;
    guid=&quot;{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}&quot;>Role: Software Architect&lt;/a> that the class needs to be persistent and&#xD;
    the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot;&#xD;
    guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Role: Designer&lt;/a> responsible for the persistence mechanism that&#xD;
    instances of the class need to be made persistent.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Due to the need for a coordinated persistence strategy, the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Role:&#xD;
    Database Designer&lt;/a> is responsible for mapping persistent classes into the database, using a persistence framework.&#xD;
    If the project is developing a persistence framework, the framework developer will also be responsible for&#xD;
    understanding the persistence requirements of design classes. To provide these people with the information they need,&#xD;
    it's sufficient at this point to indicate that the class is persistent or, more precisely, that the instances of the&#xD;
    class are persistent.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFZXodnnEdmO6L4XMImrsA" name=" Define Class Visibility " guid="_TFZXodnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Define Class Visibility&quot; name=&quot;Define Class Visibility&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    For each class, determine the class visibility within the package in which it resides. A &lt;i>public&lt;/i> class can be&#xD;
    referenced outside of the containing package. A &lt;i>private&lt;/i> class (or one whose visibility is &lt;i>implementation&lt;/i>)&#xD;
    might only be referenced by classes within the same package.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFZXotnnEdmO6L4XMImrsA" name=" Define Operations " guid="_TFZXotnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_operation__defining_on_classes&quot; name=&quot;XE_operation__defining_on_classes&quot;>&lt;/a>&lt;a id=&quot;Define Operations&quot;&#xD;
name=&quot;Define Operations&quot;>&lt;/a>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identifying%20operations&quot;>Identifying operations&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Naming%20and%20describing%20the%20operations&quot;>Naming and describing the operations&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Defining%20operation%20visibility&quot;>Defining operation visibility&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Defining%20class%20operations&quot;>Defining class operations&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Identifying operations&quot; name=&quot;Identifying operations&quot;>Identifying operations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To identify operations on design classes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Study the responsibilities of each corresponding analysis class, creating an operation for each responsibility. Use&#xD;
        the description of the responsibility as the initial description of the operation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Study the use-case realizations in the class &lt;i>participates&lt;/i> to see how the operations are used by the use-case&#xD;
        realizations. Extend the operations, one use-case realization at the time, refining the operations, their&#xD;
        descriptions, return types, and parameters. Each use-case realization's requirements pertaining to classes are&#xD;
        described textually in the Flow of Events of the use-case realization.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Study the Special Requirements use case to be sure that you do not miss implicit requirements on the operation that&#xD;
        might be stated there.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Operations are required to support the messages that appear on sequence diagrams because scripts-temporary message&#xD;
    specifications that have not yet been assigned to operations-describe the behavior the class is expected to perform.&#xD;
    Figure 1 illustrates an example of a sequence diagram.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;./../../core.base_rup/guidances/guidelines/resources/seqdiag1.gif&quot; width=&quot;672&quot; height=&quot;417&quot;&#xD;
    alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    Figure 1: Messages Form the Basis for Identifying Operations&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use-case realizations cannot provide enough information to identify all operations. To find the remaining operations,&#xD;
    consider the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Is there a way to initialize a new instance of the class, including connecting it to instances of other classes to&#xD;
        which it is associated?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is there a need to test to see if two instances of the class are equal?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is there a need to create a copy of a class instance?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Are any operations required on the class by mechanisms that they use? For example, a &lt;i>garbage collection&lt;/i>&#xD;
        mechanism might require that an object is able to drop all of its references to all other objects so that any&#xD;
        unused resources can be freed up.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Do not define operations that merely get and set the values of public attributes (see &lt;a&#xD;
    href=&quot;#Define%20Attributes&quot;>Define Attributes&lt;/a> and &lt;a href=&quot;#Define%20Associations&quot;>Define Associations&lt;/a>).&#xD;
    Usually these are generated by code-generation facilities and do not need to be defined explicitly.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_operation__naming&quot; name=&quot;XE_operation__naming&quot;>&lt;/a>&lt;a id=&quot;Naming and describing the operations&quot;&#xD;
    name=&quot;Naming and describing the operations&quot;>Naming and describing the operations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Use naming conventions for the implementation language when you're naming operations, return types, and parameters and&#xD;
    their types. These are described in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Project-Specific Guidelines&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For each operation, you should define the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>The operation name&lt;/b> - keep the name short and descriptive of the result the operation achieves. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                The names of operations should follow the syntax of the implementation language. Example:&#xD;
                &lt;b>find_location&lt;/b> would be acceptable for C++ or Visual Basic, but not for Smalltalk (in which&#xD;
                underscores are not used); a better name for all would be &lt;b>findLocation&lt;/b>.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Avoid names that imply how the operation is performed. For example, &lt;b>Employee.wages()&lt;/b> is better than&#xD;
                &lt;b>Employee.calculateWages()&lt;/b>, since the latter implies a calculation is performed. The operation might&#xD;
                simply return a value in a database.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The name of an operation should clearly show its purpose. Avoid unspecific names, such as &lt;b>getData&lt;/b>,&#xD;
                that are not descriptive about the result they return. Use a name that shows exactly what is expected, such&#xD;
                as &lt;b>getAddress&lt;/b>. Better yet, simply let the operation name be the name of the property that is&#xD;
                returned or set. If it has a parameter, it sets the property. If it has no parameter, it gets the property.&#xD;
                Example: the operation &lt;b>address&lt;/b> returns the address of a &lt;b>Customer&lt;/b>, whereas&#xD;
                &lt;b>address(aString)&lt;/b> sets or changes the address of the &lt;b>Customer&lt;/b>. The &lt;i>get&lt;/i> and &lt;i>set&lt;/i>&#xD;
                nature of the operation are implicit from the signature of the operation.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Operations that are conceptually the same should have the same name even if different classes define them,&#xD;
                if they are implemented in entirely different ways, or if they have a different number of parameters. An&#xD;
                operation that creates an object, for example, should have the same name in all classes.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                If operations in several classes have the same signature, the operation must return the same kind of result&#xD;
                appropriate for the receiver object. This is an example of the concept of &lt;b>polymorphism&lt;/b>, which says&#xD;
                that different objects should respond to the same message in similar ways. Example: the operation&#xD;
                &lt;b>name&lt;/b> should return the name of the object, regardless of how the name is stored or derived.&#xD;
                Following this principle makes the model easier to understand.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>The return type&lt;/b> - The return type should be the class of object that is returned by the operation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>A short description&lt;/b> - As meaningful as you try to make it, the name of the operation is often only vaguely&#xD;
        useful when trying to understand what the operation does. Give the operation a short description consisting of a&#xD;
        couple of sentences, written from the operation &lt;b>user's&lt;/b> perspective.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>The parameters&lt;/b> - For each parameter, create a short descriptive name, decide on its class, and give it a&#xD;
        brief description. As you specify parameters, remember that fewer parameters mean better reusability. A small&#xD;
        number of parameters makes the operation easier to understand and, therefore, there is a higher likelihood of&#xD;
        finding similar operations. You might need to divide an operation with many parameters into several operations. The&#xD;
        operation must be understandable to those who want to use it. The brief description should include: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                the meaning of the parameters, if not apparent from their names&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                whether the parameter is passed &lt;b>by value&lt;/b> or &lt;b>by reference&lt;/b>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                parameters that must have values supplied&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                parameters that can be optional and their default values, if no value is provided&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                valid ranges for parameters, if applicable&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                what is done in the operation&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                what &lt;b>by reference&lt;/b> parameters are changed by the operation&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    Once you've defined the operations, complete the sequence diagrams with information about what operations are invoked&#xD;
    for each message.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    Refer to the section titled &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/design_class_E98280BF.html#Class%20Operations&quot;&#xD;
    guid=&quot;2.914882084937444E-305&quot;>Guideline: Design Class&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;h4 align=&quot;left&quot;>&#xD;
    &lt;a id=&quot;Defining operation visibility&quot; name=&quot;Defining operation visibility&quot;>Defining operation visibility&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    For each operation, identify the export visibility of the operation from these choices:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Public&lt;/b> - the operation is visible to model elements other than the class itself.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Implementation&lt;/b> - the operation is visible only within the class itself.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Protected&lt;/b> - the operation is visible only to the class itself, to its subclasses, or to &lt;i>friends&lt;/i> of&#xD;
        the class (language-dependent).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Private&lt;/b> - the operation is visible only to the class itself and to &lt;i>friends&lt;/i> of the class&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Choose the most restricted visibility possible that can still accomplish the objectives of the operation. To do this,&#xD;
    look at the sequence diagrams and, for each message, determine whether the message is coming from a class outside of&#xD;
    the receiver's package (requires &lt;b>public&lt;/b> visibility), from inside of the package (requires &lt;b>implementation&lt;/b>&#xD;
    visibility), from a subclass (requires &lt;b>protected&lt;/b> visibility), or from the class itself or a friend (requires&#xD;
    &lt;b>private&lt;/b> visibility).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Defining class operations&quot; name=&quot;Defining class operations&quot;>Defining class operations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For the most part, operations are instance operations; that is, they are performed on instances of the class. In some&#xD;
    cases, however, an operation applies to all instances of the class and, therefore, is a &lt;b>class-scope&lt;/b> operation.&#xD;
    The class operation receiver is actually an instance of a &lt;b>metaclass&lt;/b>-the description of the class itself-rather&#xD;
    than any specific instance of the class. Examples of class operations include messages that create (instantiate) new&#xD;
    instances, which return &lt;b>all Instances&lt;/b> of a class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The operation string is underlined to denote a class-scope operation.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFihkNnnEdmO6L4XMImrsA" name=" Define Methods " guid="_TFihkNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_method__defining_on_class&quot; name=&quot;XE_method__defining_on_class&quot;>&lt;/a>&lt;a id=&quot;Define Methods&quot;&#xD;
name=&quot;Define Methods&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    A method specifies the implementation of an operation. In many cases where the behavior required by the operation is&#xD;
    sufficiently defined by the operation name, description, and parameters, methods are implemented directly in the&#xD;
    programming language. Where the implementation of an operation requires the use of a specific algorithm or more&#xD;
    information than is presented in the operation's description, a separate &lt;b>method&lt;/b> description is required. The&#xD;
    &lt;b>method&lt;/b> describes how the operation works, not just what it does.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The method should discuss how to do the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        operations will be implemented&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        attributes will be implemented and used to implement operations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        relationships will be implemented and used to implement operations&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The requirements will vary from case to case, however, the method specifications for a class should always state:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        what will be done according to the requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        what other objects and their operations will be used&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    More specific requirements might concern:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        how parameters will be implemented&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        what, if any, special algorithms will be used&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Sequence diagrams are an important source for this. From these it's clear what operations will be used in other objects&#xD;
    when an operation is performed. A specification of what operations will be used in other objects is necessary for the&#xD;
    full implementation of an operation. The production of a complete method specification, therefore, requires that you&#xD;
    identify the operations for the objects involved and inspect the corresponding sequence diagrams.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TFihkdnnEdmO6L4XMImrsA" name=" Define States " guid="_TFihkdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_state__defining_on_classes&quot; name=&quot;XE_state__defining_on_classes&quot;>&lt;/a>&lt;a id=&quot;Define States&quot;&#xD;
name=&quot;Define States&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    For some operations, the behavior of the operation depends upon the state the receiver object is in. A state machine is&#xD;
    a tool that describes the states an object can assume and the events that cause the object to move from one state to&#xD;
    another (see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/statechart_diagram_640B5D0B.html&quot; guid=&quot;1.4528459404144188E-304&quot;>Technique:&#xD;
    Statechart Diagram)&lt;/a>. State machines are most useful for describing active classes. Using state machines is&#xD;
    particularly important for defining the behavior of &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_capsule_FC4A34FD.html&quot; guid=&quot;{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}&quot;>Artifact:&#xD;
    Capsule&lt;/a>s.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of a simple state machine is shown in Figure 2.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/statedg.gif&quot; width=&quot;439&quot; height=&quot;363&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Figure 2: A Simple Statechart Diagram for a Fuel Dispenser&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each state transition event can be associated with an operation. Depending on the object's state, the operation might&#xD;
    have a different behavior and the transition events describe how this occurs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The &lt;b>method&lt;/b> description for the associated operation should be updated with the state-specific information,&#xD;
    indicating for each relevant state what the operation should do. States are often represented using &lt;b>attributes&lt;/b>;&#xD;
    the statechart diagrams serve as input into the attribute identification step.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/statechart_diagram_640B5D0B.html&quot; guid=&quot;1.4528459404144188E-304&quot;>Guideline:&#xD;
    Statechart Diagram&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TGSvgNnnEdmO6L4XMImrsA" name=" Define Attributes " guid="_TGSvgNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_attribute_on_object__defining_on_classes&quot; name=&quot;XE_attribute_on_object__defining_on_classes&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Define Attributes&quot; name=&quot;Define Attributes&quot;>&lt;/a>&lt;a id=&quot;Define Attributes&quot; name=&quot;Define Attributes&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    During the definition of &lt;b>methods&lt;/b> and the identification of &lt;b>states&lt;/b>, attributes needed by the class to&#xD;
    carry out its operations are identified. Attributes provide information storage for the class instance and are often&#xD;
    used to represent the state of the class instance. Any information the class itself maintains is done through its&#xD;
    &lt;b>attributes&lt;/b>. For each attribute, define:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        its &lt;b>name&lt;/b>, which should follow the naming conventions of both the implementation language and the project&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        its &lt;b>type&lt;/b>, which will be an elementary data type supported by the implementation language&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        its &lt;b>default or initial value&lt;/b>, to which it is initialized when new instances of the class are created&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        its &lt;b>visibility&lt;/b>, which will take one of the following values: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;b>Public&lt;/b>: the attribute is visible both inside and outside of the package containing the class&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Protected&lt;/b>: the attribute is visible only to the class itself, to its subclasses, or to friends of&#xD;
                the class (language-dependent)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Private&lt;/b>: the attribute is only visible to the class itself and to friends of the class&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Implementation&lt;/b>: the attribute is visible only to the class itself&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>persistent classes&lt;/b>, whether the attribute is persistent (the default) or transient. Even though the class&#xD;
        itself might be persistent, not all attributes of the class need to be persistent&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Check to make sure all attributes are needed. Attributes should be justified-it's easy for attributes to be added early&#xD;
    in the process and survive long after they're no longer needed due to shortsightedness. Extra attributes, multiplied by&#xD;
    thousands or millions of instances, can have a detrimental effect on the performance and storage requirements of a&#xD;
    system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Refer to the section titled &lt;i>Attributes&lt;/i> in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/design_class_E98280BF.html&quot; guid=&quot;2.914882084937444E-305&quot;>Guideline: Design&#xD;
    Class&lt;/a> for more information on attributes.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TGb5cNnnEdmO6L4XMImrsA" name=" Define Dependencies " guid="_TGb5cNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Define Dependencies&quot; name=&quot;Define Dependencies&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    For each case where the communication between objects is required, ask these questions:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Is the reference to the receiver passed as a parameter to the operation? If so, establish a &lt;b>dependency&lt;/b>&#xD;
        between the sender and receiver classes in a class diagram containing the two classes. Also, if the&#xD;
        &lt;b>communication diagram&lt;/b> format for interactions is used, then qualify the link visibility and set it to&#xD;
        &lt;b>parameter&lt;/b>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is the receiver a global? If so, establish a &lt;b>dependency&lt;/b> between the sender and receiver classes in a class&#xD;
        diagram containing the two classes. Also, if the &lt;b>communication diagram&lt;/b> format for interactions is used,&#xD;
        qualify the link visibility and set it to &lt;b>global&lt;/b>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is the receiver a temporary object created and destroyed during the operation itself? If so, establish a&#xD;
        &lt;b>dependency&lt;/b> between the sender and receiver classes in a class diagram containing the two classes. Also, if&#xD;
        the &lt;b>communication diagram&lt;/b> format for interactions is used, qualify the link visibility and set it to&#xD;
        &lt;b>local&lt;/b>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Note that links modeled this way are transient links, existing only for a limited duration in the specific context of&#xD;
    the collaboration-in that sense, they are instances of the association role in the collaboration. However, the&#xD;
    relationship in a class model (that is, independent of context) should be a dependency, as previously stated. As [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.base_rup/customcategories/references_56F06DFD.html#RUM98&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>RUM98&lt;/a>] states, in the definition of &lt;b>transient link&lt;/b>: &quot;It is possible to model&#xD;
    all such links as associations, but then the conditions on the associations must be stated very broadly, and they lose&#xD;
    much of their precision in constraining combinations of objects.&quot; In this situation, the modeling of a dependency is&#xD;
    less important than the modeling of the relationship in the collaboration, because the dependency does not describe the&#xD;
    relationship completely; only that it exists.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TGb5cdnnEdmO6L4XMImrsA" name=" Define Associations " guid="_TGb5cdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Define Associations&quot; name=&quot;Define Associations&quot;>&lt;/a>&lt;a id=&quot;Define Attributes and Relationships&quot;&#xD;
name=&quot;Define Attributes and Relationships&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Associations provide the mechanism for objects to communicate with one another. They provide objects with a conduit&#xD;
    along which messages can flow. They also document the dependencies between classes, highlighting that changes in one&#xD;
    class could be felt among many other classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Examine the &lt;b>method&lt;/b> descriptions for each operation to understand how instances of the class communicate and&#xD;
    collaborate with other objects. To send a message to another object, an object must have a reference to the receiver of&#xD;
    the message. A communication diagram (an alternative representation of a sequence diagram) will show object&#xD;
    communication in terms of links, as illustrated in Figure 3.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/collabd.gif&quot; width=&quot;610&quot; height=&quot;493&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Figure 3: An Example of a Communication Diagram&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Defining associations and aggregations&quot; name=&quot;Defining associations and aggregations&quot;>Defining associations and&#xD;
    aggregations&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The remaining messages use either &lt;b>association&lt;/b> or &lt;b>aggregation&lt;/b> to specify the relationship between&#xD;
    instances of two classes that communicate. See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/association_98710829.html&quot; guid=&quot;5.540135518285335E-305&quot;>Guideline:&#xD;
    Association&lt;/a> and &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/guidances/guidelines/aggregation_A53E33AB.html&quot;&#xD;
    guid=&quot;1.1538495077622037E-304&quot;>Guideline: Aggregation&lt;/a> for information on choosing the appropriate representation.&#xD;
    For both of these associations, set the link visibility to &lt;b>field&lt;/b> in communication diagrams. Other tasks include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Establish the navigability of associations and aggregations. You can do this by considering what navigabilities are&#xD;
        required on their link instantiations in the interaction diagrams. Because navigability is &lt;b>true&lt;/b> by default,&#xD;
        you only need to find associations (and aggregations) where all opposite link roles of all objects of a class in&#xD;
        the association do not require navigability. In those cases, set the navigability to &lt;b>false&lt;/b> on the role of&#xD;
        the class.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If there are attributes on the association itself (represented by association classes), create a design class to&#xD;
        represent the association class, with the appropriate attributes. Interpose this class between the other two&#xD;
        classes, and establish associations with appropriate multiplicity between the association class and the other two&#xD;
        classes.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Specify whether &lt;i>association ends&lt;/i> should be &lt;b>ordered&lt;/b> or not; this is the case when the objects&#xD;
        associated with an object at the other end of the association have an ordering that must be preserved.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the associated (or aggregated) class is only referenced by the current class, consider whether the class should&#xD;
        be nested. Advantages of nesting classes include faster messaging and a simpler design model. Disadvantages include&#xD;
        having the space for the nested class statically allocated regardless of whether there are instances of the nested&#xD;
        class, a lack of object identity separate from the enclosing class, or an inability to reference nested class&#xD;
        instances from outside of the enclosing class.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Associations and aggregations are best defined in a class diagram that depicts the associated classes. The class&#xD;
    diagram should be &lt;b>owned&lt;/b> by the package that contains the associated classes. Figure 4 illustrates an example of&#xD;
    a class diagram, depicting associations and aggregations.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/classdg.gif&quot; width=&quot;469&quot; height=&quot;396&quot; alt=&quot;Diagram described in accompanying text.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Figure 4: Example of a Class Diagram showing Associations, Aggregations, and Generalizations between Classes&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Handling Subscribe-Associations between Analysis Classes&quot;&#xD;
    name=&quot;Handling Subscribe-Associations between Analysis Classes&quot;>Handling subscribe-associations between analysis&#xD;
    classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Subscribe-associations between &lt;b>analysis classes&lt;/b> are used to identify event dependencies between classes. In the&#xD;
    Design Model you must handle these event dependencies explicitly, either by using available event-handler frameworks or&#xD;
    by designing and building your own event-handler framework. In some programming languages-such as Visual Basic-this is&#xD;
    straightforward; you declare, raise, and handle the corresponding events. In other languages, you might have to use&#xD;
    some additional library of reusable functions to handle subscriptions and events. If the functionality can't be&#xD;
    purchased, it will need to be designed and built. See also &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/subscribe-association_1AB75163.html&quot; guid=&quot;1.401846671640991E-305&quot;>Guideline:&#xD;
    Subscribe-Association&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TIE4MNnnEdmO6L4XMImrsA" name=" Define Internal Structure " guid="_TIE4MNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Define Internal Structure&quot; name=&quot;Define Internal Structure&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Some classes may represent complex abstractions and have a complex structure. While modeling a class, the designer may&#xD;
    want to represent its internal participating elements and their relationships, to make sure that the implementer will&#xD;
    accordingly implement the collaborations happening inside that class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In UML 2.0, classes are defined as &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/termdefinitions/structured_class_4BB99B12.html&quot; guid=&quot;_yW3E4NnmEdmO6L4XMImrsA&quot;>structured&#xD;
    classes&lt;/a>, with the capability to have a internal structure and ports. Then, classes may be decomposed into&#xD;
    collections of connected parts that may be further decomposed in turn. A class may be encapsulated by forcing&#xD;
    communications from outside to pass through ports obeying declared interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you find a complex class with complex structure, create a composite structure diagram for that class. Model the&#xD;
    parts that will perform the roles for that class behavior. Establish how parts are 'wired' together by using&#xD;
    connectors. Make use of ports with declared interfaces if you want to allow different clients of that class access&#xD;
    specific portions of behavior offered by that class. Also make use of ports to fully isolate the internal parts of that&#xD;
    class from its environment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on this topic and examples on composite structure diagram, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/structured_class_FF8DB16F.html&quot; guid=&quot;1.1994826813129747E-304&quot;>Concept: Structured&#xD;
    Class&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TIOpMNnnEdmO6L4XMImrsA" name=" Define Generalizations " guid="_TIOpMNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Define Generalizations&quot; name=&quot;Define Generalizations&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    Classes might be organized into a generalization hierarchy to reflect common behavior and common structure. A common&#xD;
    &lt;b>superclass&lt;/b> can be defined, from which &lt;b>subclasses&lt;/b> can inherit both behavior and structure. Generalization&#xD;
    is a notational convenience that allows you to define common structure and behavior in one place, and to reuse it where&#xD;
    you find repeated behavior and structure. Refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/generalization_94751549.html&quot; guid=&quot;1.839540980397304E-305&quot;>Guideline:&#xD;
    Generalization&lt;/a> for more information on generalization relationships.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you find a generalization, create a common superclass to contain the common attributes, associations,&#xD;
    aggregations, and operations. Remove the common behavior from the classes that will become subclasses of the common&#xD;
    superclass. Define a &lt;b>generalization relationship&lt;/b> from the subclass to the superclass.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TIOpMdnnEdmO6L4XMImrsA" name=" Resolve Use-Case Collisions " guid="_TIOpMdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_concurrency_conflicts__identifying&quot; name=&quot;XE_concurrency_conflicts__identifying&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Resolve Use-Case Collisions&quot; name=&quot;Resolve Use-Case Collisions&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    The purpose of this step is to prevent concurrency conflicts caused when two or more use cases could potentially access&#xD;
    instances of the design class simultaneously, in possibly inconsistent ways.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One of the difficulties with proceeding use-case-by-use-case through the design process is that two or more use cases&#xD;
    could attempt to invoke operations simultaneously on design objects in potentially conflicting ways. In these cases,&#xD;
    concurrency conflicts must be identified and resolved explicitly.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If synchronous messaging is used, executing an operation will block subsequent calls to the objects until the operation&#xD;
    completes. Synchronous messaging implies a first-come, first-served ordering to message processing. This might resolve&#xD;
    the concurrency conflict, especially in cases where all messages have the same priority or where every message runs&#xD;
    within the same execution thread. In cases where an object might be accessed by different threads of execution&#xD;
    (represented by active classes), explicit mechanisms must be used to prevent or resolve the concurrency conflict.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    In real-time systems where threads are represented by &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_capsule_FC4A34FD.html&quot; guid=&quot;{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}&quot;>Artifact:&#xD;
    Capsule&lt;/a>s, this problem still has to be solved for multiple concurrent access to passive objects, whereas the&#xD;
    capsules themselves provide a queuing mechanism and enforce run-to-completion semantics to handle concurrent access. A&#xD;
    recommended solution is to encapsulate passive objects within capsules, which avoids the problem of concurrent access&#xD;
    through the semantics of the capsule itself.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It might be possible for different operations on the same object to be invoked simultaneously by different threads of&#xD;
    execution without a concurrency conflict; both the name and address of a customer could be modified concurrently&#xD;
    without conflict. It's only when two different threads of execution attempt to modify the same property of the object&#xD;
    that a conflict occurs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For each object that might be accessed concurrently by different threads of execution, identify the code sections that&#xD;
    must be protected from simultaneous access. Early in the Elaboration phase, identification of specific code segments&#xD;
    will be impossible; operations that must be protected will suffice. Next, select or design appropriate access control&#xD;
    mechanisms to prevent conflicting simultaneous access. Examples of these mechanisms include message queuing to&#xD;
    serialize access, use of semaphores or tokens to allow access only to one thread at a time, or other variants of&#xD;
    locking mechanisms. The choice of mechanism tends to be highly implementation-dependent, and typically varies with the&#xD;
    programming language and operating environment. See the &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Project-Specific Guidelines&lt;/a> for guidance on selecting concurrency&#xD;
    mechanisms.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_TIOpMtnnEdmO6L4XMImrsA" name=" Handle Nonfunctional Requirements in General " guid="_TIOpMtnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_nonfunctional_requirements__handling_of&quot; name=&quot;XE_nonfunctional_requirements__handling_of&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Handle Non-Functional Requirements&quot; name=&quot;Handle Non-Functional Requirements&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    The Design Classes are refined to handle general, nonfunctional requirements. Important input to this step include the&#xD;
    nonfunctional requirements on an analysis class that might already be stated in its special requirements and&#xD;
    responsibilities. Such requirements are often specified in terms of what architectural (analysis) mechanisms are needed&#xD;
    to realize the class; in this step, the class is then refined to incorporate the design mechanisms corresponding to&#xD;
    these analysis mechanisms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The available design mechanisms are identified and characterized by the software architect. For each design mechanism&#xD;
    needed, qualify as many characteristics as possible, giving ranges where appropriate. Refer to &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/tasks/identify_design_mechanisms_9A197FBC.html&quot;&#xD;
    guid=&quot;{C7A26BD7-3820-48D9-830F-684C3AF155F9}&quot;>Task: Identify Design Mechanisms&lt;/a>, &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/analysis_mechanisms_36135B43.html&quot; guid=&quot;9.76539014099254E-305&quot;>Concept: Analysis&#xD;
    Mechanisms&lt;/a>, and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/design_and_implementation_mechanisms_A37EAC7D.html&quot;&#xD;
    guid=&quot;6.131233324119695E-305&quot;>Concept: Design and Implementation Mechanisms&lt;/a> for more information on design&#xD;
    mechanisms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There can be several general design guidelines and mechanisms that need to be taken into consideration when classes are&#xD;
    designed, such as how to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        use existing products and components&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        adapt to the programming language&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        distribute objects&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        achieve acceptable performance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        achieve certain security levels&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        handle errors&#xD;
    &lt;/li>&#xD;
&lt;/ul></sectionDescription>
  </sections>
  <sections xmi:id="_TIOpM9nnEdmO6L4XMImrsA" name=" Evaluate Your Results " guid="_TIOpM9nnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Evaluate Your Results&quot; name=&quot;Evaluate Your Results&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Check the design model at this stage to verify that your work is headed in the right direction. There is no need to&#xD;
    review the model in detail, but you should consider the following checklists:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/guidances/checklists/design_model_18BE347C.html&quot;&#xD;
        guid=&quot;1.4639852935143625E-305&quot;>Design Model&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.base_rup/guidances/checklists/design_class_436B6210.html&quot;&#xD;
        guid=&quot;1.1028389988231071E-306&quot;>checklist for Design Classes&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></sectionDescription>
  </sections>
  <purpose>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_class__designing&quot; name=&quot;XE_class__designing&quot;>&lt;/a> &#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To ensure that the class provides the behavior the use-case realizations require&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To ensure that sufficient information is provided to unambiguously implement the class&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To handle nonfunctional requirements related to the class&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To incorporate the design mechanisms used by the class&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
