<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1aEXMtnmEdmO6L4XMImrsA" name="review_the_architecture,{35BAFA92-EAF9-41E8-8BDE-AB9B61A68E04}" guid="_1aEXMtnmEdmO6L4XMImrsA" changeDate="2005-07-25T15:05:38.399-0700" version="7.1.0">
  <sections xmi:id="_P5ZVsNnnEdmO6L4XMImrsA" name=" General Recommendations " guid="_P5ZVsNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;GeneralRecommendations&quot; name=&quot;GeneralRecommendations&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                General recommendations for each review.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    Seen from 20,000 feet there is not much that distinguishes a software architecture assessment from any other assessment&#xD;
    or review.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, one important characteristic of the software architecture is the lack of specific measurements for many&#xD;
    architectural quality attributes-only a few architectural qualities can be objectively measured. Performance is an&#xD;
    example where measurement is possible. Other qualities are more qualitative or subjective: conceptual integrity for&#xD;
    example. Moreover, it is often hard to decide what a metric means in absence of other data or reference for comparison.&#xD;
    If a reference system is available and understood by the target audience, it is often convenient to express some of the&#xD;
    results of the review &lt;b>relative&lt;/b> to this reference system. This may happen in a context where the system under&#xD;
    design can be compared to an earlier design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When in the life-cycle this assessment takes place also affects its purpose or usefulness.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/ac_rvarc.gif&quot; alt=&quot;Project Lifecycle Iteration Diagram&quot; width=&quot;660&quot; height=&quot;210&quot; />&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        At the end of the inception phase in an initial development cycle, there is usually little of a concrete&#xD;
        architecture in place. But a review may uncover some unrealistic objectives, missing pieces, missed opportunity for&#xD;
        reusing existing products, etc.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The most natural place for a software architecture assessment is at the end of the elaboration phase. This phase is&#xD;
        primarily focused on exploring the requirements in details, and baselining an architecture. An architecture review&#xD;
        is mandated by the RUP at this milestone. This is the case where a broad range of architectural qualities are&#xD;
        examined.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        More focused assessments may take place during the construction phase to examine specific quality attributes, such&#xD;
        as performance or safety, and at the end of the construction phase for any lingering issues that may make the&#xD;
        product unfit to be put in the hands of its users.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Damage-control assessments may take place late in the construction or even transition phases, when things have gone&#xD;
        really wrong: construction does not complete, or an unacceptable level of problems arise in the installed base&#xD;
        during the transition.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Finally as assessment may take place at the end of the transition phase, in particular to inventory reusable assets&#xD;
        for an eventual new product or evolution cycle.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The &quot;peer&quot; reviewer has the same staffing profile as that of the Role: &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_software_architect_DB0BF177.html&quot; guid=&quot;{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}&quot;>Software&#xD;
    Architect&lt;/a>, although with a more narrow focus on the technical issues. Leadership, maturity, pragmatism, and&#xD;
    result-orientation are important to lesser degrees, but still important-a reviewer may uncover architectural defects&#xD;
    that are likely to be unpopular if they threaten the schedule of the project. Still, it's better to raise critical&#xD;
    issues early, when they can be resolved, rather than blindly following a schedule that leads the project team down the&#xD;
    wrong path. The architecture reviewer needs to balance risks against costs, remaining sensitive to the broader issues&#xD;
    of project success. The architecture reviewer also needs to be a persuasive communicator who can raise and discuss&#xD;
    sensitive issues.&lt;br />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_P6StkNnnEdmO6L4XMImrsA" name=" Recommended Review Meetings " guid="_P6StkNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;RecommendedReviewMeetings&quot; name=&quot;RecommendedReviewMeetings&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                To define the scope and the goals of the review.&lt;br />&#xD;
                 To define the approaches used for each specific scope/goal combination.&amp;nbsp;&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    Diverse approaches can be used to do the review:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        representation driven&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        information driven&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        scenario driven&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Representation-driven review&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Obtain (or build) a representation of the architecture, then ask questions and reason based on this representation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is a wide range of situations here, from the organization that are very architecture-literate and will provide&#xD;
    some intelligible description to start with, to organizations where you need to identify who is the software architect&#xD;
    (even hidden under some other name), and need to extract the information from that person, to the place where software&#xD;
    architecture is a totally unknown concept. This process is then called &quot;mining the architecture,&quot; and in practice looks&#xD;
    literally like that: digging it out the software or its documentation with a pickax, looking at source code,&#xD;
    interfaces, configuration data, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One model that can be used to organize the representation is in the format of the architectural views presented in the&#xD;
    Software Architecture Document: the logical view organizes the main classes (the object model), the process view&#xD;
    describes the main threads of control and how they communicate, the development view shows the various subsystems and&#xD;
    their dependencies, the physical view describes the mapping of elements of the other views onto one or several physical&#xD;
    configuration. Organize issues alongside the various views.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Information-driven review&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Establish the list of information-data, measurements-that is needed for the reasoning, get the information, and compare&#xD;
    this information to either the requirements or some accepted reference standard. This applies well for investigating&#xD;
    certain quality attributes, such as performance, or robustness.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Scenario-driven review&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    This is the systematic &quot;what if&quot; approach. Transform the general questions being asked into a set of scenarios the&#xD;
    system should go through and ask questions based on the scenarios. Example of such scenarios are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The system runs on platforms X and Y. (The real quality attribute probed is portability.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system does this (additional) function F. (The real quality attribute is extensibility.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system processes 200 requests per hour. (The real quality attribute is scalability.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system is being installed on this kind of site by the user. (The real quality attribute is completeness or&#xD;
        usability.)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The advantage of such an approach is that it puts the task in a very concrete perspective, understandable by all&#xD;
    parties. It also allows to probe into omissions or flaws into the requirements, especially when the requirements are&#xD;
    informal or unwritten or very general and terse. The disadvantage is that it does not grab the architecture itself as&#xD;
    the object being reviewed, but takes the system as a black box into which we are only sending some probes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In practice, things are not so clearly separated, and we end up doing a bit of all three approaches.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Identifying issues&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Uncovering potential issues is mostly done by human judgment based upon knowledge and experience. Certain failure&#xD;
    patterns are repeated from project to project, from organization to organization. Certain heuristics can be used to&#xD;
    uncover problem areas. Check-lists can be useful (some very generic ones are proposed later), as well as results from&#xD;
    previous reviews, if any.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Capture &lt;b>potential&lt;/b> issues as they appear, describing them in a neutral tone-no finger pointing, no&#xD;
    &quot;catastrophism'. You may use little cardboard cards as do AT&amp;amp;T reviewers, or as we do with CRC cards, to help&#xD;
    prioritizing, organizing, eliminating.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Later, sort the candidate issues by decreasing scope or impact, and if there are many, tackle first the ones that are&#xD;
    directly related to the question at hand, leaving the &quot;other suggestions&quot; for later if time permits. Then assert the&#xD;
    reality of the problem: very often one can perceive a problem, but it may not be. We just have not spoken to the right&#xD;
    person, looked at the right piece of information. Sort again. Ensure multiple data points to verify the reality of a&#xD;
    problem. (Inexperienced assessors tend to be too single-threaded.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When the problem has been confirmed, rapidly examine what could eliminate the problem, without necessarily trying to do&#xD;
    on-the-fly redesign of the system. Write down potential simplifications, reuse and alternatives (for example, buy vs.&#xD;
    build).&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_P6StkdnnEdmO6L4XMImrsA" name=" Allocate Defect Resolution Responsibilities " guid="_P6StkdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Allocate Defect Resolution Responsibilities&quot; name=&quot;Allocate Defect Resolution Responsibilities&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                To take action on the defects identified.&amp;nbsp;&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    After the review, allocate responsibility for each defect identified. &quot;Responsibility&quot; in this case may not be to fix&#xD;
    the defect, but to coordinate additional investigation of alternatives, or to coordinate the resolution of the defect&#xD;
    if it is far-reaching or broad in scope.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></sectionDescription>
  </sections>
  <purpose>&lt;a id=&quot;XE_reviewing__architecture&quot; name=&quot;XE_reviewing__architecture&quot;>&lt;/a>&lt;a id=&quot;XE_architecture__reviewing&quot;&#xD;
name=&quot;XE_architecture__reviewing&quot;>&lt;/a>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To uncover any unknown or perceived risks in the schedule or budget.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To detect any architectural design flaws. Architectural flaws are known to be the hardest to fix, the most damaging&#xD;
        in the long run.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To detect a potential mismatch between the requirements and the architecture: over-design, unrealistic&#xD;
        requirements, or missing requirements. In particular the assessment may examine some aspects often neglected in the&#xD;
        areas of operation, administration and maintenance. How is the system installed? Updated? How do we transition the&#xD;
        current databases?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To evaluate one or more specific architectural qualities: performance, reliability, modifiability, security,&#xD;
        safety.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To identify reuse opportunities&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
