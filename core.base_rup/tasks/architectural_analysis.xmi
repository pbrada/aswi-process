<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1cmt0NnmEdmO6L4XMImrsA" name="architectural_analysis,{8CB48402-D4C5-4E17-BB33-507315CB1BBF}" guid="_1cmt0NnmEdmO6L4XMImrsA" changeDate="2005-08-20T20:48:27.956-0700" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    &lt;a id=&quot;XE_modeling_conventions__defining&quot; name=&quot;XE_modeling_conventions__defining&quot;>&lt;/a>Architectural analysis focuses&#xD;
    on defining a candidate architecture and constraining the architectural techniques to be used in the system. It relies&#xD;
    on gathering experience gained in similar systems or problem domains to constrain and focus the architecture so that&#xD;
    effort is not wasted in architectural rediscovery. In systems where there is already a well-defined architecture,&#xD;
    architectural analysis might be omitted; architectural analysis is primarily beneficial when developing new and&#xD;
    unprecedented systems.&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_Qiq8MNnnEdmO6L4XMImrsA" name=" Develop Architecture Overview " guid="_Qiq8MNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Develop Architecture Overview&quot; name=&quot;Develop Architecture Overview&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&amp;nbsp;&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                To facilitate system envisioning by exploring and evaluating high-level architectural options.&amp;nbsp;&lt;br />&#xD;
                 To convey an early understanding of the high-level structure of the intended system to the sponsor,&#xD;
                development teams, and other stakeholders.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    The architecture overview is created early in the lifecycle of a project, possibly as early as the inception phase. It&#xD;
    reflects early decisions and working assumptions on implementing the Vision, as well as decisions concerning the&#xD;
    physical and logical architecture, and nonfunctional requirements of the system. It's produced by the software&#xD;
    architect, often in collaboration with the project sponsor, and takes the form of an informal, rich picture storyboard&#xD;
    or iconic graph. Conceptually, it illustrates the essential nature of the proposed solution, conveying the governing&#xD;
    ideas and including the major building blocks. The level of formality of the architectural overview is project&#xD;
    dependent. For example, in a large, high-ceremony project, it might be necessary to capture the architecture overview&#xD;
    in the appropriate sections of the Software Architecture document, so it can be formally reviewed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At this point the architecture overview is a provisional first pass. Do not base commitments on the architecture&#xD;
    overview diagram until an executable architectural prototype has validated the architecture, including design,&#xD;
    implementation, and deployment concerns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Consider basing the architecture on a reference architecture, other &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/software_architecture_4269A354.html#Architectural%20Patterns&quot;&#xD;
    guid=&quot;3.066252221588648E-305&quot;>architectural patterns&lt;/a>, or other architectural assets.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Consider whether or not you wish to refine and maintain the architecture overview diagram, to serve as a communication&#xD;
    vehicle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Many systems are constrained to be developed and deployed in an existing environment of hardware and software; for&#xD;
    these, the software architect will gather information about the current environment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, in an e-business system development the following information is pertinent:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        existing network logical and physical design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        existing databases and database design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        existing Web environment (servers, firewalls, and so forth)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        existing server environment (configuration, software versions, planned upgrades)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        existing standards (network, naming, protocols, and so on)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Such information can be captured either textually, or in a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_deployment_model_57DF1DF5.html&quot;&#xD;
    guid=&quot;{5981B6BE-2FD1-4984-AA94-2F7428439BA6}&quot;>Deployment Model&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qiq8MdnnEdmO6L4XMImrsA" name=" Survey Available Assets " guid="_Qiq8MdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Survey Available Assets&quot; name=&quot;Survey Available Assets&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&amp;nbsp;&#xD;
            &lt;/td>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;95%&quot;>&#xD;
                To identify assets that might be relevant to the project.&lt;br />&#xD;
                 To analyze the fit and gap between assets and project requirements.&lt;br />&#xD;
                 To decide whether to base areas of the system on assets.&lt;br />&#xD;
                 To locate and list assets that are potentially reusable on the project.&lt;br />&#xD;
                 To perform a preliminary evaluation to ensure that necessary support is potentially available.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    You need to understand the requirements of the environment for which assets are being considered, and the system scope&#xD;
    and general functionality required. Search through organizational asset bases and industry literature to identify&#xD;
    assets or similar projects. There are several types of assets to consider, such as (but not limited to) industry&#xD;
    models, frameworks, classes, and experience. You'll need to assess whether available assets contribute to solving the&#xD;
    key challenges of the current project and whether they are compatible with the project's constraints.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You'll want to analyze the extent of the fit between asset and customer requirements, considering whether any of the&#xD;
    requirements are negotiable (to enable use of the asset).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Be certain you assess whether the asset could be modified or extended to satisfy requirements, and what the tradeoffs&#xD;
    are in terms of cost, risk, and functionality from adopting the asset.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Finally, you'll want to decide, in principle, whether to use one or more assets and document the rationale for this&#xD;
    decision.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tMNnnEdmO6L4XMImrsA" name=" Define the High-Level Organization of Subsystems " guid="_Qi0tMNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_design_subsystem__defining_high-level_organization_of&quot;&#xD;
name=&quot;XE_design_subsystem__defining_high-level_organization_of&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Define the High-Level Organization of Subsystems&quot; name=&quot;Define the High-Level Organization of Subsystems&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td colspan=&quot;2&quot;>&#xD;
                To create an initial structure for the Design Model.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    When the focus is on performing the architectural synthesis during inception, this step is excluded from this task.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Normally the design model is organized in layers-a common &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/software_architecture_4269A354.html#Architectural%20Patterns&quot;&#xD;
    guid=&quot;3.066252221588648E-305&quot;>architectural pattern&lt;/a> for moderate to large-sized systems. The number of layers is&#xD;
    not fixed, but varies from situation to situation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    During architectural analysis, you usually focus on the two high-level layers; that is, the &lt;b>application&lt;/b> and&#xD;
    &lt;b>business-specific&lt;/b> layers. This is what is meant by the &lt;i>high-level organization of subsystems&lt;/i>. The other&#xD;
    lower-level layers are considered in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/tasks/incorporate_design_elements_D3C582B5.html&quot; guid=&quot;{5C647173-4E32-4594-96A9-2548B47722FA}&quot;>Task:&#xD;
    Incorporate Existing Design Elements&lt;/a>. If you're using specific architectural patterns, the subsystems are defined&#xD;
    around the architectural template for that pattern.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more on layering, see &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/guidances/guidelines/layering_FCCD1BDA.html&quot;&#xD;
    guid=&quot;4.458864982057142E-306&quot;>Guideline: Layering&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tMdnnEdmO6L4XMImrsA" name=" Identify Key Abstractions " guid="_Qi0tMdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_key_concepts__identifying&quot; name=&quot;XE_key_concepts__identifying&quot;>&lt;/a>&lt;a id=&quot;Identify Key Concepts&quot;&#xD;
name=&quot;Identify Key Concepts&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                To get prepared for analysis by identifying the key abstractions (representation of concepts identified&#xD;
                during business modeling tasks when applicable and requirement tasks) that the system must handle.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    When the focus is on performing the architectural synthesis, this step is done to the extent necessary to guide the&#xD;
    software architect in selecting assets for the construction of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_architectural_proof_of_concept_9AF95095.html&quot;&#xD;
    guid=&quot;{198EA2A5-4FBA-45D5-85BA-53B108728534}&quot;>Artifact: Architectural Proof-of-Concept&lt;/a> and to support&#xD;
    representative usage scenarios.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Requirements tasks and, when applicable, Business Modeling tasks usually uncover key concepts that the system must be&#xD;
    able to handle; these concepts manifest themselves as key design abstractions. Because of the work already done, there&#xD;
    is no need to repeat the identification work again during &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/tasks/use_case_analysis_A6990185.html&quot; guid=&quot;{28014615-A62F-452D-B821-30C7CAB0EC44}&quot;>Task: Use Case&#xD;
    Analysis&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can take advantage of existing knowledge by identifying preliminary entity analysis classes to represent these key&#xD;
    abstractions on the basis of general knowledge of the system, such as the Requirements, the &lt;b>Glossary&lt;/b>, and, in&#xD;
    particular, the &lt;b>Domain Model&lt;/b> or the &lt;b>Business Analysis Model&lt;/b>, if you have one.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you define the key abstractions, also define any relationships that exist between entity classes. Present the key&#xD;
    abstractions in one or several class diagrams, and create a short description for each.&amp;nbsp;Depending on the domain,&#xD;
    and the novelty of the system, &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/termdefinitions/analysis_pattern_86D515F0.html&quot; guid=&quot;_x613Q9nmEdmO6L4XMImrsA&quot;>&lt;b>analysis&#xD;
    patterns&lt;/b>&lt;/a> that capture many of the key abstractions required to model the system might already exist. Use of&#xD;
    such patterns (which should already have been successfully employed in the domain) will considerably ease the&#xD;
    intellectual burden of identifying the important concepts that must be represented. [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/customcategories/references_56F06DFD.html#FOW97a&quot; guid=&quot;7.755968586980351E-308&quot;>FOW97a&lt;/a>] presents&#xD;
    some analysis patterns that are immediately useful for modeling business systems, but might be applicable in other&#xD;
    contexts. Another example is the Object Management Group (OMG), which also attempts to define interfaces and protocols&#xD;
    for many domains through the work of its Domain Technology Committee and associated task forces. Inevitably, this work&#xD;
    leads to identifying important abstractions in the domain.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The analysis classes identified at this point will probably change and evolve during the course of the project. The&#xD;
    purpose of this step is not to identify a set of classes that will survive throughout design, but to identify the key&#xD;
    concepts the system must handle. Don't spend too much time describing entity classes in detail at this initial stage,&#xD;
    because there is a risk that you'll identify classes and relationships not actually needed by the use cases. Remember&#xD;
    that you will find more entity classes and relationships when looking at the use cases.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tMtnnEdmO6L4XMImrsA" name=" Identify Stereotypical Interactions " guid="_Qi0tMtnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Identify Stereotypical Interactions&quot; name=&quot;Identify Stereotypical Interactions&quot;>&lt;/a>&#xD;
&lt;p>&#xD;
    This step is included only when performing this task in inception.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The purpose of this step is to identify those interactions, between key abstractions in the system, that characterize&#xD;
    or are representative of significant kinds of activity in the system. These interactions are captured as Use-Case&#xD;
    Realizations.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tM9nnEdmO6L4XMImrsA" name=" Develop Deployment Overview " guid="_Qi0tM9nnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Develop Deployment Overview&quot; name=&quot;Develop Deployment Overview&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;5%&quot;>&#xD;
                &lt;p align=&quot;left&quot;>&#xD;
                    &lt;b>Purpose&lt;/b>&#xD;
                &lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                To provide a basis for assessing the viability of implementing the system.&lt;br />&#xD;
                 To gain an understanding of the geographical distribution and operational complexity of the system.&lt;br />&#xD;
                 To provide a basis for early effort and cost estimates.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    Develop a high level overview of how the software is deployed. For example, determine if the system needs to accessed&#xD;
    remotely, or has requirements that suggest distribution across multiple nodes. Some sources of information to consider&#xD;
    are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        users (at locations), defined in User Profiles (in the Vision) and use cases (in the Use-Case Model)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        organization of business data (in the Business Analysis Model and Design Model when available)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        service level requirements (in the Supplementary Specifications)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        constraints (in the Supplementary Specifications, such as requirements to interface with legacy systems)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    If a non-trivial distributed system is required, then a Deployment Model can be used to capture the relationship&#xD;
    between nodes. This should include provisionally assigning components and data to nodes, and indicate how users access&#xD;
    components that access data. Detailed specification of nodes and connections is deferred, except where they are&#xD;
    important for estimating or assessing viability. Existing assets can be used, if appropriate assets are available.&#xD;
    Although this is the first deployment model produced in the project, and it's produced quickly and at a high level, it&#xD;
    might identify actual hardware and software products if they are known, or if it's important to make these selection&#xD;
    decisions at this time.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Validate that the deployment model supports users (especially users at remote locations if this is required) performing&#xD;
    typical use cases while satisfying nonfunctional requirements and constraints. Validate that the nodes and connections&#xD;
    are adequate to support the interactions between components on different nodes, and between components and their stored&#xD;
    data.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tNNnnEdmO6L4XMImrsA" name=" Identify Analysis Mechanisms " guid="_Qi0tNNnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_analysis_mechanisms__identifying&quot; name=&quot;XE_analysis_mechanisms__identifying&quot;>&lt;/a>&lt;a&#xD;
id=&quot;Identify Analysis Mechanisms&quot; name=&quot;Identify Analysis Mechanisms&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td colspan=&quot;2&quot; width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                To define the analysis mechanisms and services used by designers to give &quot;life&quot; to their objects.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    When the focus is on performing the architectural synthesis during inception, this step is excluded from this task.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Analysis mechanisms can be identified top-down (a priori knowledge) or bottom-up (discovered as you go along). In the&#xD;
    top-down mode, experience guides the software architect to know that certain problems are present in the domain and&#xD;
    will require certain kinds of solutions. Examples of common architectural problems that might be expressed as&#xD;
    mechanisms during analysis are: persistence, transaction management, fault management, messaging, and inference&#xD;
    engines. The common aspect of all of these is that each is a general capability of a broad class of systems, and each&#xD;
    provides functionality that interacts with or supports the basic application functionality. The analysis mechanisms&#xD;
    support capabilities required in the basic functional requirements of the system, regardless of the platform it's&#xD;
    deployed upon or the implementation language. Analysis mechanisms also can be designed and implemented in a number of&#xD;
    different ways; generally there will be more than one design mechanism corresponding to each analysis mechanism, and&#xD;
    perhaps more than one way of implementing each design mechanism.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The bottom-up approach is where analysis mechanisms are ultimately born-they are created as the software architect&#xD;
    sees, perhaps faintly at first, a common theme emerging from a set of solutions to various problems. There is a need to&#xD;
    provide a way for elements in different threads to synchronize their clocks and there is a need for a common way of&#xD;
    allocating resources. Analysis mechanisms, which simplify the language of analysis, emerge from these patterns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Identifying an analysis mechanism means you identify that a common, perhaps implicit (in that the requirements for the&#xD;
    system imply it), subproblem exists, and you name it. Initially the name might be all that exists; for&#xD;
    example,&amp;nbsp;the software architect recognizes that the system will require a persistence mechanism.&amp;nbsp;Ultimately,&#xD;
    this mechanism will be implemented through the collaboration of a &lt;i>society of classes&lt;/i> (see [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.base_rup/customcategories/references_56F06DFD.html#BOO98&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>BOO98&lt;/a>]), some of which do not deliver application functionality directly, but exist&#xD;
    only to support it. Very often these support classes are located in the middle or lower layers of a layered&#xD;
    architecture, thereby providing a common support service to all application level classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the identified subproblem is common enough, perhaps a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/termdefinitions/pattern_E76690AA.html&quot; guid=&quot;_yPtUDNnmEdmO6L4XMImrsA&quot;>pattern&lt;/a> exists&#xD;
    from which the mechanism can be instantiated-by binding existing classes and implementing new ones as required by the&#xD;
    pattern. An analysis mechanism produced this way will be abstract, and will require further refinement through design&#xD;
    and implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/concepts/analysis_mechanisms_36135B43.html&quot; guid=&quot;9.76539014099254E-305&quot;>Concept: Analysis&#xD;
    Mechanisms&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Qi0tNdnnEdmO6L4XMImrsA" name=" Review the Results " guid="_Qi0tNdnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;Review the Results&quot; name=&quot;Review the Results&quot;>&lt;/a>&#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table border=&quot;1&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; cellpadding=&quot;4&quot; style=&quot;border: 1px solid rgb(128,128,128)&quot;&#xD;
    bordercolorlight=&quot;#808080&quot; bordercolordark=&quot;#808080&quot;>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;5%&quot;>&#xD;
                &lt;b>Purpose&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td width=&quot;95%&quot;>&#xD;
                To ensure that the results of architectural analysis are complete and consistent.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    As Architectural Analysis concludes, review the architectural mechanisms, the subsystems, packages, and classes that&#xD;
    have been identified to ensure they're complete and consistent. As the results of Architectural Analysis are&#xD;
    preliminary and relatively informal, reviews should be informal as well. Scenarios or use cases can be used to validate&#xD;
    the architectural choices made at several levels-from the business perspective down to the specific interactions that&#xD;
    occur.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/checklists/software_architecture_document_D261D8F3.html#Architectural%20Analysis%20Considerations&quot;&#xD;
     guid=&quot;7.634303669338443E-306&quot;>Checklist: Software Architecture Document - Architectural Analysis Considerations&lt;/a>&#xD;
    for more information on assessing the results of this task.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></sectionDescription>
  </sections>
  <purpose>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To define a candidate architecture for the system based on experience gained from similar systems or in similar&#xD;
        problem domains.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To define the architectural patterns, key mechanisms, and modeling conventions for the system.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
