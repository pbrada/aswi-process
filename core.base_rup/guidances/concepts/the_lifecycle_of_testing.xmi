<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_26oLANnmEdmO6L4XMImrsA" name="the_lifecycle_of_testing,3.372337174521937E-305" guid="_26oLANnmEdmO6L4XMImrsA" changeDate="2005-06-21T12:16:48.049-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_test_lifecycle__introduction_to&quot; name=&quot;XE_test_lifecycle__introduction_to&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_test__lifecycle_of&quot; name=&quot;XE_test__lifecycle_of&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Software is refined through iterations in the RUP software development lifecycle. The testing lifecycle benefits from&#xD;
    following an equivalent iterative approach in this process environment. In each iteration, the software development&#xD;
    team produces one or more builds, with each build being a potential candidate for testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The focus and objectives of the development team differ from iteration to iteration. Therefore, the test team members&#xD;
    must structure their test effort accordingly. We suggest that you keep the amount of upfront, detailed test planning&#xD;
    and design to a minimum and, where you need to do this, that you aim to produce this work as close as possible to the&#xD;
    time it will be used. We also recommend that you address upfront, detailed test development no earlier than one&#xD;
    iteration in advance.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additions, refinements, and deletions are made to the tests that are implemented and executed for each build. Some of&#xD;
    these test are retained and accumulate in a body of tests, which are used for regression testing subsequent builds used&#xD;
    in each future test cycle. This approach reworks and revises the tests throughout the process, just as the software&#xD;
    itself is revised. There is no frozen software specification and there are no frozen tests. The following figure&#xD;
    illustrates how tests evolve over time.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;215&quot; alt=&quot;Iteration and Test Components Diagram&quot; src=&quot;resources/lifec001.gif&quot; width=&quot;374&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This iterative approach-coupled with the use of component architectures-necessitates that you consider testing for&#xD;
    regressions in product quality in each subsequent build. Any of the tests developed in iteration X are potential&#xD;
    candidates for regression testing in iteration X+1, and in iteration X+2, and so on. When the same test is likely to be&#xD;
    repeated several times, it's worthwhile to consider automating the test. Test automation provides an approach to the&#xD;
    repeated testing of usage scenarios and that frees testing staff to explore testing in new functional areas.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Look at the lifecycle of testing without considering the rest of the project. The following figure shows the work&#xD;
    detail breakdown for the Test discipline in a given iteration.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;525&quot; alt=&quot;Iteration and Test Components Diagram&quot; src=&quot;resources/wf_tst.gif&quot; width=&quot;266&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This lifecycle aligns with the iteration cycle that the rest of the development team follows. The Iteration begins with&#xD;
    an investigation by the test team, who negotiates with the project manager and other stakeholders regarding the most&#xD;
    useful testing work to undertake in the forthcoming iteration. Most test team members play a part in this work effort.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usually each iteration contains at least one test cycle, as shown in the next figure. It's a fairly typical practice&#xD;
    for multiple builds to be produced for each Iteration and for a test cycle to be aligned with each build. However, in&#xD;
    some cases, specific builds are not tested.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    With the core test effort underway, a subset of the team members may be investigating new testing techniques. This&#xD;
    effort attempts to prove that the techniques work so the team can rely on them, especially in subsequent iterations.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;365&quot; alt=&quot;Iteration Over Time Diagram&quot; src=&quot;resources/lifec003.gif&quot; width=&quot;675&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The testing lifecycle is part of the software lifecycle; they should start in an equivalent timeframe. The design and&#xD;
    development process for tests can be as complex and arduous as the process to develop the software product itself. If&#xD;
    tests do not start in line with the first executable software releases, the test effort will delay the discovery of too&#xD;
    many problems until late in the development cycle. This often results in a long bug-fixing period being appended to the&#xD;
    end of the development schedule, which defeats the goals and eliminates the benefits of iterative development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Although test planning and defining tasks started early can expose important faults or flaws in the early specification&#xD;
    work, we recommend you carefully choose the testing work you do in advance. As well as the potential for rework already&#xD;
    mentioned, the test team needs to be careful to maintain their role as impartial quality advisors, and not derail the&#xD;
    early requirements and design tasks by acting as &quot;quality police&quot;. By their very nature, the project team's early&#xD;
    attempts to understand the problem and solution spaces will be flawed. Making unreasonable demands about the quality of&#xD;
    this early work risks alienating the test team from the rest of the development group.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Problems found during an iteration can be solved within the same iteration or postponed until the next-a decision that&#xD;
    ultimately rests with the Project Manager role. One of the major tasks for the test team and project managers is to&#xD;
    measure how complete the iteration is by verifying that the iteration objectives, as outlined in the Iteration Plan,&#xD;
    were met. There is ongoing &quot;requirements discovery&quot; from iteration to iteration. It's something you need to be aware of&#xD;
    and be prepared to manage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    How you will perform tests depends on several factors:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        your application domain&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        your budget&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        your company's policy&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        your risk tolerance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        your staff&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    How much you invest in testing depends on how you evaluate quality and tolerate risk in your particular environment.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
