<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_3l1rMNnmEdmO6L4XMImrsA" name="workspaces,3.4400958589714374E-305" guid="_3l1rMNnmEdmO6L4XMImrsA" changeDate="2005-06-24T10:56:46.686-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Definition&quot; name=&quot;Definition&quot;>Definition&lt;/a>&lt;a id=&quot;XE_workspaces__definition&quot;&#xD;
    name=&quot;XE_workspaces__definition&quot;>&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Workspaces refer to 'private' areas where developers can implement and test code in accordance with the project's&#xD;
    adopted standards in relative isolation from other developers. The Configuration Manager needs to create a workspace&#xD;
    environment for each developer on the project.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A workspace provides each developer with a consistent, flexible, inexpensive, and reproducible environment that selects&#xD;
    and presents the appropriate version of each file. The workspace needs to be able to provide fine-grained control over&#xD;
    both sharing and isolation. This is required because in most projects, developers need to stay isolated from changes&#xD;
    made by others; but at the same time, they must be able to unit-test their changes with changes made by certain other&#xD;
    developers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When performing maintenance on older releases, a developer needs to be able to see older versions, binaries, documents,&#xD;
    tests, tools, and other objects. In this case the workspace serves as a 'time machine', making everything in the&#xD;
    environment, not just the sources, appear as it did in the past.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each developer's workspace needs to be isolated, for purposes of editing, compiling, testing and debugging. However,&#xD;
    the isolation of the workspace should be relative and not absolute:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Others should be able to track a developer's work and selectively integrate it into their own.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Others should be able to shut out. Until a subsequent integration period, those changes that may prove&#xD;
        destabilizing to their own work.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A workspace can be completely private to an individual developer, or shared among a team of developers over a network.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition to providing access to source versions, a workspace needs to provide private (isolated) storage for files&#xD;
    generated during software development:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Working (checked-out) versions of source files,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Executables,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Other workspace private objects - source code, test subdirectories, and test data files.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A workspace's private storage would be typically located within a developer's home directory on a workstation. A&#xD;
    workspace shared by a group of developers might have its private storage area located on a central file server.&#xD;
    However, the actual location of the private storage is largely irrelevant. From the developer's point of view the&#xD;
    workspace's private storage should appear to be fully integrated.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img src=&quot;resources/co_wrksp.gif&quot; width=&quot;434&quot; height=&quot;311&quot;&#xD;
    alt=&quot;Diagram shows 2 integration workspaces and a private workspace superimposed on the CM Cube.&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The figure above illustrates the notion of private and integration workspaces in the overall context of the CM Cube.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;WorkingConfigurations&quot; name=&quot;WorkingConfigurations&quot;>Working Configurations&lt;/a>&lt;a id=&quot;XE_working_configurations&quot;&#xD;
    name=&quot;XE_working_configurations&quot;>&lt;/a>&lt;a id=&quot;XE_workspaces__working_configurations&quot;&#xD;
    name=&quot;XE_workspaces__working_configurations&quot;>&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Working configurations (workspace profiles) refer to particular subsystems that make up a &lt;b>working set&lt;/b> for the&#xD;
    project. A working set is a list of specific &lt;b>versions&lt;/b> of subsystems that must be referenced, or modified, to&#xD;
    implement a piece of work. This list may represent the entire system or a subset.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Views&quot; name=&quot;Views&quot;>Views&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A view provides access to a set of files in the project repository. Moreover, a view provides access to an appropriate&#xD;
    set of versions of those files:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A new development view may provide access to the most recent versions of the files.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Another new development view may provide access to the versions being used by a team working on a new user&#xD;
        interface for your product.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A maintenance view may provide access to the versions of the files that were used to build a given release of the&#xD;
        product.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A workspace, sometimes also called a view, allows developers to make and test changes in private before sharing the&#xD;
    modifications with the rest of the team. There are two types of views:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Snapshot Views&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dynamic Views&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A &lt;i>snapshot view&lt;/i> provides the developer with a stable, unchanging working environment. It is analogous to a&#xD;
    computer directory tree. A snapshot view is populated with copies of the appropriate versions of files from one or more&#xD;
    project repositories. Some people use the term &quot;sandbox&quot; for such a directory tree. When a developer wants to see&#xD;
    changes made by other team members, she updates her view. This style of working is characterized as a &lt;b>pull&lt;/b> model&#xD;
    as it relies on actively pulling in the relevant information, rather than it being immediately available through&#xD;
    automatic refresh mechanisms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &lt;i>dynamic view&lt;/i> is a virtual data structure as it appears to contain all the development data. Dynamic views do&#xD;
    not make local copies of files, but rely on over the network immediate updating. Dynamic views may be the best choice&#xD;
    in the following situations:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        There is limited client-side disk space&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to take advantage of derived object sharing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The development team must work with the latest versions of the code. This feature is particularly useful for&#xD;
        integration that requires the latest version of any given software.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
