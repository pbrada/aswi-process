<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2Qm9oNnmEdmO6L4XMImrsA" name="implementation_subsystem,9.455380296721554E-305" guid="_2Qm9oNnmEdmO6L4XMImrsA" changeDate="2005-09-26T10:13:21.178-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_implementation_subsystem__guidelines_for&quot;&#xD;
name=&quot;XE_implementation_subsystem__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>&lt;/a>Explanation&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A basic way of reducing complexity in an implementation model containing hundreds of elements, is to use implementation&#xD;
    subsystems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Subsystems typically take the form of directories, with additional structural or management information. For example, a&#xD;
    subsystem can be created as a directory or a folder in a file system, or a subsystem in Rational Apex for C++ or Ada,&#xD;
    or packages using Java. In Rational XDE developments, a Subsystem is a &quot;project&quot; as defined by the Integrated&#xD;
    Development Environment (IDE).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The implementation subsystem is the implementation analogue of &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/design_package_74F2CD5B.html&quot; guid=&quot;_yF4CmdnmEdmO6L4XMImrsA&quot;>design&#xD;
    package&lt;/a> &lt;i>(or large grained &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
    guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot;>Design Subsystem&lt;/a>).&lt;/i> The implementation model and the&#xD;
    implementation subsystems are the target of the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/implementation_view_CC9CEB3B.html&quot;&#xD;
    guid=&quot;_yKpN1tnmEdmO6L4XMImrsA&quot;>implementation view&lt;/a>, and so are of primary importance at development time.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_implementation_subsystem__exporting_elements&quot; name=&quot;XE_implementation_subsystem__exporting_elements&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_element__exporting_from_implementation_subsystems&quot;&#xD;
    name=&quot;XE_element__exporting_from_implementation_subsystems&quot;>&lt;/a>Exporting Elements&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An implementation subsystem controls the external visibility of its contents. An element can be referenced by elements&#xD;
    outside the subsystem, if it is made visible (&quot;exported&quot;) by its declaring subsystem.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    All elements (and contained subsystems) in a subsystem are typically visible outside a subsystem by default. This means&#xD;
    that any element outside this subsystem can reference all elements. For example, in C++ this means that elements&#xD;
    outside can #include all elements inside the subsystem.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Use&quot; name=&quot;Use&quot;>&lt;/a>Use&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The implementation model can be more or less close to the design model, depending on how you map the design packages to&#xD;
    implementation subsystems in the implementation model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is recommended to keep the mapping one to one, i.e. one design package should be mapped to one implementation&#xD;
    subsystem. The primary reason for that is to have a seamless traceability from design to code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are situations where you need the subsystems in implementation to differ from the packages and subsystems in&#xD;
    design. For more information, see the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/structure_implementation_model_E0E0DEF9.html&quot;&#xD;
    guid=&quot;{35272424-8A0A-4DDD-BA74-C91B80A8D046}&quot;>Task: Structure the Implementation Model&lt;/a>. If and how to represent&#xD;
    this mapping should be covered by the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Artifact: Project-Specific Guidelines&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can partition a system into subsystems for many reasons. The same criteria as in design apply in implementation.&#xD;
    For more information, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/design_package_8CF100B8.html&quot; guid=&quot;3.3691722315666536E-305&quot;>Guideline:&#xD;
    Design Package&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
