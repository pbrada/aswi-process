<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_3TglEtnmEdmO6L4XMImrsA" name="software_development_plan,1.6567134597638413E-305" guid="_3TglEtnmEdmO6L4XMImrsA" changeDate="2005-09-27T13:59:26.327-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_iteration__length_of_iterations__guidelines_for&quot;&#xD;
    name=&quot;XE_iteration__length_of_iterations__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;Length&quot; name=&quot;Length&quot;>Determining the Length of&#xD;
    each Iteration&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    We have defined an iteration as a rather complete mini-project, going through all major disciplines and resulting in&#xD;
    most cases in an executable, yet incomplete, system: a release. Although the cycle [edit, compile, test, debug] sounds&#xD;
    like an iteration, this is not what we mean here. The daily or weekly builds incrementally integrating and testing more&#xD;
    and more elements of the system may also seem to be an iteration, but that is only a portion of an iteration, as we use&#xD;
    the term here.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An iteration starts with planning and requirements, and ends with a release, internal or external.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    How quickly you can iterate depends mostly on the &lt;b>size&lt;/b> of the development organization.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Five people can do some planning on a Monday morning, have lunch together every day to monitor progress, reallocate&#xD;
        tasks, start doing a build on Thursday, and complete the iteration by Friday evening.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        But this will be very hard to achieve with 20 people. It will take more time to distribute the work, synchronize&#xD;
        between subgroups, integrate, and so on. An iteration may take rather three or four weeks.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        With 40 people, it already takes a week for the &quot;nervous influx to go from the brain to the extremities&quot;. You have&#xD;
        intermediate levels of management, the common understanding of the objective will require more formal&#xD;
        documentation, more ceremony. Three month is a more likely reasonable iteration length.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Other factors come into play: the degree of familiarity of the organization with the iterative approach, including&#xD;
    having a stable and mature organization, the level of automation the team is using to manage code (for example,&#xD;
    distributed CM), distribute information (for example, internal web), automate testing, and so on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Be aware also that there is some fixed overhead in an iteration, in planning, synchronizing, analyzing the results, and&#xD;
    so on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    So, on one hand, convinced by the tremendous benefits of the iterative approach, you might be tempted to iterate&#xD;
    furiously, the human limits of your organization are going to slow your fervor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some empirical data:&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th scope=&quot;col&quot; align=&quot;middle&quot; width=&quot;18%&quot;>&#xD;
                    &lt;b>SLOCs&lt;/b>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    &lt;b>Number of developers&lt;/b>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    &lt;b>Duration of an Iteration&lt;/b>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;18%&quot;>&#xD;
                    10,000&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    5&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    1 week&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;18%&quot;>&#xD;
                    50,000&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    15&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    1 month&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;18%&quot;>&#xD;
                    500,000&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    45&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    6 months&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;18%&quot;>&#xD;
                    1,000,000&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    100&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot; width=&quot;41%&quot;>&#xD;
                    1 year&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Iterations of more than 6 months&lt;/b> probably need to have intermediate milestones built in to keep the project&#xD;
        on track. Consider reducing the scope of the iteration to reduce its length and ensure a clear focus.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Iterations of more than 12 months&lt;/b> create their own risk, as the iteration spans the annual funding cycle. A&#xD;
        project which has not produced anything visible in the past 12 months is at risk of losing its funding.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Iterations of less than 1 month&lt;/b> need to be scoped carefully. Typically, short iterations are more suitable&#xD;
        for the Construction phase, where the degree of new functionality to be included and the degree of novelty are low.&#xD;
        Short iterations may do little or no formal analysis or design, and may simply be incrementally improving&#xD;
        well-understood functionality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Iterations need not all be the same length&lt;/b>: their length will vary according to their objectives. Typically,&#xD;
        elaboration iterations will be longer than construction iterations. Within a phase, iterations are generally the&#xD;
        same length (it makes planning easier).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Once you have an idea of the number of iterations in your coarse-grained plan, you need to define the contents of each&#xD;
    iteration. It is even a good idea to find a name or title to qualify the product you have at the end of each iteration,&#xD;
    to help people get a better focus.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p class=&quot;exampleheading&quot;>&#xD;
        &lt;a id=&quot;Example&quot; name=&quot;Example&quot;>Example&lt;/a> Iterations for a Private Telephone Switch&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Iteration 1: local call.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Iteration 2: add external calls and subscriber management.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Iteration 3: add voice mail and conference calls.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_iteration__number_of_iterations_guidelines_for&quot;&#xD;
    name=&quot;XE_iteration__number_of_iterations_guidelines_for&quot;>&lt;/a>&lt;a id=&quot;Number&quot; name=&quot;Number&quot;>Determining the Number of&#xD;
    Iterations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A very simple project may have only one iteration per phase:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        One iteration in the inception phase, producing perhaps a proof-of-concept prototype, or user-interface mock-up, or&#xD;
        no iteration at all, in the case for example of an evolution cycle.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        One iteration in the elaboration phase to produce an architectural prototype.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        One iteration in the construction phase to build the product (up to a &quot;beta&quot; release).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        One iteration in transition to finish the product (full product release).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For a more substantial project, in its initial development cycle the norm would be:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        One iteration in the inception phase (possibly producing a prototype).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Two iterations in the elaboration phase; one for an architectural prototype, and one for the architectural&#xD;
        baseline.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Two iterations in the construction phase to expose a partial system, and mature it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        One iteration in the transition phase to go from initial operational capability to full product release.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For a large project, with lots of unknowns, new technologies, and the like, there may be a case for:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        an additional iteration in the inception phase, to allow for more prototyping.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        an additional iteration in the elaboration phase, to allow different technologies to be explored.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        an additional iteration in the construction phase because of the sheer size of the product.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        an additional iteration in the transition phase to allow for operational feedback.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    So over a development cycle, we have:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;blockquote>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Low: 3 iterations [0,1,1,1]&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Typical: 6 [1, 2, 2, 1]&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                High: 9 [1, 3, 3, 2]&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Very High: 10 [2, 3, 3, 2]&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    So, in general, plan to have &lt;b>three to ten&lt;/b> iterations. Observe though that the upper and lower bounds connote&#xD;
    unusual circumstances, so most developments will use &lt;b>six to eight&lt;/b> iterations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Many variations are possible depending on risks, size, complexity:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>If the product is intended for some totally new domain&lt;/b>, you may need to add some iterations in the inception&#xD;
        phase to consolidate the concepts, show various mock-ups to a cross-section of customers or users, or build a solid&#xD;
        response to a request for proposal.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>If a new architecture must be developed&lt;/b>, or there is a large amount of use-case modeling, or there are very&#xD;
        challenging risks, you should plan to have two or three iterations in the elaboration phase.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>If the product is large and complex&lt;/b>, and developed over a long period, you should plan to have three or more&#xD;
        iterations in the construction phase.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You should plan to have several iterations in the transition phase if, because you must minimize the time to&#xD;
        market, you must deliver the product with a reduced set of functionality, or if you feel you may need a lot of&#xD;
        small adaptations to the end-user base after a period of use.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_software_development_plan__traditional_reviews__guidelines_for_mapping&quot;&#xD;
    name=&quot;XE_software_development_plan__traditional_reviews__guidelines_for_mapping&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;TraditionalReviewsAndTheIterativeApproach&quot; name=&quot;TraditionalReviewsAndTheIterativeApproach&quot;>Aligning the&#xD;
    Traditional Waterfall Review Sequence with the Iterative Approach&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The default review sequence for a waterfall life-cycle project has a single major review at the completion of the&#xD;
    important work products, for example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>System Requirements Review (SRR)&lt;/b>, at the completion of the system specification;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Software Specification Review (SSR)&lt;/b>, at the completion of the software requirements specification;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Preliminary Design Review (PDR)&lt;/b>, at the completion of the architectural design sections of the software&#xD;
        design description;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Critical Design Review (CDR)&lt;/b>, at the completion of the detailed design sections of the software design&#xD;
        description.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In the Rational Unified Process (RUP), parts of the equivalent work products are reviewed as they are completed in each&#xD;
    iteration, but the major milestones (and therefore reviews) are aligned with the completion of the phases, inception,&#xD;
    elaboration, construction and transition. A Project Manager wanting to adopt the RUP may have to find a way to&#xD;
    reconcile this apparent conflict, because of contractual obligations. Ideally, the Project Manager should convince the&#xD;
    customer that the phase and iteration based approach in fact gives greater true visibility into project progress, and&#xD;
    reduces risk, so that there is no need for an SRR, an SSR, and so forth. However, this is not always possible, and the&#xD;
    Project Manager has to schedule these reviews at appropriate points. It is possible, in the RUP, to locate the points&#xD;
    at which these important work products (actually, their equivalents in the RUP) are essentially complete, although this&#xD;
    does not always neatly align with phases or iterations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This is done here by assuming that the relative effort that will be spent on requirements, design, and the like will be&#xD;
    approximately the same in the RUP as in the (ideal) waterfall life cycle - but that the effort will be distributed&#xD;
    differently. The result is the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the SRR (concerned mainly with the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_vision_2D6D6F1.html&quot;&#xD;
        guid=&quot;{417F089F-6636-451A-A8AB-AB4EAC7AC4F1}&quot;>Vision&lt;/a>) can be scheduled at the end of the inception phase;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the SSR (concerned mainly with the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_software_requirements_specification_934E66F.html&quot;&#xD;
        guid=&quot;{BE8165DC-BAF2-4237-B27D-F2A037023364}&quot;>Software Requirements Specification&lt;/a>) at about 1/3 of the way&#xD;
        through the elaboration phase;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the PDR (concerned mainly with the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
        guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Software Architecture Document&lt;/a>) at the end of the elaboration&#xD;
        phase;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the CDR (concerned mainly with the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
        guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a>) at about 1/3 of the way through the construction&#xD;
        phase.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For efficiency, the Project Manager, in consultation with the customer, should attempt to combine these reviews with&#xD;
    the prescribed RUP reviews. This is clearly possible for the SRR and the PDR, they can be combined with &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/lifecycle_objectives_9E53DCF8.html&quot;&#xD;
    guid=&quot;_piIfsCVwEdqSZ9OimJ-AzA&quot;>Lifecycle Objectives Milestone&lt;/a>&amp;nbsp;Review and the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/lifecycle_architecture_34313398.html&quot; guid=&quot;_7z-fYCVwEdqSZ9OimJ-AzA&quot;>Lifecycle&#xD;
    Architecture Milestone&lt;/a>&amp;nbsp;Review, respectively. &#xD;
    &lt;!--!RPQ COMMAND! name=&quot;VariantContent&quot; tag=&quot;rup_project_control&quot;    class=&quot;process_component&quot; !RPQ COMMAND! It is not so obvious for the SSR and CDR. However, observing    that almost all projects will have at least two iterations in elaboration and    at least two in construction, it is recommended that SSR be combined with the    &lt;a href=&quot;./../../../core.base_rup/tasks/iteration_acceptance_review_2F196C3B.html&quot; class=&quot;elementLink&quot; guid=&quot;{D3706FBF-E3EA-42E7-8D2E-7C9112506703}&quot;>Iteration Acceptance Review&lt;/a>        for the first iteration in the elaboration phase, and CDR be combined with the        Iteration Acceptance Review for the first iteration in construction. In both        cases, there is then good visibility of mature work products, with enough time        remaining for correction - although the iterative approach should cope with        this as a matter of course. !RPQ COMMAND! &lt;/p> -->&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;ProjectOrganization&quot; name=&quot;ProjectOrganization&quot;>Project Organization&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Just as the software process is influenced by the project's characteristics, so is the project organization. The&#xD;
    default structure presented here (see the figure below), has to be adapted to reflect the effects of factors such as&#xD;
    the ones listed:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Business Context&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Size of the Software Development Effort&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Degree of Novelty&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Type of Application&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Current Development Process&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Organizational Factors&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Technical and Managerial Complexity&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These are key distinguishing factors when analyzing how the organization as a whole should adopt a new development&#xD;
    process, here we will examine their effect on the choice of project structure. The figure below presents a default&#xD;
    project organization, showing how responsibilities are assigned to the team structure.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;500&quot; alt=&quot;Context-sensitive diagram showing how responsibilities are assigned to team members.&quot;&#xD;
    hspace=&quot;30&quot; src=&quot;resources/md_prp1.gif&quot; width=&quot;515&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Figure showing Default Project Organization. Note that there is no significance in terms of seniority or authority in&#xD;
    the ordering of the roles.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This figure is a starting point for considering how project-level roles and responsibilities should be mapped to a&#xD;
    structure of teams. The figure also serves to emphasize that roles (shown in the yellow boxes) are not individuals, but&#xD;
    &quot;hats&quot; an individual (or a team) can wear in the project. It is for this reason that some roles (the Project Manager,&#xD;
    for example) appear more than once. This indicates that, at some time, the behavior of the Project Manager, as defined&#xD;
    in the RUP, may appear in more than one team. For example, in a large project, the task of preparing a status report&#xD;
    based on a Work Breakdown Structure may be delegated to an &lt;b>individual&lt;/b> in the Administration Team. However, this&#xD;
    is a responsibility that the RUP assigns to the &lt;b>role&lt;/b> called Project Manager.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a small project, it is likely that an &lt;b>individual&lt;/b> nominated as Project Manager will perform all the tasks of&#xD;
    the &lt;i>role&lt;/i> called Project Manager, in which case the Administration Team coalesces with the Software Management&#xD;
    Team. The selection of team structure will be influenced by the nature and size of the project but should be tempered&#xD;
    by some, largely common-sense, rules:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        small teams are usually more productive; however, in a large project this has to be balanced against the amount of&#xD;
        cross-team interaction&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        deep hierarchies are to be avoided&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the span of control of any manager or team lead should be limited to seven plus or minus two&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the software development &lt;b>&lt;a id=&quot;team structure&quot; name=&quot;team structure&quot;>team structure&lt;/a>&lt;/b> should be driven by&#xD;
        the software architecture; a good architecture, with high cohesion and low coupling between subsystems, will allow&#xD;
        teams to work more effectively in parallel&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        testing, other than unit test, should ideally be performed by a team separate from the development team. Note,&#xD;
        however, that this may not make economic sense in a very small project&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the structure must allow all teams and individuals to be given clearly defined authorities and responsibilities.&#xD;
        This is particularly important if the hierarchy exceeds three levels. The managers and team leads in the middle of&#xD;
        such structures need to understand what is required of them in balancing technical and managerial tasks.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the structure must support the capabilities, experience and motivations of the staff: for example, if a single team&#xD;
        is supposed to perform analysis, design and implementation, without any intermediate hand-off, it will need all the&#xD;
        necessary competencies. Skilled analysts are not necessarily good implementers;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        team structures should not be rigid: individuals will migrate between teams over the project's lifetime, and the&#xD;
        responsibilities of teams will change as the emphasis of the project shifts from phase to phase.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The rationale for the default organization is discussed at length in [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html&quot; guid=&quot;7.755968586980351E-308&quot;>ROY98&lt;/a>]. In&#xD;
    particular, the assignment of responsibilities for deployment to the software assessment team recognizes that, of all&#xD;
    the teams in a development project, the software assessment team has greatest exposure to the software as the user will&#xD;
    see it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    During the life of a project, the organization will evolve to support the work breakdown structure captured in the&#xD;
    project plan. This is shown in the figure below, which is taken from [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html&quot; guid=&quot;7.755968586980351E-308&quot;>ROY98&lt;/a>].&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;405&quot; alt=&quot;Diagram showing team evolution over the life-cycle of the project.&quot; hspace=&quot;50&quot;&#xD;
    src=&quot;resources/md_prp2.gif&quot; width=&quot;478&quot; vspace=&quot;10&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This evolution emphasizes a different set of tasks in each phase:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the Inception team: an organization focused on planning, with enough support from the other teams to ensure that&#xD;
        the plans represent a consensus of all perspectives;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Elaboration team: an architecture-focused organization in which the driving forces of the project reside in the&#xD;
        software architecture team and are supported by the software development and software assessment teams as necessary&#xD;
        to achieve a stable architecture baseline;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Construction team: a balanced organization in which most of the task resides in the software development and&#xD;
        software assessment teams;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Transition team: a customer-focused organization in which usage feedback drives the deployment tasks.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Migration between teams during this evolution will ensure that knowledge and capability is retained in the project. For&#xD;
    example, when elaboration is complete, some architecture team members could be dispersed into the development teams,&#xD;
    perhaps to act as team leads, or carry the architectural 'vision' into development. Later still, towards the end of the&#xD;
    construction phase, the focus shifts to the assessment team, and there is a movement of staff from the development team&#xD;
    into the assessment team. It is also important at that stage, to avoid the loss of architectural integrity in the heat&#xD;
    of construction, that the influence of the architecture team is not allowed to wane as the 'center of gravity' of the&#xD;
    project moves. Moving some architecture team members to the assessment team is one way to do this.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
