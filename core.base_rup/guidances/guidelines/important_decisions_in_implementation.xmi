<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_z9iHwNnmEdmO6L4XMImrsA" name="important_decisions_in_implementation,1.0139590031965295E-304" guid="_z9iHwNnmEdmO6L4XMImrsA" changeDate="2005-11-03T10:00:18.653-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Decide How to Use Artifacts&quot; name=&quot;Decide How to Use Artifacts&quot;>Decide How to Use Work Products&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Make a decision about what work products are to be&amp;nbsp;used and how they are to be used.&amp;nbsp; In addition to&#xD;
    identifying what work products are to be used, it is also important to also tailor each work product to be used to fit&#xD;
    the needs of the project.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The table below specifies which Implementation work products are recommended and which are considered optional (i.e.,&#xD;
    may only be used&amp;nbsp;in certain cases). For additional tailoring considerations, see the tailoring section of the work&#xD;
    product description page.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;20%&quot;>&#xD;
                    Work Product&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;40%&quot;>&#xD;
                    &lt;b>Purpose&lt;/b>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;40%&quot;>&#xD;
                    &lt;p>&#xD;
                        &lt;b>Tailoring (Optional, Recommended)&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;20%&quot;>&#xD;
                    &lt;p>&#xD;
                        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
                        guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Implementation Model&lt;/a>&#xD;
                    &lt;/p>&#xD;
                    &lt;blockquote>&#xD;
                        &lt;p>&#xD;
                            (&lt;a class=&quot;elementLink&quot;&#xD;
                            href=&quot;./../../../core.base_rup/workproducts/rup_implementation_subsystem_118747E9.html&quot;&#xD;
                            guid=&quot;{0F629848-C19E-49AB-A6C1-C8D6A094898A}&quot;>Implementation Subsystem&lt;/a>, &lt;a&#xD;
                            class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_implementation_element_49BB163E.html&quot;&#xD;
                            guid=&quot;{E1E0DDA3-914F-4CC1-9D0A-ED4B8E8BBA89}&quot;>Implementation Element&lt;/a>)&#xD;
                        &lt;/p>&#xD;
                    &lt;/blockquote>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p>&#xD;
                        The implementation model is source code, executable programs, and all other work products needed to&#xD;
                        build and manage the system in the run-time environment.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        An implementation is composed of implementation elements, which include code (source, binaries and&#xD;
                        executable programs), and files containing information (for example, a startup file or a ReadMe&#xD;
                        file).&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        An implementation subsystem is a collection of implementation elements and other implementation&#xD;
                        subsystems, and is used to structure the implementation model by dividing it into smaller parts.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p>&#xD;
                        All software projects have an implementation model with implemention elements including as a&#xD;
                        minimum some source code and executable programs.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        Some projects will also include subsystems, libraries, and visual models.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        Subsystems are useful when there are a large number of implementation elements to be organized.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;20%&quot;>&#xD;
                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_integration_build_plan_31CE4B79.html&quot;&#xD;
                    guid=&quot;{FA56B557-857D-4122-8E60-7A4A84418EB1}&quot;>Integration Build Plan&lt;/a>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    Defines the order in which components should be implemented, which builds to create when integrating&#xD;
                    the system, and how they are to be assessed.&lt;br />&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p>&#xD;
                        Optional.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        Recommended if you need to plan the integration. Omit it only when the integration is trivial.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&lt;br />&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Decide Unit Test Coverage&quot; name=&quot;Decide Unit Test Coverage&quot;>Decide Unit Test Coverage&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Decide the extent to which unit testing will be performed and the level of code coverage, which has a&amp;nbsp; scale that&#xD;
    goes from informal to 100% code coverage. This scale is described in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_test_plan_53712941.html&quot; guid=&quot;{B95CA9FA-A00E-4C6C-AA16-133297812CC0}&quot;>Test&#xD;
    Plan&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The level of unit test coverage is often driven by the needs of the integration and system testers, to whom the code&#xD;
    was handed over. The system testers are dependent on the quality of the code for their work. If the code has too many&#xD;
    defects, the integration and system testers will send the code back to the implementers too often. This is a sign of a&#xD;
    poor development process and the solution may be to require the implementers to do more thorough unit testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Of course, you cannot expect the unit-tested code to be completely free of defects. You do, however, need to find a&#xD;
    &quot;healthy&quot; balance between unit testing and quality.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The level of unit test coverage can also differ between different phases. Even a safety-critical project that requires&#xD;
    100% code coverage during construction and transition does not usually require that during elaboration because many&#xD;
    classes are only partially implemented at that stage.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Decide How to Review Code&quot; name=&quot;Decide How to Review Code&quot;>Decide How to Review Code&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Decide to what extent the code should be reviewed.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The advantages of code reviews are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        To enforce and encourage a common coding style on the project. Code reviewing is an efficient way to make the&#xD;
        members of the project follow the Programming Guidelines. To ensure this, it's more important to review results&#xD;
        from all authors and Implementers than to review all source code files.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To find errors that automated tests do not find. Code reviews catch errors not encountered in testing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To share knowledge between individuals and to transfer knowledge from the more experienced individuals to the less&#xD;
        experienced individuals.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The disadvantages of code reviews are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It takes time and resources.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If not done properly, it may be inefficient. There is a danger that code reviewing is done &quot;just because we have&#xD;
        to&quot; and is not done as an efficient complement to automated testing.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information about code reviewing, also see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/review_code_27AD7580.html&quot; guid=&quot;{9EC0DF69-EEE1-4B41-8F48-9FB6B0DB7F72}&quot;>Task: Review&#xD;
    Code&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Code reviewing adds significant value to the project. All projects that start to measure the levels of bugs and&#xD;
    maintenance problems related to code reviews claim they gain performance from the reviews. However, in many&#xD;
    organizations it's difficult to make them &quot;take off&quot; for several reasons:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Not enough data is collected to verify if code reviewing actually works.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Too much data is collected.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Implementers are very protective about their code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The reviews get bogged down in formalities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Administrating reviews takes too much effort.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Keep the following in mind to make the best possible use of code reviews:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Collect only adequate data.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Measure the performance of the reviews and display the result.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use reviews in a &quot;lean&quot; way.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information on review levels, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/review_levels_72ACB304.html&quot; guid=&quot;8.546224914239529E-306&quot;>Guideline: Review&#xD;
    Levels&lt;/a>.&amp;nbsp;&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
