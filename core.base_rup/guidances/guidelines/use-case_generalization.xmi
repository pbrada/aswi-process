<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1EKYo9nmEdmO6L4XMImrsA" name="use-case_generalization,3.7061366529594173E-305" guid="_1EKYo9nmEdmO6L4XMImrsA" changeDate="2005-11-15T20:03:15.162-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A parent use case may be specialized into one or more child use cases that represent more specific forms of the parent.&#xD;
    Neither parent nor child is necessarily abstract, although the parent in most cases is abstract. A child inherits all&#xD;
    structure, behavior, and relationships of the parent. Children of the same parent are all specializations of the&#xD;
    parent. This is generalization as applicable to use cases (for more information on the concept of generalization as&#xD;
    applied to classes, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/generalization_94751549.html&quot; guid=&quot;1.839540980397304E-305&quot;>Guideline:&#xD;
    Generalization&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Generalization is used when you find two or more use cases that have commonalities in behavior, structure, and purpose.&#xD;
    When this happens, you can describe the shared parts in a new, often abstract, use case, that is then specialized by&#xD;
    child use cases.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;301&quot; alt=&quot;Diagram described in caption.&quot; src=&quot;resources/ucgen1.gif&quot; width=&quot;259&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The use cases Telephone Order and Internet Order are specializations of the abstract use case Place Order.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In an Order Management system, the use cases Telephone Order and Internet Order share a lot in structure and behavior.&#xD;
    A general use case Place Order is defined where that structure and common behavior is defined. The abstract use case&#xD;
    Place Order need not be complete in itself, but it provides a general behavioral framework that the child use cases can&#xD;
    then make complete.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The parent use case is not always abstract.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the Order Management system in the previous example. Say that we want to add an Order Registry Clerk actor,&#xD;
    who can enter orders into the system on behalf of a customer. This actor would initiate the general Place Order use&#xD;
    case, which now must have a complete flow of events described for it. The child use cases can add behavior to the&#xD;
    structure that the parent use case provides, and also modify behavior in the parent.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;306&quot; alt=&quot;Diagram described in caption.&quot; src=&quot;resources/ucgen2.gif&quot; width=&quot;325&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The actor Order Registry Clerk can instantiate the general use case Place Order. Place Order can also be specialized by&#xD;
    the use cases Telephone Order or Internet Order.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The child use case is dependent on the structure (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/use_case_CC89870D.html&quot; guid=&quot;4.1983217662266927E-305&quot;>Guideline: Use&#xD;
    Case&lt;/a>, the discussion on structure of flow of events) of the parent use case. The child use case may add additional&#xD;
    behavior to the parent by inserting segments of behavior into the inherited behavior, or by declaring include- and&#xD;
    extend-relationships to the child use case. The child may modify behavior segments inherited from the parent, although&#xD;
    it must be done with care so that the intent of the parent is preserved. The structure of the parent use case is&#xD;
    preserved by the child. This means that all behavior segments, described as steps or subflows of the parent's flow of&#xD;
    events, must still exist, but the contents of these behavior segments may be modified by the child.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the parent is an abstract use case, it may have behavior segments that are incomplete. The child must then complete&#xD;
    those behavior segments and make them meaningful to the actor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A parent use case need not have a relationship to an actor if it is an abstract use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If two child use cases are specializing the same parent (or base), the specializations are independent of one another,&#xD;
    meaning they are executed in separate use-case instances. This is unlike the extend- or include-relationships, where&#xD;
    several additions implicitly or explicitly modify one use-case instance executing the same base use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Both use-case-generalization and include can be used to reuse behavior among use cases in the model. The difference is&#xD;
    that with use-case-generalization, the execution of the children is dependent on the structure and behavior of the&#xD;
    parent (the reused part), while in an include-relationship the execution of the base use case depends only on the&#xD;
    result of the function that the inclusion use case (the reused part) performs. Another difference is that in a&#xD;
    generalization the children share similarities in purpose and structure, while in the include-relationship the base use&#xD;
    cases that are reusing the same inclusion can have completely different purposes, but they need the same function to be&#xD;
    performed.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Executing the Use-Case-Generalization&quot; name=&quot;Executing the Use-Case-Generalization&quot;>Executing the Use-Case&#xD;
    Generalization&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A use-case instance executing a child use case will follow the flow of events described for the parent use case,&#xD;
    inserting additional behavior and modifying behavior as defined in the flow of events of the child use case.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;240&quot; alt=&quot;Diagram described in caption.&quot; src=&quot;resources/ucgen3.gif&quot; width=&quot;273&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The use-case instance follows the parent use case, with behavior inserted or modified as described in the child use&#xD;
    case.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Describing the Use-Case Generalization&quot; name=&quot;Describing the Use-Case Generalization&quot;>Describing the Use-Case&#xD;
    Generalization&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In general, you do not describe the generalization-relationship itself. Instead, in the flow of events of the child use&#xD;
    case you will specify how new steps are inserted into the inherited behavior, and how inherited behavior is modified.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the child is specializing more than one parent (multiple inheritance), you must in the specification of the child&#xD;
    explicitly state how the behavior sequences from the parents are interleaved in the child.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Example of Use&quot; name=&quot;Example of Use&quot;>Example of Use&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Consider the following step-by-step outlines to use cases for a simple phone system:&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Place Local Call&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller lifts receiver.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System presents dial-tone.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller dials a digit.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System turns off dial-tone.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller enters remainder of number.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System analyzes the number.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System finds corresponding party.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System connects the parties.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Parties disconnect.&lt;/font>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    &lt;b>Place Long-Distance Call&lt;/b>&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller lifts receiver.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System presents dial-tone.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller dials a digit.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System turns off dial-tone.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Caller enters remainder of number.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>System analyzes the number.&lt;/font>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System sends number to other system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System connect the lines.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;font color=&quot;#008080&quot;>Parties disconnect.&lt;/font>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The text in &lt;font color=&quot;#008080&quot;>blue&lt;/font> is very similar in the two use cases. If the two use cases are so&#xD;
    similar, we should consider merging them into one, where alternative subflows show the difference between local calls&#xD;
    and long-distance calls.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If, however, the difference between them is of some significance, and there is a value in clearly showing in the&#xD;
    use-case model the relationship between local call and long-distance call, we can extract common behavior into a new,&#xD;
    more general use case, called Place Call.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a use-case diagram, the generalization-relationship created will be illustrated as follows:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;155&quot; alt=&quot;Diagram described in caption.&quot; src=&quot;resources/ucgen4.gif&quot; width=&quot;260&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The use cases Place Local Call and Place Long-Distance Call are inheriting from the abstract use case Place Call.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
