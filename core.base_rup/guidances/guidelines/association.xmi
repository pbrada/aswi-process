<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_12E9wtnmEdmO6L4XMImrsA" name="association,5.540135518285335E-305" guid="_12E9wtnmEdmO6L4XMImrsA" changeDate="2005-06-16T20:24:45.825-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_association_classes__guidelines_for&quot;&#xD;
name=&quot;XE_association_classes__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;XE_association__guidelines_for&quot;&#xD;
name=&quot;XE_association__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_class__associations _recommendations_for_use_of&quot;&#xD;
    name=&quot;XE_class__associations _recommendations_for_use_of&quot;>&lt;/a>&lt;a id=&quot;Associations&quot; name=&quot;Associations&quot;>Associations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;XE_boundary_class__associations,_general_guidelines&quot;&#xD;
    name=&quot;XE_boundary_class__associations,_general_guidelines&quot;>&lt;/a>Associations represent structural relationships between&#xD;
    objects of different classes; they represent connections between instances of two or more classes that exist for some&#xD;
    duration. Contrast this with transient links that, for example, exist only for the duration of an operation. These&#xD;
    latter situations can instead be modeled using collaborations, in which the links exist only in particular limited&#xD;
    contexts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;XE_association__recommendations_for_using&quot; name=&quot;XE_association__recommendations_for_using&quot;>&lt;/a>You can use&#xD;
    associations to show that objects know about another objects. Sometimes, objects must hold references to each other to&#xD;
    be able to interact, for example send messages to each other; thus, in some cases associations may follow from&#xD;
    interaction patterns in sequence diagrams or communication diagrams.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_association__naming&quot; name=&quot;XE_association__naming&quot;>&lt;/a>&lt;a id=&quot;Names&quot; name=&quot;Names&quot;>Association Names&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Most associations are binary (exist between exactly two classes), and are drawn as solid paths connecting pairs of&#xD;
    class symbols. An association may have either a name or the association &lt;a href=&quot;#Roles&quot;>roles&lt;/a> may have names. Role&#xD;
    names are preferable, as they convey more information. In cases where only one of the roles can be named, roles are&#xD;
    still preferable to association names so long as the association is expected to be uni-directional, starting from the&#xD;
    object to which the role name is associated.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Associations are most often named during analysis, before sufficient information exists to properly name the roles.&#xD;
    Where used, association names should reflect the purpose of the relationship and be a verb phrase. The name of the&#xD;
    association is placed on, or adjacent to the association path.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In an ATM, the &lt;b>Cash Drawer&lt;/b> provides the money that the &lt;b>Cash Dispenser&lt;/b> dispenses. In order for the &lt;b>Cash&#xD;
    Dispenser&lt;/b> to be able to dispense funds, it must keep a reference to the &lt;b>Cash Drawer&lt;/b> object; similarly, if&#xD;
    the &lt;b>Cash Drawer&lt;/b> runs out of funds, the &lt;b>Cash Dispenser&lt;/b> object must be notified, so the &lt;b>Cash Drawer&lt;/b>&#xD;
    must keep a reference to the &lt;b>Cash Dispenser.&lt;/b> An association models this reference.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;93&quot; alt=&quot;an example association name&quot; src=&quot;resources/assoc0.gif&quot; width=&quot;415&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    An association between the &lt;b>Cash Dispenser&lt;/b> and the &lt;b>Cash Drawer&lt;/b>, named &lt;b>supplies Value&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Association names, if poorly chosen, can be confusing and misleading. The following example illustrates good and bad&#xD;
    naming. In the first diagram, association names are used, and while they are syntactically correct (using verb&#xD;
    phrases), they do not convey much information about the relationship. In the second diagram, role names are used, and&#xD;
    these convey much more about the nature of the participation in the association.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;471&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_asso3.gif&quot; width=&quot;401&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Examples of good and bad usage of association and role names&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_roles_on_associations__guidelines_for&quot; name=&quot;XE_roles_on_associations__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;Roles&quot;&#xD;
    name=&quot;Roles&quot;>Roles&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Each end of an association is a &lt;b>role&lt;/b> specifying the face that a class plays in the association&lt;b>.&lt;/b> Each role&#xD;
    must have a name, and the role names opposite a class must be unique. The role name should be a noun indicating the&#xD;
    associated object's role in relation to the associating object. A suitable role name for a &lt;b>Teacher&lt;/b> in an&#xD;
    association with a &lt;b>Course Section&lt;/b> would, for instance, be &lt;b>lecturer&lt;/b>; avoid names like &quot;&lt;b>has&lt;/b>&quot; and&#xD;
    &quot;&lt;b>contains&lt;/b>&quot;, as they add no information about what the relationships are between the classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that the use of association names and role names is mutually exclusive: one would not use both an association name&#xD;
    &lt;b>and&lt;/b> a role name. Role names are preferable to association names except in cases where insufficient information&#xD;
    exists to name the role appropriately (as is often the case in analysis; in design role names should always be used).&#xD;
    Lack of a good role name suggests an incomplete or ill-formed model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The role name is placed next to the end of the association line.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the relationships between classes in an order entry system. A Customer can have two different kinds of&#xD;
    Addresses: an address to which bills are sent, and a number of addresses to which orders may be sent. As a result, we&#xD;
    have &lt;b>two&lt;/b> associations between Customer and Address, as shown below. The associations are labeled with the&#xD;
    &lt;b>role&lt;/b> the associated address plays for the Customer.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;342&quot; alt=&quot;examples of associations&quot; src=&quot;resources/assoc1.gif&quot; width=&quot;349&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Associations between &lt;b>Customer&lt;/b>, &lt;b>Address&lt;/b>, and &lt;b>Order,&lt;/b> showing both role names and multiplicities&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_multiplicity_for_associations__guidelines_for&quot; name=&quot;XE_multiplicity_for_associations__guidelines_for&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_association__multiplicity&quot; name=&quot;XE_association__multiplicity&quot;>&lt;/a>&lt;a id=&quot;Multiplicity&quot;&#xD;
    name=&quot;Multiplicity&quot;>Multiplicity&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For each role you can specify the &lt;b>multiplicity&lt;/b> of its class, how many objects of the class can be associated&#xD;
    with one object of the other class. Multiplicity is indicated by a text expression on the role. The expression is a&#xD;
    comma-separated list of integer ranges. A range is indicated by an integer (the lower value), two dots, and an integer&#xD;
    (the upper value); a single integer is a valid range, and the symbol '*' indicates &quot;many&quot;, that is, an unlimited number&#xD;
    of objects. The symbol '*' by itself is equivalent to '0..*', that is, any number including none; this is the default&#xD;
    value. An optional scalar role has the multiplicity 0..1.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the previous example, multiplicities were shown for the associations between Order and Customer, and between&#xD;
    Customer and Address. Interpreting the diagram, it says that an Order must have an associated Customer (the&#xD;
    multiplicity is 1..1 at the Customer end), but a Customer may not have any Orders (the multiplicity is 0..* at the&#xD;
    Order end). Furthermore, a Customer has one billing address, but has one or more shipping address. To reduce notational&#xD;
    clutter, if multiplicities are omitted, they may be assumed to be 1..1.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_roles_on_associations__navigability_property&quot; name=&quot;XE_roles_on_associations__navigability_property&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_navigability_on_associations__guidelines_for&quot; name=&quot;XE_navigability_on_associations__guidelines_for&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_association__navigability&quot; name=&quot;XE_association__navigability&quot;>&lt;/a>&lt;a id=&quot;Navigability&quot;&#xD;
    name=&quot;Navigability&quot;>Navigability&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The &lt;b>navigability&lt;/b> property on a role indicates that it is possible to navigate from a associating class to the&#xD;
    target class using the association. This may be implemented in a number of ways: by direct object references, by&#xD;
    associative arrays, hash-tables, or any other implementation technique that allows one object to reference another.&#xD;
    Navigability is indicated by an open arrow, which is placed on the target end of the association line next to the&#xD;
    target class (the one being navigated to). The default value of the navigability property is &lt;b>true&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the order entry example, the association between the &lt;b>Order&lt;/b> and the &lt;b>Customer&lt;/b> is navigable in&#xD;
    &lt;b>both&lt;/b> directions: an &lt;b>Order&lt;/b> must know which &lt;b>Customer&lt;/b> placed the &lt;b>Order&lt;/b>, and the&#xD;
    &lt;b>Customer&lt;/b> must know which &lt;b>Orders&lt;/b> it has placed. When no arrowheads are shown, the association is assumed&#xD;
    to be navigable in both directions.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the case of the associations between &lt;b>Customer&lt;/b> and &lt;b>Address,&lt;/b> the &lt;b>Customer&lt;/b> must know its&#xD;
    &lt;b>Addresses&lt;/b>, but the &lt;b>Addresses&lt;/b> have no knowledge of which &lt;b>Customers&lt;/b> (or other classes, since many&#xD;
    things have addresses) are associated with the address. As a result, the navigability property of the &lt;b>Customer&lt;/b>&#xD;
    end of the association is turned off, resulting in the following diagram:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;298&quot; alt=&quot;examples of navigability on associations&quot; src=&quot;resources/assoc2.gif&quot; width=&quot;337&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Updated Order Entry System classes, showing navigability of associations.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_association__self-associations&quot; name=&quot;XE_association__self-associations&quot;>&lt;/a>&lt;a id=&quot;Self-Associations&quot;&#xD;
    name=&quot;Self-Associations&quot;>Self-Associations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Sometimes, a class has an association to itself. This does not necessarily mean that an instance of that class has an&#xD;
    association to itself; more often, it means that one instance if the class has associations to other instances of the&#xD;
    same class. In the case of self-associations, role names are essential to distinguish the purpose for the association.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the following self-association involving the class &lt;b>Employee&lt;/b>:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;123&quot; alt=&quot;example of a self-association&quot; src=&quot;resources/assoc4.gif&quot; width=&quot;170&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In this case, an employee may have an association to other employees; if they do, they are a manager, and the other&#xD;
    employees are members of their staff. The association is navigable in both directions since employees would know their&#xD;
    manager, and a manager knows her staff.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Multiple Associations&quot; name=&quot;Multiple Associations&quot;>Multiple Associations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Drawing two associations between classes means objects are related twice; a given object can be linked to different&#xD;
    objects through each association. Each association is independent, and is distinguished by the role name. As shown&#xD;
    above, a Customer can have associations to different instances of the same class, each with different role names.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_roles_on_associations__order_property&quot; name=&quot;XE_roles_on_associations__order_property&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Ordered Roles&quot; name=&quot;Ordered Roles&quot;>Ordering Roles&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    When the multiplicity of an association is greater than one, the associated instances may be &lt;b>ordered&lt;/b>. The&#xD;
    &lt;b>ordered&lt;/b> property on a role indicates that the instances participating in the association are ordered; by default&#xD;
    they are an unordered set. The model does not specify &lt;b>how&lt;/b> the ordering is maintained; the operations that update&#xD;
    an ordered association must specify where the updated elements are inserted.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_links__guidelines_for&quot; name=&quot;XE_links__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;Links&quot; name=&quot;Links&quot;>Links&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The individual instances of an association are called &lt;b>links;&lt;/b> a link is thus a relationship among instances.&#xD;
    Messages may be sent on links, and links may denote references and aggregations between objects. See &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/communication_diagram_FFFEA1B5.html&quot;&#xD;
    guid=&quot;4.5194432001390347E-305&quot;>Guideline: Communication Diagram&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_control_class__associations_recommendations_for_use_of&quot;&#xD;
    name=&quot;XE_control_class__associations_recommendations_for_use_of&quot;>&lt;/a>&lt;a id=&quot;XE_association__association_classes&quot;&#xD;
    name=&quot;XE_association__association_classes&quot;>&lt;/a>&lt;a id=&quot;Association Classes&quot; name=&quot;Association Classes&quot;>Association&#xD;
    Classes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An &lt;b>association class&lt;/b> is an association that also has class properties (such as attributes, operations, and&#xD;
    associations). It is shown by drawing a dashed line from the association path to a class symbol that holds the&#xD;
    attributes, operations, and associations for the association. The attributes, operations, and associations apply to the&#xD;
    original association itself. Each link in the association has the indicated properties. The most common use of&#xD;
    association classes is the reconciliation of many-to-many relationships (see example below). In principle, the name of&#xD;
    the association and class should be the same, but separate names are permitted if necessary. A degenerate association&#xD;
    class just contains attributes for the association; in this case you can omit the association class name to&#xD;
    de-emphasize its separateness.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Expanding the Employee example from before, consider the case where an Employee (a staff-person) works for another&#xD;
    Employee (a manager). The manager performs a periodic assessment of the staff member, reflecting their performance over&#xD;
    a specific time period.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The appraisal cannot be an attribute of either the manager or the staff member alone, but we can associate the&#xD;
    information with the association itself, as shown below:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;214&quot; alt=&quot;example of an association class&quot; src=&quot;resources/assoc5.gif&quot; width=&quot;192&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The association class &lt;b>Appraisal&lt;/b> captures information relating to the association itself&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_association__qualified_associations&quot; name=&quot;XE_association__qualified_associations&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Qualified Associations&quot; name=&quot;Qualified Associations&quot;>Qualified Associations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Qualifiers are used to further restrict and define the set of instances that are associated to another instance; an&#xD;
    object and a qualifier value identify a unique set of objects across the association, forming a &lt;b>composite key&lt;/b>.&#xD;
    Qualification usually reduces the multiplicity of the opposite role; the net multiplicity shows the number of instances&#xD;
    of the related class associated with the first class and a given qualifier value. Qualifiers are drawn as small boxes&#xD;
    on the end of the association attached to the qualifying class. They are part of the association, not the class. A&#xD;
    qualifier box may contain multiple qualifier values; the qualification is based on the entire list of values. A&#xD;
    &lt;b>qualified association&lt;/b> is a variant form of association attribute.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the following refinement of the association between &lt;b>Line Item&lt;/b> and &lt;b>Product&lt;/b>: a &lt;b>Line Item&lt;/b>&#xD;
    has an association to the &lt;b>Product&lt;/b> which is ordered. Each Line Item refers to one and only one Product, while a&#xD;
    Product may be ordered on many Line Items. By qualifying the association with the qualifier &lt;b>ProductCode&lt;/b> we&#xD;
    additionally indicate that each product has a unique product code, and that &lt;b>Line Items&lt;/b> are associated with&#xD;
    &lt;b>Products&lt;/b> using this product code.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;207&quot; alt=&quot;a qualified association&quot; src=&quot;resources/assoc6.gif&quot; width=&quot;138&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The association between &lt;b>Line Item&lt;/b> and &lt;b>Product&lt;/b> has the qualifier &lt;b>ProductCode&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_N-ary_associations__guidelines_for&quot; name=&quot;XE_N-ary_associations__guidelines_for&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_entity_class__associations_recommendations_for_use_of&quot;&#xD;
    name=&quot;XE_entity_class__associations_recommendations_for_use_of&quot;>&lt;/a>&lt;a id=&quot;XE_association__N-ary_associations&quot;&#xD;
    name=&quot;XE_association__N-ary_associations&quot;>&lt;/a>&lt;a id=&quot;N-ary Associations&quot; name=&quot;N-ary Associations&quot;>N-ary&#xD;
    Associations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An n-ary association is an association among three or more classes, where a single class can appear more than once.&#xD;
    N-ary associations are drawn as large diamonds with one association path to each participating class. This is the&#xD;
    traditional entity-relationship model symbol for an association. The binary form is drawn without the diamond for&#xD;
    greater compactness, since they are the bulk of associations in a real model. N-ary associations are fairly rare and&#xD;
    can also be modeled by promoting them to classes. N-ary associations can also have an association class; this is shown&#xD;
    by drawing a dashed line from the diamond to the class symbol. Roles may have role names but multiplicity is more&#xD;
    complicated and best specified by listing candidate keys. If given, the multiplicity represents the number of instances&#xD;
    corresponding to a given tuple of the other N-1 objects. Most uses of n-ary associations can be eliminated using&#xD;
    qualified associations or association classes. They can also be replaced by ordinary classes, although this loses the&#xD;
    constraint that only one link can occur for a given tuple of participating objects.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
