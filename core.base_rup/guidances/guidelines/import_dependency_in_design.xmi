<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_133tgNnmEdmO6L4XMImrsA" name="import_dependency_in_design,5.099920218485599E-305" guid="_133tgNnmEdmO6L4XMImrsA" changeDate="2005-06-21T10:30:04.826-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_import-dependency_in_design__guidelines_for&quot;&#xD;
name=&quot;XE_import-dependency_in_design__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;XE_design_package__organizing_using_import-dependency&quot;&#xD;
name=&quot;XE_design_package__organizing_using_import-dependency&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Handling import dependencies between packages is an important aspect of structuring an object model. A package depends&#xD;
    on another if any of its classes have relationships that are navigable to classes in the other package. To express such&#xD;
    dependencies you use the import dependency from one package to the package on which it depends.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;284&quot;&#xD;
    alt=&quot;Diagram showing relationships between a component and an operator, an alarm and printer, a customer, and a deposit item.&quot;&#xD;
     src=&quot;resources/md_andi2.gif&quot; width=&quot;385&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Dependencies between packages are expressed by import dependencies.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_layering__organizing_design_packages_using_import_dependency&quot;&#xD;
    name=&quot;XE_layering__organizing_design_packages_using_import_dependency&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_import-dependency_in_design__organizing_packages_with&quot;&#xD;
    name=&quot;XE_import-dependency_in_design__organizing_packages_with&quot;>&lt;/a>&lt;a id=&quot;Use&quot; name=&quot;Use&quot;>Use&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You evolve import dependencies in the following manner:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Before you start working with the object model, make outlines of dependencies for use as guidelines during the&#xD;
        work.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When the model is completed, use it to show the dependencies actually there. This entails updating the import&#xD;
        dependencies in the object model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If you divided the model into packages early on, use the import dependencies to show where dependencies are&#xD;
        allowed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How packages depend on one another affects a system's tolerance to change. An object model will be easier to change&#xD;
        if you:&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reference a minimum number of contained classes from outside each package. If you reference many classes, the&#xD;
        package may have too many different responsibilities and should be divided into two.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make each package depend on few other packages.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Test each package separately. This means that you should be able to test a package by simulating the package on&#xD;
        which it depends. You should not require other packages to be completely or almost completely implemented. If you&#xD;
        can test a package separately, system development and maintenance for each package will be easier.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Place general parts of the object model in separate packages on which other packages depend. If there is such a&#xD;
        package, pay strict attention to release handling, since several parts of the system may be affected by changes to&#xD;
        the package.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Suppose you find something in common for the classes &lt;b>Customer Panel&lt;/b> and &lt;b>Operator Panel&lt;/b> in the recycling&#xD;
    machine. You assign these general services to a new class, &lt;b>Panel&lt;/b> that you place in a new package, &lt;b>Panels&lt;/b>.&#xD;
    The other two classes may then refer to this class to use the general services. Because the classes belong to two&#xD;
    separate packages, the two packages will depend on the new package. This elimination of redundancy implies that changes&#xD;
    to the common functionality only needs to be done in one place.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
