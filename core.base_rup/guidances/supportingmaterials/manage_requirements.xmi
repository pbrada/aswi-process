<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_zZ6dVNnmEdmO6L4XMImrsA" name="manage_requirements,4.7703432975503635E-306" guid="_zZ6dVNnmEdmO6L4XMImrsA" changeDate="2005-10-11T14:19:01.040-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;What is Requirements Management&quot; name=&quot;What is Requirements Management&quot;>What is Requirements Management?&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Requirements management is a systematic approach to finding, documenting, organizing, and tracking a system's changing&#xD;
    requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    We define a requirement as &quot;a condition or capability to which the system must conform&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    We formally define requirements management as a systematic approach to both:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        eliciting, organizing, and documenting the requirements of the system&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        establishing and maintaining agreement between the customer and the project team on the system's changing&#xD;
        requirements&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Keys to effective requirements management include maintaining a clear statement of the requirements, along with&#xD;
    appropriate attributes and traceability to other requirements and other project artifacts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Collecting requirements may sound like a rather straightforward task. In reality, however, projects run into&#xD;
    difficulties for the following reasons:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Requirements are not always obvious, and can come from many sources.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Requirements are not always easily or clearly expressed in words.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        There are many different types of requirements at different levels of detail.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The number of requirements can become unmanageable if they're not controlled.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Requirements are related to one another and also to other deliverables of the software engineering process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Requirements have unique properties or property values. For example, they are not necessarily equally important nor&#xD;
        equally easy to meet.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        There are many interested parties, which means requirements need to be managed by cross-functional groups of&#xD;
        people.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Requirements change.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    No matter how carefully you've defined your requirements, there will always be things that change. What makes changing&#xD;
    requirements complex to manage is not only that a changed requirement means that time has to be spent on implementing a&#xD;
    particular new feature, but also that a change to one requirement may have an impact on other requirements. Managing&#xD;
    change includes such activities as establishing a baseline, determining which dependencies are important to trace,&#xD;
    establishing traceability between related items, and implementing change control.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Use-Case Driven Development&quot; name=&quot;Use-Case Driven Development&quot;>How is Development Driven by Use Cases?&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Our recommended method for organizing your functional requirements is using use cases. Instead of a bulleted list of&#xD;
    requirements, organize them in a way that tells a story of how someone may use the system. This provides for greater&#xD;
    completeness and consistency, and also provides a better understanding of the importance of a requirement from a user's&#xD;
    perspective.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    From a traditional object-oriented system model, it's often difficult to tell how a system does what it's supposed to&#xD;
    do. This difficulty stems from the lack of a &quot;red thread&quot; through the system when it performs certain tasks. In the&#xD;
    Rational Unified Process (RUP), use cases are that thread because they define the behavior performed by a system. Use&#xD;
    cases are not part of traditional object orientation, but their importance has become even more apparent. This is&#xD;
    further emphasized by the fact that use cases are part of the Unified Modeling Language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The RUP employs a &quot;use-case driven approach&quot;, which means that use cases defined for a system are the basis for the&#xD;
    entire development process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use cases play a part in several disciplines.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The concept of use cases can be used to represent business processes. We call this use-case variant a &quot;business use&#xD;
        case&quot;. It is covered by the Business Modeling discipline.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases as software requirements are described in the Requirements discipline. Use cases constitute an important&#xD;
        fundamental concept that must be acceptable to both the customer, developers and testers of the system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the Project Management discipline, use cases are used as a basis for planning iterative development.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases are realized in a design model as part of the Analysis and Design discipline. Use-case realizations&#xD;
        describe how the use case is supported by the design in terms of interacting objects in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use cases ultimately become implemented and testable scenarios, and so are an important focus in both the&#xD;
        Implementation and Test disciplines. They are used to derive test cases and test scripts; the functionality of the&#xD;
        system is verified by executing test scenarios that exercise each use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the Deployment discipline, use cases form a foundation for what is described in user's manuals. Use cases can&#xD;
        also be used to define ordering units of the product. For example, a customer can get a system configured with a&#xD;
        particular mix of use cases.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
