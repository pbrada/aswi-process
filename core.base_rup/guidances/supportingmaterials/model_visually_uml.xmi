<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_zaEOUNnmEdmO6L4XMImrsA" name="model_visually_uml,2.2182245081579854E-305" guid="_zaEOUNnmEdmO6L4XMImrsA" changeDate="2005-10-11T14:19:21.539-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;229&quot; alt=&quot;Visual Modeling image&quot; src=&quot;resources/visual.gif&quot; width=&quot;447&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Visual modeling raises the level of abstraction&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;What is Visual Modeling&quot; name=&quot;What is Visual Modeling&quot;>What is Visual Modeling&lt;/a>?&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Visual modeling is the use of semantically rich, graphical and textual design notations to capture software designs. A&#xD;
    notation, such as UML, allows the level of abstraction to be raised, while maintaining rigorous syntax and semantics.&#xD;
    In this way, it improves communication in the design team, as the design is formed and reviewed, allowing the reader to&#xD;
    reason about the design, and it provides an unambiguous basis for implementation.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Why Do We Model&quot; name=&quot;Why Do We Model&quot;>Why Do We Model&lt;/a>?&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    A model is a simplified view of a system.&amp;nbsp; It shows the essentials of the system from a particular perspective and&#xD;
    hides the non-essential details.&amp;nbsp; Models can help in the following ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Aiding%20understanding%20of%20complex%20systems&quot;>aiding understanding of complex systems&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Exploring%20and%20comparing%20design%20alternatives%20at%20a%20low%20cost&quot;>exploring and comparing design&#xD;
        alternatives at a low cost&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Forming%20a%20foundation%20for%20implementation&quot;>forming a foundation for implementation&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Capturing%20requirements%20precisely&quot;>capturing requirements precisely&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Communicating%20decisions%20unambiguously&quot;>communicating decisions unambiguously&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Aiding understanding of complex systems&quot; name=&quot;Aiding understanding of complex systems&quot;>Aiding understanding of&#xD;
    complex systems&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The importance of models increases as systems become more complex.&amp;nbsp; For example, a doghouse can be constructed&#xD;
    without blueprints.&amp;nbsp; However, as one progresses to houses, and then to skyscrapers, the need for blueprints&#xD;
    becomes pronounced.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Similarly, a small application built by one person in a few days may be easily understood in its entirety.&amp;nbsp;&#xD;
    However, an e-commerce system with tens of thousands of source lines of code (SLOCs)-or an air traffic control system&#xD;
    with hundreds of thousands of SLOCs-can no longer be easily understood by one person.&amp;nbsp; Constructing models allows&#xD;
    a developer to focus on the big picture, understand how components interact, and identify fatal flaws.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;Some examples of&amp;nbsp; models are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use Cases to unambiguously specify behavior&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Class Diagrams and Data Model Diagrams to capture design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        State Transition Diagrams to model dynamic behavior&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Modeling is important because it helps the team visualize, construct, and document the structure and behavior of the&#xD;
    system, without getting lost in complexity.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Exploring and comparing design alternatives at a low cost&quot;&#xD;
    name=&quot;Exploring and comparing design alternatives at a low cost&quot;>Exploring and comparing design alternatives at a low&#xD;
    cost&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Simple models can be created and modified at a low cost to explore design alternatives.&amp;nbsp; Innovative ideas can be&#xD;
    captured and reviewed by other developers before investing in costly code development.&amp;nbsp; When coupled with&#xD;
    iterative development, visual modeling helps developers to assess design changes and communicate these changes to the&#xD;
    entire development team.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Forming a foundation for implementation&quot; name=&quot;Forming a foundation for implementation&quot;>Forming a foundation for&#xD;
    implementation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Today many projects employ object-oriented programming languages to obtain reusable, change-tolerant, and stable&#xD;
    systems. To obtain these benefits, it's even more important to use object technology in design. The Rational Unified&#xD;
    Process (RUP) produces an object-oriented design model that is the basis for implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    With the support of appropriate tools, a design model can be used to generate an initial set of code for&#xD;
    implementation.&amp;nbsp; This is referred to as &quot;forward engineering&quot; or &quot;code generation&quot;.&amp;nbsp; Design models may also&#xD;
    be enhanced to include enough information to build the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reverse engineering may also be applied to generate design models from existing implementations.&amp;nbsp; This may be used&#xD;
    to evaluate existing implementations.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &quot;Round trip engineering&quot; combines both forward and reverse engineering techniques to ensure consistent design and&#xD;
    code.&amp;nbsp;Combined with an iterative process, and the right tools, round-trip engineering allows design and code to be&#xD;
    synchronized during each iteration.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Capturing requirements precisely&quot; name=&quot;Capturing requirements precisely&quot;>Capturing requirements precisely&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Before building a system, it's critical to capture the requirements.&amp;nbsp; Specifying the requirements using a precise&#xD;
    and unambiguous model helps to ensure that all stakeholders can understand and agree on the requirements.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A model that separates the external behavior of the system from the implementation helps you focus on the intended use&#xD;
    of the system, without getting bogged down in implementation details.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Communicating decisions unambiguously&quot; name=&quot;Communicating decisions unambiguously&quot;>Communicating decisions&#xD;
    unambiguously&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The RUP uses the Unified Modeling Language (UML), a consistent notation that can be applied for system engineering as&#xD;
    well as business engineering.&amp;nbsp;&amp;nbsp; A standard notation serves the following roles (see [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>BOO95&lt;/a>]):&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &quot;It serves as a language for communicating decisions that are not obvious or cannot be inferred from the code&#xD;
        itself.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;It provides semantics that are rich enough to capture all important strategic and tactical decisions.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;It offers a form concrete enough for humans to reason and for tools to manipulate.&quot;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    UML represents the convergence of the best practice in software modeling throughout the object-technology&#xD;
    industry.&amp;nbsp; For more information on the UML, visit our Web site at &lt;a&#xD;
    href=&quot;http://www-306.ibm.com/software/rational/uml/&quot; target=&quot;_blank&quot;>http://www-306.ibm.com/software/rational/uml/&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
