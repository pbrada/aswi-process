<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_3jdFkdnmEdmO6L4XMImrsA" name="setup_testfactory,{FAC387D8-BA1A-4056-A53B-E1C43571D1DC}" guid="_3jdFkdnmEdmO6L4XMImrsA" changeDate="2005-10-06T10:37:52.579-0700" changeDescription=" Was attached to Management\Project Environmentl\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Before you can use Rational TestFactory to automatically generate Test Scripts, you must set up the Test Environment&#xD;
    Configuration. TestFactory generates Test Scripts based on an the &quot;application map&quot;-a hierarchical list of &quot;UI objects&quot;&#xD;
    that represent the windows and controls in the user interface of the application-under-test (AUT).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This tool mentor is applicable when running Windows 98/2000/NT 4.0.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To set up the test environment in Rational TestFactory:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Define%20AUT&quot;>Define the project to Rational TestFactory and instrument the AUT&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Map%20AUT&quot;>Map the application-under-test&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Review%20refine%20AUT&quot;>Review and refine the application map&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Define AUT&quot; name=&quot;Define AUT&quot;>Define the project to Rational TestFactory and instrument the&#xD;
    AUT&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The first time you open a project in Rational TestFactory, you need to supply information about the project and the&#xD;
    application-under-test (AUT). The main functional areas of TestFactory remain unavailable until you specify the project&#xD;
    information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To measure code-based test coverage of an executed Test Script, the AUT must contain instrumentation points-counters&#xD;
    that tally the parts of the code that a Test Script executes. Rational TestFactory uses information in the instrumented&#xD;
    files to calculate code-based coverage data for both the Test Scripts that TestFactory generates and the Robot Test&#xD;
    Scripts that you can play back from TestFactory.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp; Refer to the following topics&#xD;
    in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Starting TestFactory&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Specifying information for a new project&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Instrumenting the application-under-test&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    2.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Map AUT&quot; name=&quot;Map AUT&quot;>Map the application-under-test&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A well-developed application map is the foundation for generating Test Scripts in Rational TestFactory. The&#xD;
    &quot;Application Mapper&quot;-the process that creates the application map-thoroughly explores the user interface of the&#xD;
    application-under-test (AUT). Each window and control is examined and compared to known classes and subclasses, which&#xD;
    are stored in the &quot;user interface (UI) library.&quot; Based on the outcome of the comparison, the mapping process creates a&#xD;
    UI object, which is an instance of the matched class, and places it in the application map.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Every defined class in the UI library has a specific set of &quot;UI object properties&quot; associated with it. When it creates&#xD;
    a UI object, the Application Mapper assigns the object the set of properties associated with its class. These&#xD;
    properties both identify the control in the AUT that the object represents, and inform Rational TestFactory how to&#xD;
    exercise the control during mapping and testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the AUT contains a logon dialog box that requires special input such as a user ID or a password, you must provide&#xD;
    specific logon information to the Application Mapper.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When mapping is complete, the information in the Mapping Summary report reflects the windows and controls in the AUT&#xD;
    that Rational TestFactory has mapped.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the following&#xD;
    topics in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Map the AUT using the Application Mapper Wizard&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Map the AUT using the Map It! shortcut&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Mapping an AUT that has a logon dialog box&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    3.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Review refine AUT&quot; name=&quot;Review refine AUT&quot;>Review and refine the application map&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The first version of the application map may not be an accurate reflection of all the controls in the AUT. The&#xD;
    application map may be incomplete or mapped UI objects may need reclassifying.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A well-defined application map is critical to generating quality Test Scripts. Rational TestFactory can test only the&#xD;
    controls in the AUT that are represented by UI objects in the application map. By reviewing and refining the&#xD;
    application map before you start testing, you can increase the scope and quality of the generated Test Scripts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can review the application map by comparing the windows and controls that you see in the AUT with the UI objects in&#xD;
    the application map. If you notice unmapped controls in the AUT, and if you want to test these controls, you need to&#xD;
    determine and resolve the cause for each unmapped control.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the following&#xD;
    topics in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Review the application map&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Defining undetected controls&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Resolving generic objects&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Using interaction objects to improve the application map&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
