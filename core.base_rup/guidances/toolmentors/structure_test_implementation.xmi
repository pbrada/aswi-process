<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2o5h1NnmEdmO6L4XMImrsA" name="structure_test_implementation,{AD403709-9F1A-496A-B5F7-F7CF823F8BDD}" guid="_2o5h1NnmEdmO6L4XMImrsA" changeDate="2005-11-08T13:23:35.540-0800" changeDescription="  Was attached to Assessment\Test\Structured Testing\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In Rational TestFactory, you start to structure the test implementation using the &quot;application map&quot; feature.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A well-developed application map reflects an accurate representation of the user interface in the&#xD;
    application-under-test (AUT). Each window and control in the AUT is represented by a &quot;UI object&quot; in the application&#xD;
    map. For information about developing the application map, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/setup_testfactory_C77C34F4.html&quot;&#xD;
    guid=&quot;{FAC387D8-BA1A-4056-A53B-E1C43571D1DC}&quot;>Tool Mentor: Setting Up the Test Environment in Rational TestFactory&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This tool mentor is applicable when running Windows 98/2000/NT 4.0.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To use Rational TestFactory to capture the results of the test model for automated testing:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ID%20test%20locations&quot;>Identify the parts of the application that you want to test&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Set%20up%20interaction%20objects&quot;>Set up interaction objects to reflect Test Script requirements&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Supply%20test%20data&quot;>Supply Test Data for objects that represent text controls&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Restrict%20object%20testing&quot;>Restrict testing of specific objects&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;ID test locations&quot; name=&quot;ID test locations&quot;>Identify the parts of the application that you want&#xD;
    to test&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    After you have developed the application map, you can determine the areas of the AUT that are appropriate for testing&#xD;
    in Rational TestFactory.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &quot;Pilot&quot; is the Rational TestFactory tool that automatically generates test scripts. The locations at which you place&#xD;
    Pilots in the application map determine the controls in the AUT that they can test. A Pilot can test all the available&#xD;
    UI objects in the map that are in the branch under the Pilot's parent object. If a control is represented by a UI&#xD;
    object in that branch of the map and the object is available, the Pilot will test it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Review the test procedures created during the Design Test task, with the objective of identifying:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The controls that must be exercised in a specific order.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The controls for which Test Data must be provided.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The windows or dialog boxes in which the controls are displayed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The UI objects in the application map that correspond to the windows, dialog boxes, and controls that you identify are&#xD;
    good candidates for testing by Pilots in Rational TestFactory. You can specify how TestFactory must test a control in&#xD;
    the AUT by setting the property values of its corresponding UI object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the following&#xD;
    topics in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Pilots: What they are and how they work&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Effective Pilot placement&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    2.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Set up interaction objects&quot; name=&quot;Set up interaction objects&quot;>Set up interaction objects to&#xD;
    reflect Test Script requirements&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Test Script in which all the controls are located in the same window is a good candidate for testing in Rational&#xD;
    TestFactory. An &quot;interaction object&quot; is the TestFactory feature that lets you specify the Test Script interaction&#xD;
    method for such controls.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An interaction object is a container to which you can add one or more UI objects as &quot;components.&quot; The interaction&#xD;
    object components represent the controls that need to be exercised to take a specific path or perform a specific task&#xD;
    in the AUT. After you add the components for the interaction, you can configure them to meet the Test Script&#xD;
    requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you have more than one Test Script that tests controls in the same window, you can specify the requirements for each&#xD;
    Test Script in a separate interaction object. The Pilot feature of TestFactory can test multiple interaction objects in&#xD;
    the same window during a single Test Suite execution or Pilot run.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the &lt;i>Using&#xD;
    interaction objects to set up specific tests&lt;/i> topic in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    3.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Supply test data&quot; name=&quot;Supply test data&quot;>Supply Test Data for objects that represent input&#xD;
    controls&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Pilot feature of TestFactory performs many tests on as many of the available UI objects as possible in the specific&#xD;
    area of the map to which it has access. By default, a Pilot exercises the objects in a random order, and supplies&#xD;
    random data values to objects that require input.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If there are controls in your Test Script that require specific Test Data as input, you can use a &quot;data entry style&quot; to&#xD;
    supply the necessary input information. A data entry style is a group of the UI object properties that specify test&#xD;
    input for a UI object:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A required string case that a TestFactory Pilot must use.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A list of string cases that act as a datapool that a Pilot can pick from randomly.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A list of mask cases for which Rational TestFactory generates string values that a Pilot can pick from randomly.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Options that let a Pilot generate random integer, floating point, and string values.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Rational TestFactory provides a set of predefined &lt;i>system&lt;/i> data entry styles that reflect standard types of input.&#xD;
    You can create additional &lt;i>custom&lt;/i> data entry styles that are based either on system styles or on existing custom&#xD;
    styles. You can also override the settings in a system style or a custom style for an individual object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the &lt;i>Using&#xD;
    data entry styles for input-type objects&lt;/i> topic in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    4.&amp;nbsp;&amp;nbsp; &lt;a id=&quot;Restrict object testing&quot; name=&quot;Restrict object testing&quot;>Restrict testing of specific objects&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    By default, all the controls in the AUT that are represented by UI objects in the application map are eligible for&#xD;
    testing. If a Pilot encounters a UI object as it follows a path through the application map, the Pilot can include the&#xD;
    UI object in a generated Test Script. However, your AUT might contain mapped controls that you do not want Pilots to&#xD;
    test. Some examples are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        An unstable control&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A control whose functionality causes a destructive action&lt;br />&#xD;
         (for example, a control that deletes a database)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A control that you do not want to test&lt;br />&#xD;
         (for example, a print control or a control that opens Help)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    If your AUT contains such controls, you can exclude its associated UI object from testing. You can also limit the test&#xD;
    actions that a Pilot performs on a control. The properties of the UI object associated with a control reflect the&#xD;
    possible actions that a user can perform on the control.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;Help icon&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; />&amp;nbsp;&amp;nbsp; Refer to the following&#xD;
    topics in Rational TestFactory Help:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Excluding UI objects from testing&lt;/i>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Change UI object test actions&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
