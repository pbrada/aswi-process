<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2DypoNnmEdmO6L4XMImrsA" name="reverse_engineer_code,{D674D96E-1A37-48D1-B120-6145C9802E3E}" guid="_2DypoNnmEdmO6L4XMImrsA" changeDate="2005-08-29T22:57:39.494-0700" changeDescription="  Was attached to Design\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor describes Rational Rose's ability to reverse-engineer various types of elements into a Rose model,&#xD;
    including elements as varied as language source and binary code, Type Libraries, Web-based elements,&amp;nbsp; XML DTDs,&#xD;
    and database schemas.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reverse engineering is the process of examining an existing resource, recovering information about its design, then&#xD;
    using that information to generate or update a model representing the project's logical structure. It enables you to&#xD;
    reuse elements common to more than one model or system. It also enables you to iteratively develop (round trip) a&#xD;
    system through analysis and design in Rational Rose, generating source code from the model, developing the source, then&#xD;
    reverse engineering the source back into a Rose model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following Rational Rose add-ins provide reverse engineering features:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Visual%20C&quot;>Visual C++&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Visual%20Basic&quot;>Visual Basic&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Type%20Library%20Importer&quot;>Type Library Importer&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ANSI%20C&quot;>ANSI C++&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Rose%20J%20(Java)&quot;>Rose J (Java)&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#CORBA&quot;>CORBA&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#XML%20DTD&quot;>XML DTD&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Web%20Modeler&quot;>Web Modeler&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Data%20Modeler&quot;>Data Modeler&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Visual C++&quot; name=&quot;Visual C++&quot;>Visual C++&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose Visual C++ enables you to reverse-engineer Visual C++ source code. Its features include:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Full reverse engineering of common Visual C++ language constructs such as relationships, typedefs, enums,&#xD;
        message/object/COM maps, constructors, and destructors&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dialog-based support for reverse engineering code for Visual C++ elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Autosynchronization mode for automatically updating code or model when either is changed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with Microsoft's Visual Studio, including IDL files&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for Visual C++ template classes and user-specified code patterns&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &amp;nbsp;&lt;a id=&quot;Visual Basic&quot; name=&quot;Visual Basic&quot;>Visual Basic&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Being tightly integrated with the Microsoft Visual Basic 6.0 environment, the Rational Rose Visual Basic Language&#xD;
    Support Add-in enables you to update and subsequently evolve a Rose model from changes in the Visual Basic source code.&#xD;
    The extensible and customizable dialog-based tools guide you smoothly through the process of updating the model when&#xD;
    the source code is changed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Features include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Update of model elements from changes in the corresponding source code projects&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Synchronization mode for updating model elements when source code is deleted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Import of type libraries in the model&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to automate and extend round-trip engineering by using the Rose Visual Studio RTE Extensibility&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Type Library Importer&quot; name=&quot;Type Library Importer&quot;>Type Library Importer&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Type Library Importer in Rational Rose enables you to import a type library of a COM component (.dll, .exe, .ocx,&#xD;
    .olb, and .tlb files) into a Rose model. The type library is represented as a component and as a logical package in the&#xD;
    model. The logical package contains the type library items that are defined by the type information of the imported COM&#xD;
    component, such as co-classes, interfaces, and so forth. Each item is represented by a class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By importing type libraries into a model, you can show how classes in the model use, implement, or depend upon classes&#xD;
    and interfaces in other COM components, regardless of their implementation language. Features of the Type Library&#xD;
    Importer include the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Dialog-based support for control of the Type Library Importer&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Quick Import mode to import class placeholders and Full import mode to import classes with all operations and&#xD;
        properties&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Presentation of type libraries in the Object Browser or the OLE/COM Viewer in Visual Studio&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to extend and customize type library import by running the Type Library Importer from a script or a program&#xD;
        using the Rose Visual Studio RTE Extensibility&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> The way you&#xD;
    use a type library varies from one programming language to another. For more information, see the online help for&#xD;
    Rational Rose and the documentation for the language add-in you're using.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &amp;nbsp;&lt;a id=&quot;ANSI C++&quot; name=&quot;ANSI C++&quot;>ANSI C++&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Rational Rose ANSI C++ add-in enables you to reverse-engineer source code into a Rose model. ANSI C++ supports both&#xD;
    reverse engineering into an empty model, where new model elements are created, and reverse engineering into an existing&#xD;
    model, where model elements are changed to correspond to the code. It provides:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Support for Model evolution from analysis to design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for C++ language without being restricted to a single vendor's C++ compiler&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Round trip engineering that synchronizes models and generated C++ code across multiple iterations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Changes made to the code are carried back to the model during reverse engineering&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Design, modeling, and visualization of all C++ constructs including classes, templates, namespaces, inheritance,&#xD;
        and class members functions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for large frameworks&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Rose J (Java)&quot; name=&quot;Rose J (Java)&quot;>Rose J (Java)&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose J enables you to reverse-engineer existing Java elements into a Rose model. These elements include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Source files (.java files)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Bytecode files (.class files)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java archive files (.zip, .cab, .jar, and .war files)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Enterprise JavaBeans&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Servlets&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Rational Rose J also supports integration with IBM's VisualAge for Java.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;CORBA&quot; name=&quot;CORBA&quot;>CORBA&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose CORBA enables you to reverse engineer any CORBA-compliant IDL code into a Rose model. Each&#xD;
    reverse-engineered .idl file becomes a component, and is placed in the component view of the model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you reverse engineer previously forward-engineered IDL code (that is, code that was generated from CORBA model&#xD;
    elements), your original model elements remain unchanged, except that new information or changes you entered into the&#xD;
    IDL code are carried back into the model. The exceptions to this rule are the special cases of Rational Rose constructs&#xD;
    that are used for one-time forward engineering only.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &amp;nbsp;&lt;a id=&quot;XML DTD&quot; name=&quot;XML DTD&quot;>XML DTD&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose XML DTD (eXtensible Markup Language Document Type Definition) reverse engineers an XML DTD (.dtd file) to&#xD;
    create a Rose class diagram showing the structure, elements, and relationships in the DTD. You can add and remove XML&#xD;
    DTD elements, and change relationships between the elements in the class diagram created by the reverse engineering&#xD;
    process. After you use the Rose XML DTD syntax checker to validate the XML, you can generate a new DTD from the Rose&#xD;
    class diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rational Rose XML DTD provides stereotyped classes you can use to model and generate an XML DTD.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Web Modeler&quot; name=&quot;Web Modeler&quot;>Web Modeler&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose Web Modeler parses Active Server Page (ASP), Java Server Page (JSP), and HTML files in your Web&#xD;
    application creating a web application model using stereotype classes that represent client pages, server pages, and&#xD;
    HTML forms. You can modify the Web application model and generate .asp, .jsp, .html, and .htm files from Web Modeler.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Data Modeler&quot; name=&quot;Data Modeler&quot;>Data Modeler&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose Data Modeler features allow the database designer and the software developer to communicate requirements&#xD;
    using the same tool. As a database designer or developer, you can use Rose Data Modeler to model and design a database&#xD;
    by reverse engineering an existing database schema or DDL script.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Using the Rational Rose Data Modeler Reverse Engineering Wizard, you can engineer a DDL script or database schema for&#xD;
    an ANSI&amp;nbsp; SQL 92 standard database or the following DBMSes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        DB2 DBMS versions MVS and UDB&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Oracle DBMS&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        SQL Server DBMS&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Sybase Adaptive Server&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Reverse Engineering Wizard reads the database schema or DDL file and creates a data model diagram that includes the&#xD;
    names of all quoted identifier entities. Depending on the DBMS, Rose Data Modeler Reverse Engineering Wizard models&#xD;
    tables,&amp;nbsp; relationships between tables, stored procedures, indexes, and triggers in the data model diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the data model diagram, you can add tables, define relationships, indexes, and domains, and apply third normal form&#xD;
    to the elements, then transform the data model to an object model or forward engineer the data model to generate a DDL&#xD;
    script or database schema.&amp;nbsp;&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
