<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1sinRNnmEdmO6L4XMImrsA" name="designing_with_active_objects,{8A0A5BB3-5CBC-4A38-BFD2-4A21CA5FF833}" guid="_1sinRNnmEdmO6L4XMImrsA" changeDate="2005-08-29T22:43:45.104-0700" changeDescription="  Was attached to Design\Real-time Design\Guidance" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An active object consists of capsules with protocols and ports.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Capsules are highly encapsulated objects using message-based communication to other capsules through their port&#xD;
    objects. Capsules can aggregate other capsules. A capsule structure can contain other capsules, which are capsule&#xD;
    roles.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The set of messages exchanged between two objects conforms to a communication pattern called a protocol. It is&#xD;
    basically a contractual agreement defining the valid types of messages that can be exchanged between the participants&#xD;
    in the protocol.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A state diagram is one way to define object behavior. It shows the sequence of states that an object or an interaction&#xD;
    goes through during its life in response to messages received, together with its responses and actions.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Tool Steps&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To design with active objects in Rational Rose RealTime, perform these steps:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Create%20a%20capsule%20role&quot;>Create a capsule role&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Create%20ports%20and%20bind%20to%20protocols&quot;>Create ports and bind to protocols&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Define%20a%20capsule%20state%20machine&quot;>Define a capsule state machine&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Define%20states%20and%20substates&quot;>Define states and substates&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Define%20state%20transitions&quot;>Define state transitions&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Define%20attributes%20on%20classes&quot;>Define attributes on classes&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;Create a capsule role&quot; name=&quot;Create a capsule role&quot;>Create a capsule role&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Capsules are created in the Logical View of the model browser.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the &lt;b>Capsule Role&lt;/b> tool in the toolbox.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Place the cursor at the location where the capsule role is to be placed, and left-click.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the new capsule role's associated capsule from the drop-down list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Give the capsule role an appropriate name.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat the above steps for each capsule role to be created.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;Create ports and bind to protocols&quot; name=&quot;Create ports and bind to protocols&quot;>Create ports and bind to&#xD;
    protocols&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Find the capsule in the model browser or on a class diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Expand the elements under the capsule in the browser, or right-click on the capsule in a class diagram to open the&#xD;
        capsule's structure diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the &lt;b>Port&lt;/b> tool in the toolbox to place a port on the capsule's structure diagram. The port may be dropped&#xD;
        onto the capsule's border or inside the large rectangle area.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Set the name of the port.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select a protocol from the list, or create a new one.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Right-click on the port to select the Port Specification dialog.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the Port Specification dialog to change the protocol, to select whether the port is wired or unwired, and to&#xD;
        set whether the port is conjugated.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    3. &lt;a id=&quot;Define a capsule state machine&quot; name=&quot;Define a capsule state machine&quot;>Define a capsule state machine&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Find the capsule in the model browser or on a class diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Expand the elements under the capsule in the browser, or right-click on the capsule in a class diagram to open the&#xD;
        capsule's state diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the &lt;b>State Diagram&lt;/b> toolbox to place states and transitions into the state diagram.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    4. &lt;a id=&quot;Define states and substates&quot; name=&quot;Define states and substates&quot;>Define states and substates&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Find the capsule for which the behavior is being updated. Capsules can be found in the model browser or on a class&#xD;
        diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Right-click on the capsule to open the State Diagram. This will open the diagram in a State Diagram Editor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the &lt;b>State&lt;/b> tool in the toolbox to drop a new state on the diagram. Do this for each state you want to&#xD;
        create.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Give each state an appropriate name.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Double-click on a state that will have substates. This will expose a new state diagram on which you may add&#xD;
        substates.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the tab at the bottom of the window to choose which state level to navigate back to.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;b>Note&lt;/b>: Alternatively, you can add states through the Navigator area of the State Diagram Editor.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    5. &lt;a id=&quot;Define state transitions&quot; name=&quot;Define state transitions&quot;>Define state transitions&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    Add initial transition&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Click on the initial point in the diagram and drag the transition on top of the target state. The initial point is&#xD;
        the black circle that appears in the top-left corner of the diagram.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Give the transition an appropriate name, if not the default. The initial transition has a default name of Initial.&#xD;
        You can change the name by selecting the label and typing it in. The initial transition will be automatically&#xD;
        invoked at run-time when a capsule instance is created. Any action code associated with the initial transition will&#xD;
        be run as soon as the capsule instance is created.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    Add transitions&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the transition tool from the toolbox and draw a transition from the source state to the target state.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Give the transition an appropriate name, or accept the default.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    Adding detail code to state machines&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    C, C++, or Java code can be added as actions on transitions, choice points, and state entry or exit on capsule state&#xD;
    diagrams to be executed at run-time. Only code added to capsule state diagrams is included in the generated code for&#xD;
    the model. Detailed actions on protocol or data class state diagrams are not included in the generated code for those&#xD;
    classes.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Add triggers&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Before a trigger can be set for a transition, the port on which the trigger will be received must be defined.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Double-click the transition to open the Transition Specification dialog.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the &lt;b>Trigger&lt;/b> tab.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        With the cursor in the port list area, right-click and select &lt;b>Insert&lt;/b> from the menu.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the Port area, select the port on which the trigger will be received.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In the Signal area, select the port signal that will cause the trigger event.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click on the &lt;b>OK&lt;/b> buttons to close the open dialogs.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    Add code to transition&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Now that you have all the required elements in place (initial state, initial transition, and ports), you must add&#xD;
    detail code to the initial transition, as well as state to state transitions. The detail code will be executed when the&#xD;
    initial transition is run at model execution time, or when a trigger is received on the state to state transition.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Double-click the transition to open the Transition Specification dialog.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the &lt;b>Actions&lt;/b> tab to display the code window.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add the code that will be executed on the transition.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the &lt;b>OK&lt;/b> button to close the open dialog.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;b>Note&lt;/b>: You don't have to include opening and closing curly braces '{`, `}'. These are added automatically by the&#xD;
    code generator.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    6. &lt;a id=&quot;Define attributes on classes&quot; name=&quot;Define attributes on classes&quot;>Define attributes on classes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Open the Capsule Specification dialog box by double-clicking on the capsule in the browser, or by selecting the&#xD;
        capsule in a diagram and selecting &lt;b>Open Specification&lt;/b> from the pop-up menu.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the &lt;b>Attributes&lt;/b> Tab in the Capsule Specification.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        With the cursor in the open area of the tab, right-click and select &lt;b>Insert&lt;/b>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Change the name from NewAttribute1 to something more meaningful and then press ENTER.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Double-click on the new attribute to display the Attribute Specification dialog.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use the Attribute Specification dialog to set the attribute type and initial value.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
