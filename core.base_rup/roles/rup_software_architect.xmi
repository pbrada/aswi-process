<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:RoleDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1aOIMNnmEdmO6L4XMImrsA" name="rup_software_architect,{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}" guid="_1aOIMNnmEdmO6L4XMImrsA" changeDate="2005-06-21T16:50:48.985-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_software_architect_(role)__description_of&quot;&#xD;
name=&quot;XE_software_architect_(role)__description_of&quot;>&lt;/a>&lt;a id=&quot;Description&quot; name=&quot;Description&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    The software architect has overall responsibility for driving the major technical decisions, expressed as the software&#xD;
    architecture. This typically includes identifying and documenting the architecturally significant aspects of the&#xD;
    system, including requirements, design, implementation, and deployment &quot;views&quot; of the system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The architect is also responsible for providing rationale for these decisions, balancing the concerns of the various&#xD;
    stakeholders, driving down technical risks, and ensuring that decisions are effectively communicated, validated, and&#xD;
    adhered to.&#xD;
&lt;/p></mainDescription>
  <skills>&lt;a id=&quot;Skills&quot; name=&quot;Skills&quot;>&lt;/a> &#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &quot;The ideal architect should be a person of letters, a mathematician, familiar with historical studies, a diligent&#xD;
        student of philosophy, acquainted with music, not ignorant of medicine, learned in the responses of jurisconsults,&#xD;
        familiar with astronomy and astronomical calculations.&quot; - Vitruvius, circa 25 BC&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In summary, the software architect must be well-rounded, posses maturity, vision, and a depth of experience that allows&#xD;
    for grasping issues quickly and making educated, critical judgment in the absence of complete information. More&#xD;
    specifically, the software architect, or members of the architecture team, must combine these skills:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Experience&lt;/b> in both the problem domain, through a thorough understanding of the requirements, and the&#xD;
        software engineering domain. If there is a team, these qualities can be spread across the team members, but at&#xD;
        least one software architect must provide the global vision for the project.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Leadership&lt;/b> in order to drive the technical effort across the various teams, and to make critical decisions&#xD;
        under pressure and make those decisions stick. To be effective, the software architect and the project manager must&#xD;
        work closely together, with the software architect leading the technical issues and the project manager leading the&#xD;
        administrative issues. The software architect must have the authority to make technical decisions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Communication&lt;/b> to earn trust, to persuade, to motivate, and to mentor. The software architect cannot lead by&#xD;
        decree, only by the consent of the rest of the project. In order to be effective, the software architect must earn&#xD;
        the respect of the project team, the project manager, the customer, and the user community, as well as the&#xD;
        management team.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Goal-orientation and Pro-activity&lt;/b> with a relentless focus on results. The software architect is the&#xD;
        technical driving force behind the project, not a visionary or dreamer. The career of a successful software&#xD;
        architect is a long series of sub-optimal decisions made in uncertainty and under pressure. Only those who can&#xD;
        focus on doing what needs to be done will be successful in this environment of the project.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    From an expertise standpoint, the software architect also needs to encompass the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot; guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Role: Designer&lt;/a>&#xD;
    capabilities. However, unlike the designer, the software architect:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        tends to be a generalist rather than a specialist, knowing many technologies at a high level rather than a few&#xD;
        technologies at the detail level&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        makes broader technical decisions, and therefore broad knowledge and experience, as well as communication and&#xD;
        leadership skills, are key.&#xD;
    &lt;/li>&#xD;
&lt;/ul></skills>
  <assignmentApproaches>&lt;a id=&quot;RoleAssignment&quot; name=&quot;RoleAssignment&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    If the project is large enough to warrant an architecture team, the goal is to have a good mix of talents, covering a&#xD;
    wide spectrum of experience and sharing a common understanding of software engineering process. The architecture team&#xD;
    need not be a committee of representatives from various teams, domains or contractors. Software architecture is a&#xD;
    full-time function, with staff permanently dedicated to it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For smaller projects, a single person may act as both project manager and software architect. However, if at all&#xD;
    possible, it is better to have these roles performed by separate people, in order to ensure that time pressure on one&#xD;
    role doesn't cause the other role to be neglected.&#xD;
&lt;/p></assignmentApproaches>
</org.eclipse.epf.uma:RoleDescription>
