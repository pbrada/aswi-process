<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_qv6tMPS3EdmIX5Pw7v8pRw" name="service_portfolio,1.851952881072508E-305" guid="_qv6tMPS3EdmIX5Pw7v8pRw" changeDate="2006-10-31T22:32:18.931-0800" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One of the stated advantages of &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service-oriented_architecture_8328ABAD.html&quot;&#xD;
    guid=&quot;8.613638237693525E-307&quot;>Service-Oriented Architecture&lt;/a> is the ability to get away from &quot;silo&quot; thinking within&#xD;
    IT, the development of applications as islands of functionality. We tend to think of applications today as a vertical&#xD;
    integration of a set of components built for this one purpose. It is often the case that development projects are set&#xD;
    up around the development of, or maintenance of, an application and in some extreme cases development teams are solely&#xD;
    responsible for a single application. The following picture represents a common business application structure, showing&#xD;
    that really the only reuse between applications is often that they share a common database.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;194&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_portfolio-02.gif&quot;&#xD;
    width=&quot;206&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Whereas the Service-Oriented approach would lead us to a more horizontal view of applications as an integration of&#xD;
    services; so in fact all of our services are peers in a portfolio of capabilities from which applications, which can&#xD;
    now be thought of as those parts of the IT solutions interacting with users, can be developed. The following&#xD;
    demonstrates how the Ordering application can be developed as a set of user-facing portlets for integration into a&#xD;
    portal server, and that the business logic is provided by a set of services which in turn utilize a set of&#xD;
    infrastructure services.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;175&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_portfolio-03.gif&quot;&#xD;
    width=&quot;385&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Services provide independently deployed components that are provided at a granularity that typically allows them to be&#xD;
    entirely self-contained, this leads to services that manage and protect their own data stores rather than sharing&#xD;
    database storage. This seems to be in contrast to moves by some companies over the years to introduce common data&#xD;
    stores, or at least common data models that all applications share. On the contrary a service-oriented architecture&#xD;
    tends to lead designers into developing not common data storage models but common message models to ease the&#xD;
    integration of services through middleware technologies.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Enterprise_View&quot; name=&quot;Enterprise_View&quot;>Enterprise View&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    As we mentioned before both projects and development teams have a limited scope and also a limited visibility into the&#xD;
    wider capabilities, requirements and goals of the IT services and more importantly the business the services support.&#xD;
    It is therefore critical that, during&amp;nbsp;the move toward Service-Oriented Solutions and the horizontal view of&#xD;
    integrated solutions, the architects on the IT side are able to visualize the portfolio of services supporting the&#xD;
    business solutions required for the business itself to operate. One advantage to modeling services is that an abstract&#xD;
    model is able to elide certain details and therefore present the broad view of the service portfolio in a scalable&#xD;
    manner, i.e. in the presence of many services the model is able to present views of the portfolio supporting decision&#xD;
    making for the &lt;i>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/roles/rup_software_architect_DB0BF177.html&quot;&#xD;
    guid=&quot;{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}&quot;>Software Architect&lt;/a>&lt;/i> and &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot; guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Designer&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Obviously as organizations transition to Service-Oriented Architecture there will be a growth in services and so the&#xD;
    portfolio will not start as a large model, but it is possible to capture the state of the transition in terms of&#xD;
    available as well as planned services. &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/solution_partitioning_352116F8.html&quot;&#xD;
    guid=&quot;1.6501323286225543E-305&quot;>Service Partitioning&lt;/a>&lt;/i> is also vital in organizing the model and categorizing&#xD;
    services as the portfolio is developed.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Categorization&quot; name=&quot;Categorization&quot;>Categorization of Services&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    During early stages of service identification (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
    guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>) it is common for candidate services to be&#xD;
    captured as simply a list of names, possibly structured as a hierarchical list or stored in a spreadsheet. Such a list&#xD;
    is useful when working in a workshop environment and eliciting candidate services from source material. As the number&#xD;
    of candidate services increases, an unstructured list can quickly become unmanageable. Therefore, as soon as possible a&#xD;
    service categorization scheme should be identified so that candidate services can be organized into groups within the&#xD;
    category hierarchy.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    While a simple list of service names can be a quick starting point, it will eventually be important to capture&#xD;
    additional information about each service. This information can be subdivided into two types: information that supports&#xD;
    service identification, and information that supports service specification. Service identification is focused on&#xD;
    building a portfolio of services that can be associated with business functions, business goals, assets such as&#xD;
    existing systems, and an indication of whether the service is considered a candidate service, or has been chosen for&#xD;
    exposure.The service portfolio template can be used to document services at the level of detail needed in the service&#xD;
    portfolio.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important to be able to categorize the services in the portfolio in a number of ways, but most commonly we use&#xD;
    terminology that describes the service's purpose, ownership or organization. To support this categorization or&#xD;
    classification each Service Partition has a Classification property that can be used to denote the classification kind,&#xD;
    the name of the partition becomes a value in that classification scheme.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, the following diagram (or some variant) has been developed by a number of companies to help visualize the&#xD;
    &quot;types&quot; of services in the portfolio.Note that this categorization, while common, is simply one possible way to segment&#xD;
    the service portfolio. In this example each partition is named with its classification property set to &quot;zone&quot;.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;253&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_portfolio-01.gif&quot;&#xD;
    width=&quot;337&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>User Interaction Services&lt;/b> are used to describe how the user interacts with the application; for example,&#xD;
        for&amp;nbsp;a service that may need to assign work to a human user there needs to be services that know how to notify&#xD;
        the user of this work and then notify the originating service of the work completion.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Application-Specific Services&lt;/b> are services that are developed as a part of a development activity that have&#xD;
        been deemed as not appropriate for reuse and so are not considered a part of the portfolio. It is also possible&#xD;
        that, as services are composable entities, that a service may be part of the portfolio yet nested services it uses&#xD;
        are not published.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Process Integration Services&lt;/b> are services, usually provided by commercial middleware, that provide the&#xD;
        choreography of services so that processes can be enacted in the middleware and utilize the services in the&#xD;
        portfolio to implement a process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Information Integration Services&lt;/b> are again commercial middleware services that provide services for the&#xD;
        mediation of data formats and message content between services; for example a customer message can be generated by&#xD;
        the service which is an aggregation of data retrieved from other services in the portfolio.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Business Services&lt;/b> are those services specific to the business, developed for the business and providing&#xD;
        direct support to the applications developed to support the business. Examples might be CustomerMgmt, Inventory,&#xD;
        HR, etc.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Infrastructure Services&lt;/b> are services that provide common IT functions required not only by the Business&#xD;
        Services but by the integration services as well. Examples might be Messaging, Directory, Authentication, Legacy&#xD;
        access, etc.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more examples of classification kinds see the concept &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/solution_partitioning_352116F8.html&quot;&#xD;
    guid=&quot;1.6501323286225543E-305&quot;>Service Partitioning.&lt;/a>&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Service_Repositories&quot; name=&quot;Service_Repositories&quot;>Service Repositories&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    So, apart from a model of the service portfolio it is important that Designers and Developers have access to service&#xD;
    specifications in a detailed fashion at design and implementation. It is also possible for multiple services to&#xD;
    implement the same specification and so a registry allowing queries of the form &quot;all services implementing the&#xD;
    IOrdering specification&quot; allows for developers to compose solutions from existing services, and integration developers&#xD;
    to identify which services to use to satisfy business or technical requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Service repositories are also able to use the classification values introduced using the service partitions above to&#xD;
    pre-populate the values as metadata describing the services held by the repository.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, a solution may call for a shipping service, the registry may identify 3 services that provide shipping,&#xD;
    two provide secure message exchange but one only does so over Java Message Service (JMS) while the other provides SOAP&#xD;
    over HTTP. Business requirements only specify that customer information be kept private and so a secure message&#xD;
    exchange is required, IT standards recommend that JMS not be used to a remote service and so we have narrowed down our&#xD;
    choice.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following presents some of the technical implementations available currently for service registries.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>UDDI&lt;/b>; The web services standard registry, this has wide adoption and was intended to support both&#xD;
        development and integration time queries. However, the level of customization required to keep track of all of the&#xD;
        data associated with a service specification has certainly led to some questions about whether UDDI as it stands&#xD;
        today is enough to support the enterprise service portfolio we discuss here.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>RAS Repository&lt;/b>; The Reusable Asset Specification was intended to support a customizable metadata description&#xD;
        for reusable assets, and does have a metadata profile for web services. While it was not the intent for RAS to&#xD;
        provide a service portfolio it would be possible to do so for development time metadata although it is not&#xD;
        currently appropriate for integration time queries.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Custom&lt;/b>; Many organizations, faced with these choices, have chosen to implement custom service repositories,&#xD;
        managing a set of metadata or design documents for services at design time and associated web service artifacts for&#xD;
        implementation time. In most cases a separate UDDI repository is then used when deploying production services for&#xD;
        integration time queries.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
