<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_qrzpQPS3EdmIX5Pw7v8pRw" name="service_composition_and_choreography,7.723783423994501E-306" guid="_qrzpQPS3EdmIX5Pw7v8pRw" changeDate="2006-10-31T21:43:08.739-0800" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One key aspect of Service-Oriented Architecture (SOA) is that services be composable, which means that a new service is&#xD;
    often composed as a collaboration between a set of existing services. In many respects this is true of existing&#xD;
    component-based and object-oriented techniques, except that certain capabilities in the middleware being used to&#xD;
    develop service-oriented solutions allows the direct execution of these collaborations through standards such as&#xD;
    &lt;i>Business Process Execution Language for Web Services&lt;/i> (BPEL4WS, WS-BPEL or just BPEL). It is this ability to&#xD;
    compose services structurally, that is to define the usage dependencies between services, and also to compose services&#xD;
    behaviorally that makes a services-based architecture and IT strategy attractive to so many organizations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    More and more organizations are realizing the need for increased agility in their ability to respond to changing&#xD;
    business environments, whether it's the pressure of globalization, new markets and channels, or simply new competitors&#xD;
    using technology more efficiently. These organizations are looking towards service-oriented development and&#xD;
    service-oriented solutions as a way to organize their IT assets to address current requirements and provide an&#xD;
    infrastructure of business-aligned functions that can be reused, reconfigured, and recombined efficiently and&#xD;
    effectively to address future requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another aspect of the ability to compose services in this manner is that it provides a flexible way to incorporate&#xD;
    existing IT assets into new solutions in the same manner as newer assets. For example, existing assets, even those&#xD;
    developed for mainframe platforms and similar, can be exposed as services with some middleware products and integrated&#xD;
    in the same way as new services developed using J2EE, IBM WebSphere or Microsoft .NET. Unfortunately, most existing&#xD;
    assets tend not to be developed with interfaces that adhere to much of the guidance we would use for new services. As&#xD;
    such, it is useful to create composite services that do not just wrap these existing services, but rather provide&#xD;
    different, more business-aligned interfaces that leverage the existing functions by aggregating and choreographing them&#xD;
    to provide the higher-level capability.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Service Choreography&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Let us look briefly at the term &lt;i>Choreography&lt;/i>. This is the term used in many middleware products to denote the&#xD;
    managed execution of some script denoting a process flow where the participants are services and the tasks are message&#xD;
    exchanges. In some products, the term &lt;i>Orchestration&lt;/i> is used. While some industry analysts and technologists&#xD;
    describe differences in the meaning of the words and how these terms are used in standards, for most users the&#xD;
    differences are much less interesting than the similarities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In terms of standards, a common way to represent the choreography of Web Services was late in coming, after most of the&#xD;
    leading middleware vendors introduced proprietary solutions. The current industry standard is the Business Process&#xD;
    Execution Language for Web Services (BPEL4WS or BPEL). For more information on BPEL4WS, see the &lt;i>&lt;a&#xD;
    href=&quot;http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbpel&quot;>OASIS WSBPEL site&lt;/a>&lt;/i> or the &lt;i>&lt;a&#xD;
    href=&quot;http://www.ibm.com/developerworks/library/specification/ws-bpel/&quot;>IBM BPEL site&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Composite_Structures&quot; name=&quot;Composite_Structures&quot;>Services as Composite Structures&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Services can easily be developed upon the functions provided by other services in a recursive manner, as shown in the&#xD;
    diagram below, where services can identify those services they rely upon. In this case, a composite service is using&#xD;
    the order entry and Electronic Data Interchange (EDI) gateway services. Composite services are often used where the&#xD;
    usual factoring of service capabilities identifies common functions that may be provided in more than one circumstance.&#xD;
    For some services, where the role is more to provide infrastructure capabilities (such as the EDI service below), this&#xD;
    is relatively easy to identify. In other cases, detailed service collaborations will identify the need to split a&#xD;
    candidate service into more than one actual service.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;144&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-06.gif&quot;&#xD;
    width=&quot;287&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One important use of composite services is in the provision of functions realized by existing (legacy) assets. In most&#xD;
    cases, such capabilities will be accessed via connectors or APIs provided by the asset itself and a new service will be&#xD;
    developed which relies on these assets for some logic. On the other hand, to allow the aggregate component to evolve&#xD;
    more flexibly and to allow the existing asset to be swapped out in the future for a different implementation, an&#xD;
    alternative strategy can be used. In this case, each existing function is exposed as an independent service, these&#xD;
    services are then used by the composite service allowing for both the existing asset, and the composite services to&#xD;
    evolve independently.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another use of composite services is where the set of actual services leveraged by a composite service are not known in&#xD;
    advance. For example, in the case of an order management service we might identify the need to separate out the order&#xD;
    validation as a separate set of independent business rule services such that new rules can be added at a future date.&#xD;
    This is related to the topic of service mediation (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/guidelines/service_mediation_2F2C4C02.html&quot;&#xD;
    guid=&quot;2.5614739075754752E-306&quot;>Guideline: Service Mediation&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Obviously such a approach has benefits but it also has drawbacks. If the low-level service may only be exposed via&#xD;
    Internet protocols such as SOAP/HTTP, it is likely to be less reliable and have poorer performance than if accessed via&#xD;
    a native API or connector. These tradeoffs have to be a part of the general set of architectural decisions made and&#xD;
    documented as part of any service design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on both existing asset access and the relationship between candidate and actual services see the&#xD;
    &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
    guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Service_Collaborations&quot; name=&quot;Service_Collaborations&quot;>Service Collaborations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In modeling the behavior of composite services we use the notion of a&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_collab_76358B24.html&quot;&#xD;
    guid=&quot;{9BBBE5B0-4D39-4555-9E20-0ADBD8327D29}&quot;>Artifact: Service Contract&lt;/a> during the identification and design&#xD;
    phases.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        During the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
        guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>, we use the collaboration as a tool to&#xD;
        describe the roles and responsibilities of candidate services. For example, we might identify the need for separate&#xD;
        order validation and order management services, but how do they communicate, and what information are they&#xD;
        responsible for? A service collaboration is used as a tool to describe this communication and we can identify&#xD;
        required message exchanges from the resulting model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        During the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../soa.rup_soma/tasks/soa_service_specification_AB6BA763.html&quot;&#xD;
        guid=&quot;{9EB2B302-79F6-4DF8-AEB7-98E6AC1756DD}&quot;>Task: Service Specification&lt;/a>, we use the collaboration to define&#xD;
        the concrete behavior of a given service or operation on a service. For example, the order validation example above&#xD;
        could be described concretely as a set of messages sent to a set of validation rule services.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In this way, we can see that a Service Collaboration in the service-design task is directly related to the notion of&#xD;
    choreography in web services terms. It represents a configurable, externalized flow description sequencing a set of&#xD;
    message exchanges between services. In most middleware implementing choreography, the flow is described in an XML&#xD;
    language such as BPEL. Such a language could be generated from the service collaboration described in the&amp;nbsp;&lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Artifact: Service Model&lt;/a> when the flow itself is described with UML&#xD;
    2.0 Activities or Interactions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Collaboration is comprised of a composite structure providing the view of the collaborators and their connections&#xD;
    as well as a behavior denoting the messages exchanged and their sequencing. The diagram above showing a&#xD;
    CompositeProvider demonstrated a composite structure, as does the Order Validation picture below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;170&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-07.gif&quot;&#xD;
    width=&quot;531&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This is not the structure of the validation provider itself, but the structure of the service collaboration, as shown&#xD;
    in the diagram below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;234&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-09.gif&quot;&#xD;
    width=&quot;496&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Specifying Service Behavior&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As stated above, it is most common to use either UML 2.0 Activities or Interactions, specifically Sequence Diagrams, to&#xD;
    describe the flow of messages between services in a collaboration. The diagram below is a UML 2.0 Activity Diagram&#xD;
    demonstrating the behavior of the order validation service. For a given order, the validation registry service provides&#xD;
    a list of actual validation operations to call.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;310&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-08.gif&quot;&#xD;
    width=&quot;458&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that such behavior can be identified for a complete service or on a per-operation basis depending on the needs of&#xD;
    the service. In this case, the Activity within the Collaboration is related to the Validate() operation (via the&#xD;
    specification/method association in UML 2.0).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Specifying Service Bindings&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As we saw above, the bindings (actual physical protocols and message encodings) used to communicate between services&#xD;
    are identified as a property of the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_chan_BB29CCA8.html&quot;&#xD;
    guid=&quot;{95AA7C70-6259-4627-B705-6A67E33A47BC}&quot;>Artifact: Service Channel&lt;/a> in the composition view. Actual bindings&#xD;
    used between services have significant impact on non-functional requirements such as performance, reliability, and&#xD;
    security. So, the available choices should be documented with the consequences of each identified within the overall&#xD;
    system architecture. For example, it may be that one use of&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_partn_DC19AD3F.html&quot;&#xD;
    guid=&quot;{C302AF5A-1591-4F26-94E5-C412866553BF}&quot;>Artifact: Service Partition&lt;/a> is to represent allowable or required&#xD;
    binding between services within the partition - a common requirement being that services within some logical&#xD;
    &lt;i>zone&lt;/i> communicate using high-performance, yet proprietary binding whereas communication with services outside of&#xD;
    the &lt;i>zone&lt;/i> use lower performance but standardized bindings.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    People often wonder if capabilities required for Web service performance, reliability, and scalability can be provided&#xD;
    by an architecture based on HTTP and SOAP, which are inherently slow and unreliable. First, &quot;slow and unreliable&quot; must&#xD;
    be defined, then it must be realized that even reliable transports rely on unreliable means. For example, when using&#xD;
    SOAP over HTTP, it is always possible to build application-level protocols and interactions that provide additional&#xD;
    capabilities for message acknowledgements and security. However, if one considers that certain services communicate&#xD;
    within the same security or application context, we might consider using different means than HTTP.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is very important to realize that even though Web services present a simple model and a set of simple, flexible&#xD;
    protocols, you are not restricted to these choices. Just as WSDL already has bindings for both SOAP and HTTP GET/PUT,&#xD;
    it is important to provide requestors with additional choices. For example, a single service may expose a message using&#xD;
    a message-queue binding and a SOAP binding so the requestor can choose the more appropriate binding to use. In this&#xD;
    case, the provider may also provide incentives such as a guaranteed service level if the message queue is used but no&#xD;
    service guarantees for an HTTP conversation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Taking the order validation example above, we can see how the bindings are associated with the stereotype&amp;nbsp;&lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_chan_BB29CCA8.html&quot;&#xD;
    guid=&quot;{95AA7C70-6259-4627-B705-6A67E33A47BC}&quot;>Artifact: Service Channel&lt;/a> and visualized on the diagram below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;113&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-10.gif&quot;&#xD;
    width=&quot;416&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When architecting and designing enterprise-scale solutions, we must always remember the functional and nonfunctional&#xD;
    requirements and ensure that the correct trade-offs and decisions are made to support the business goals.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
