<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-WVb4w641-xMWls_2j_x-Pw" name="new_guideline,_p_6wsExREdumvs0NuKFubw" guid="-WVb4w641-xMWls_2j_x-Pw" changeDate="2006-12-19T15:03:20.427-0800" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In decomposing a service component into its constituent functional and technical components, we have delegated the&#xD;
    functionality provided by the service component to fulfill the subsystem's&amp;nbsp;functional responsibilities. Functional&#xD;
    components supply the business functionality required, while technical components provide generic functionality such as&#xD;
    authentication, error handling, auditing, logging, etc which are operational and non-functional oriented.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A service model is a design-time artifact. As such, it does not deal directly with the implementation of services.&#xD;
    However, the actual implementation of a service or set of services is strictly performed by a service component's&#xD;
    realization of a service specification. The service specification provides the implementation contract; the technology&#xD;
    or techniques used to implement the service are irrelevant as long as the contract is fulfilled. In the concept &lt;a&#xD;
    class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service-oriented_architecture_8328ABAD.html&quot;&#xD;
    guid=&quot;8.613638237693525E-307&quot;>&lt;em>Service-Oriented Architecture&lt;/em>&lt;/a>, we introduced the following picture&#xD;
    demonstrating the relationship between the services we identify and the components and objects that provide the&#xD;
    implementation of these services.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;241&quot; alt=&quot;Diagram described in associated text&quot; src=&quot;./../concepts/resources/co_soa_soa-01.gif&quot;&#xD;
    width=&quot;241&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this way, we can see how the RUP &lt;i>&lt;a class=&quot;elementlink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot; guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design&#xD;
    Model&lt;/a>&lt;/i> can be used to capture the design of the component and object layers, with implementation models and&#xD;
    artifacts capturing details of the object layer and associated implementation and deployment artifacts. Important&#xD;
    aspects of the relationship between the &lt;i>&lt;a class=&quot;elementlink&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Service Model&lt;/a>&lt;/i> and the component design model are that the set of&#xD;
    service specifications represent contracts that must be fulfilled, operations identified on specifications must be&#xD;
    implemented as-is, and that consumers of services are using this same model to understand the interface and behavior of&#xD;
    the services they expect to use. As such, there is a direct and in general a one-to-one relationship between the&#xD;
    service specification and some implementation artifact that acts as the initial implementation entry point for the&#xD;
    service.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, consider the following diagram of a service provider showing the details of model elements used in its&#xD;
    definition.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;139&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-02.gif&quot;&#xD;
    width=&quot;246&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The key to the use of the service component is that it should be directly traceable to the service model. The easiest&#xD;
    way to accomplish this is to make use of the fact that the service specification element is a UML Interface that can be&#xD;
    realized by the service component, thus ensuring its conformance to the structural specification. In this way we would&#xD;
    get the following result:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;74&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-03.gif&quot;&#xD;
    width=&quot;406&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is now the responsibility of the component implementer to define a set of components and classes that provide the&#xD;
    behavior of the resulting component.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Kinds of Service Components&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    Functional Components&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The composition of these functional components into a larger-grained service component is not merely structural; it&#xD;
    also involves the definition of flow, that is, the collaboration of the functional components to provide functionality&#xD;
    to support the business processes. As we have seen earlier, the functionality of these business-related components is&#xD;
    enabled through the services (implemented by the component's finer level object or legacy system structure) defined.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important to note that this step includes traditional OOAD activities. We have a focused and well-partitioned&#xD;
    scope to direct the object design. In traditional object-oriented design, we tend to create larger more dependent&#xD;
    object graphs, whereas if subsystem analysis follows the identification of functional areas within the business, we&#xD;
    have a very clearly defined scope to focus on and direct our design energies towards. These results in a set of more&#xD;
    loosely coupled object models (class diagrams and sequence diagrams triggered by system use cases).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Technical components&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    &lt;span style=&quot;mso-bidi-font-style: italic&quot;>The composition of technical components into larger-grained service&#xD;
    components occurs in the same fashion as functional components.&lt;/span> &lt;span&#xD;
    style=&quot;mso-bidi-font-style: italic&quot;>Technical components such as authentication, logging and reporting may be used&#xD;
    across business processes. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>These common components are needed to form the&#xD;
    infrastructure to support the functional components. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>One of the key&#xD;
    variations across business processes is due to business rules as shown below&amp;nbsp;in figure &quot;Enterprise Component&#xD;
    Pattern&quot;.&lt;/span> &lt;span style=&quot;mso-bidi-font-style: italic&quot;>These variations are typically captured during&#xD;
    Variation-Oriented Design.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Service Component Patterns&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Having said that the service component simply realizes the service specification does not provide the implementer with&#xD;
    much assistance in going from a coarse-grained service definition to a set of fine-grained implementation classes and&#xD;
    artifacts required to provide the behavior of the service. In this regard, it is common to rely on patterns that&#xD;
    provide structure to the resulting service component, either as a starting framework or specific patterns to address&#xD;
    particular policy requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Pattern choice, driven by NFR, architecture [more]&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that the additional stereotypes introduced here are described in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_component_E259F3CC.html&quot;&#xD;
    guid=&quot;{447385A0-E565-4C87-A082-402AF21CA088}&quot;>Artifact: Service Component&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Base Service Component Pattern&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In defining the initial structure of a service, the following pattern is provided as a starting point for customization&#xD;
    and completion.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;106&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-04.gif&quot;&#xD;
    width=&quot;578&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The elements of the pattern are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Facade Component&lt;/b>; the facade realizes the same interface as the service component itself and provides basic&#xD;
        capabilities for message validation before passing the request on to the per-operation components for execution. In&#xD;
        this case we stereotype the component as &amp;lt;&amp;lt;facade&amp;gt;&amp;gt; for clarification.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Per-Operation Component&lt;/b>; given the granularity of services, it is useful in most cases to have a separate&#xD;
        component/class for the implementation of each operation provided by the service.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The following demonstrates the composite structure view of this pattern. In this case, the facade is delegated to by&#xD;
    the service component itself. As such, consumers calling operations on the service component are actually serviced by&#xD;
    the facade component. Note that it would be possible to use UML 2.0 ports as well to expose the interfaces and make&#xD;
    this delegation explicit using connectors.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;119&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-05.gif&quot;&#xD;
    width=&quot;274&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Single Operation Service Component Pattern&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In some cases where services are identified in the Service Model with multiple operations, it is more appropriate to&#xD;
    implement the operations individually as stand-alone services separating the logical service and physical service&#xD;
    views. Such a pattern has advantages in terms of flexibility of sourcing, high availability, versioning, and evolution&#xD;
    but does lose the notion of an interface to a service as a set of related operations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Modeling service components according to this pattern has a single &amp;lt;&amp;lt;Service Component&amp;gt;&amp;gt; realizing a single&#xD;
    interface with a single operation, all named according to common conventions and demonstrated below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;113&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-12.gif&quot;&#xD;
    width=&quot;394&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this case, as we mentioned, there is no direct realization of the original service specification by any one element&#xD;
    in the pattern above. Therefore, it seems worthwhile to introduce an element in the model that can provide traceability&#xD;
    back to the service specification. In the example below, we have introduced a component, stereotyped&#xD;
    &amp;lt;&amp;lt;subsystem&amp;gt;&amp;gt; that is noted as implementing the service specification and also owning the elements&#xD;
    described above.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;49&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-11.gif&quot;&#xD;
    width=&quot;326&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This pattern also does not introduce the &amp;lt;&amp;lt;facade&amp;gt;&amp;gt; component because consumers of the services are&#xD;
    responsible for identifying the services they use.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Mediated Operation Pattern&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Where there is the possibility that a service consumer's request may be routed to one of a selection of operation&#xD;
    components for execution, it is possible to extend the pattern with a mediator to route these messages, as shown below.&#xD;
    Note we stereotype the component/class as &amp;lt;&amp;lt;mediator&amp;gt;&amp;gt; for clarification. The exact mechanism used for&#xD;
    mediation is undefined. A static set of implementations could be known ahead of time, a registry of some sort could&#xD;
    also be used to map to the particular implementation based on the consumer, content of the request message, and so&#xD;
    forth. This pattern is not intended for use with the single-operation pattern shown above.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;144&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-06.gif&quot;&#xD;
    width=&quot;390&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This also affects the composite structure view of the service component; as shown below, the mediator connection is&#xD;
    shown from the facade which uses it to direct calls to the operation components.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;177&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-07.gif&quot;&#xD;
    width=&quot;285&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If a registry, external to the mediator itself, is used, it is not necessarily possible to show static usage&#xD;
    dependencies from the mediator to the operation components or connectors between parts in the composite structure&#xD;
    diagram. So, how can we model a dependency from the mediator to the mediated operation components? In the following&#xD;
    diagram, we have introduced an interface to be implemented by each operation component. We can then model the usage&#xD;
    from the mediator to the interface, as shown below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;74&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-09.gif&quot;&#xD;
    width=&quot;550&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    We also change the relationship in the composite structure diagram, including a new part typed by the interface, and&#xD;
    denote the multiplicity between the mediator and operation components on the connector, as shown below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;176&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-10.gif&quot;&#xD;
    width=&quot;282&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Data Access Components&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Additionally, where service operations share common data requirements, it may be useful to highlight the specific&#xD;
    components providing data management capabilities to the implementation. Note we stereotype the component/class as&#xD;
    &amp;lt;&amp;lt;data access&amp;gt;&amp;gt; for clarification.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;106&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_components-08.gif&quot;&#xD;
    width=&quot;534&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    The Enterprise Component Pattern&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Enterprise Component Pattern below shows the service component acting as a facade for the underlying functional and&#xD;
    technical components. Services are exposed on the edge of the service component at the component facade. Requests for&#xD;
    services on the facade are forwarded to a mediator which then routes the message to the appropriate functional or&#xD;
    technical component.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;347&quot; alt=&quot;Diagram described in associated text&quot; src=&quot;./resources/technique_fig57.gif&quot; width=&quot;568&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;-2&quot;>&lt;strong>Enterprise Component Pattern&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The dependencies and needs of the functional components to the technical components, for the Rent-a-car example, are&#xD;
    depicted below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;388&quot; alt=&quot;Diagram described in associated text&quot; src=&quot;./resources/technique_fig58.gif&quot; width=&quot;482&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;-2&quot;>&lt;strong>&lt;em>Rent-a-car&lt;/em> reservation service component using the enterprise component&#xD;
    pattern&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The collection of subsystem component models is gathered into the functional component model which shows the reliance&#xD;
    of the functional components on the technical components, and the inter-relationships between the functional components&#xD;
    themselves. Leaf-level sub-processes that are assigned to the subsystem facade need to be specified as services the&#xD;
    subsystem will provide. These sub-processes are supported and implemented through a finer grained set of system use&#xD;
    cases encapsulated within the structure of the subsystem. The functional components are relied upon for the realization&#xD;
    of the use cases. In turn the functional components depend on the technical components and utilities for their&#xD;
    infrastructure needs.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
