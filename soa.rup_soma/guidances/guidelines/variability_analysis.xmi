<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-uGIASEMhshEKX0hP5Ti1Ag" name="new_guideline,_dyVEgDJdEduxsZm92FKuLw" guid="-uGIASEMhshEKX0hP5Ti1Ag" changeDate="2006-12-19T15:08:28.940-0800" version="1.0.0">
  <mainDescription>&lt;h3 align=&quot;left&quot;>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The service designer must be aware that in forming a &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
    guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>Artifact: Service Specification&lt;/a>&amp;nbsp;they have to balance two&#xD;
    competing forces;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Specialization&lt;/strong>; the need to ensure that a service does what is required of it, fulfilling the&#xD;
        function identified during the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
        guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Generalization&lt;/strong>; the need to ensure that a service is as reusable as possible, in that future&#xD;
        requirements do not require major redesign of existing services.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    To this end, the designer may employ techniques commonly termed &quot;Commonality and Variability&quot; analysis. These&#xD;
    techniques have been known and documented for some time, predominantly in the area of pattern formulation [Coplien,&#xD;
    Gabriel] and software product line engineering [GBS, JGBS01, JB02, MRR04, Parnas, SBM01]. These are areas where the&#xD;
    designer is also balancing these same forces in patterns -&amp;nbsp;the need to capture the variability as parameters for&#xD;
    the pattern, to allow for the pattern's applicability in different situations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the literature on patterns [Coplien] describes commonality as &quot;&lt;em>the essence of an abstraction&quot;&lt;/em>, and&#xD;
    variability as &quot;&lt;em>the spice of life&lt;/em>&quot; while [Gabriel] more concretely describes the relationship between&#xD;
    commonality and abstraction --&amp;nbsp;a good abstraction needs to capture the &lt;i>common&lt;/i> aspects across the solution&#xD;
    while specifying the &lt;i>variabilities&lt;/i> of individual elements.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;em>Abstraction in programming is the process of identifying common patterns that have systematic variations; an&#xD;
    abstraction represents the common pattern and provides a means for specifying which variation to use.&lt;/em>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In&amp;nbsp;similar terms&amp;nbsp;[Parnas] defines a &lt;em>family&lt;/em> of programs (we would tend to describe in terms of&#xD;
    software product lines today) based on the common properties of the set and the special properties of the individual&#xD;
    members:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;em>We consider a set of programs to constitute a&lt;/em> family&lt;em>, whenever it is worthwhile to study programs from the&#xD;
    set by first studying the common properties of the set and then determining the special properties of the individual&#xD;
    family members&lt;/em>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    Capturing Variability&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Many systems are built with very little foresight for incorporating changes resulting from new requirements.&#xD;
    Commonality and Variability Analysis creates a resilient design that is far more adaptive to change. This is done by&#xD;
    avoiding the hard-coding or hard-designing of aspects of the domain that are anticipated to change through the process&#xD;
    of &lt;i>externalization&lt;/i>: separating out the more rapidly changing aspects of the functional and structural aspects of&#xD;
    the domain from the more stable, non-changing aspects. This technique allows the system's design to evolve and grow due&#xD;
    to new requirements without intrusive alterations. During analysis, commonalities and variabilities are modeled in&#xD;
    terms of Type Hierarchies. Each point of variabilityis identified and externalized. For example, the instances of&#xD;
    variation such as &lt;em>Organizational Customer&lt;/em> and &lt;em>Individual Customer&lt;/em> can be modeled as two realizations&#xD;
    of a &lt;em>Customer Type&lt;/em> that can then be expanded as needed. The externalized type (e.g., Customer Type) is&#xD;
    associated with Customer Rules that span all customers and allow refinements and extensions to be made through specific&#xD;
    Rule Types for each type of Customer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The first step in the analysis is the identification of dependencies on Type from both functional (static) and process&#xD;
    (dynamic) perspectives. Identifying types of processes that rely on types of entities (functional) is a good heuristic&#xD;
    for the design refactoring:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identify common elements of function and process (e.g. Reservation business process).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Separate changing from less changing aspects. Identify key types related to function and process that are&#xD;
        anticipated to change or are dependent (Reservation Type varies based on Customer Type&amp;nbsp;-- if Customer Type&#xD;
        changes, Reservation Type may change as a result).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Externalize the variations and create type hierarchies with known instances (Frequency Type is Preferred or&#xD;
        Regular, Party is Organizational or Individual).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These variability points are a key part of building systems that are resilient and adaptive. By externalizing&#xD;
    variability points, we can modify them without impacting the rest of the design. Thus, the ripple effect of change is&#xD;
    contained and constrained by the variability points. A UML class diagram showing this hierarchy provides a roadmap for&#xD;
    detailed design and ultimately, implementation.&#xD;
&lt;/p>The basic principles of&amp;nbsp;commonality and variability design are therefore: &lt;br />&#xD;
&lt;br />&#xD;
&lt;ol style=&quot;MARGIN-TOP: 0in&quot; type=&quot;1&quot;>&#xD;
    &lt;li>&#xD;
        Separate changing from non-changing aspects of a domain&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Separate the interface from implementation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reify what changes. If some element of the domain is in constant flux, then it may be warranted to reify that&#xD;
        element into a class (or higher layer of reuse).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Build assets at each reuse level. The Reuse Levels are: base class, inheritance hierarchy, aggregation hierarchy,&#xD;
        cluster, framework, component, pattern, generic architecture.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each reuse element has its own rules of behavior in addition to the meta-data necessary to reflectively and&#xD;
        adaptively self-describe the Reuse Element for run-time queries for service capabilities&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    References&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    [Arsanjani]&amp;nbsp;&amp;nbsp;&amp;nbsp; A. Arsanjani. &lt;em>Rule Object: A Pattern Language for Flexible Modeling and Construction&#xD;
    of Business Rules.&lt;/em> Washington University Technical Report number:&amp;nbsp; wucs-00-29, Proceedings of the Pattern&#xD;
    Languages of Program Design, 2000.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [Coplien]&amp;nbsp;&amp;nbsp;&amp;nbsp; J. O. Coplien. &lt;em>Multi-Paradigm Design for C++.&lt;/em> Addison-Wesley Professional; 1st&#xD;
    edition, 1998.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [Gabriel]&amp;nbsp;&amp;nbsp;&amp;nbsp; R. P. Gabriel. &lt;em>Patterns of Software: Tales from the Software Community&lt;/em>. Oxford&#xD;
    University Press, 1998.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [GBS]&amp;nbsp;&amp;nbsp;&amp;nbsp; J. van Gurp, J. Bosch and M. Svahnberg. &lt;em>Managing Variability in Software Product&#xD;
    Lines&lt;/em>. &lt;a href=&quot;http://citeseer.ist.psu.edu/568368.html&quot;>http://citeseer.ist.psu.edu/568368.html&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [GHJV]&amp;nbsp;&amp;nbsp;&amp;nbsp; E. Gamma, R. Helm, R. Johnson, J. Vlissides. &lt;em>Design Patterns&lt;/em>. Addision-Wesley 1994.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [JGBS01]&amp;nbsp;&amp;nbsp;&amp;nbsp; J. van Gurp, J. Bosch, and M. Svahnberg. &lt;em>On the notion of variability in&amp;nbsp;software&#xD;
    product lines&lt;/em>. In Proceedings 2nd Working IEEE / IFIP Conference on Software Architecture (WICSA), pages 45--54.&#xD;
    IEEE Computer Society, 2001. &lt;a&#xD;
    href=&quot;http://citeseer.ist.psu.edu/vangurp01notion.html&quot;>http://citeseer.ist.psu.edu/vangurp01notion.html&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [JB02]&amp;nbsp;&amp;nbsp;&amp;nbsp; M. Jaring, J. Bosch, &lt;em>Representing Variability in Software Product Lines: A Case&#xD;
    Study&lt;/em>, to appear in the Second Product Line Conference (SPLC-2), San Diego CA, August 19-22, 2002. &lt;a&#xD;
    href=&quot;http://citeseer.ist.psu.edu/jaring02representing.html&quot;>http://citeseer.ist.psu.edu/jaring02representing.html&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [MRR04]&amp;nbsp;&amp;nbsp;&amp;nbsp; Jurgen Meister, Ralf Reussner, and Martin Rohde. &lt;em>Managing Product Line Variability by&#xD;
    Patterns&lt;/em>. &lt;a&#xD;
    href=&quot;http://se.informatik.uni-oldenburg.de/pubdb_files/pdf/ManagingProductLineVariabilityByPatterns-Final.pdf&quot;>http://se.informatik.uni-oldenburg.de/pubdb_files/pdf/ManagingProductLineVariabilityByPatterns-Final.pdf&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [Parnas]&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span class=&quot;m&quot;>&lt;span class=&quot;h&quot;>D. L. Parnas. &lt;em>On the Design and Development of Program&#xD;
    Families&lt;/em>. IEEE Transactions on Software Engineering, SE-2(1):1--9, 1976.&lt;/span>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [SBM01]&amp;nbsp;&amp;nbsp;&amp;nbsp; A. Stephenson, D. Buttle and J. McDermid. &lt;em>Extending Commonality Analysis for Embedded&#xD;
    Control System Families&lt;/em>. Lecture Notes in Computer Science, Volume 1951, 2001. &lt;a&#xD;
    href=&quot;http://citeseer.ist.psu.edu/stephenson51extending.html&quot;>http://citeseer.ist.psu.edu/stephenson51extending.html&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    [SGB01]&amp;nbsp;&amp;nbsp;&amp;nbsp; M. Svahnberg, J. van Gurp, J. Bosch, &lt;em>A Taxonomy of Variability Realization&#xD;
    Techniques&lt;/em>, submitted June 2001. &lt;a&#xD;
    href=&quot;http://citeseer.ist.psu.edu/svahnberg01taxonomy.html&quot;>http://citeseer.ist.psu.edu/svahnberg01taxonomy.html&lt;/a>&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
