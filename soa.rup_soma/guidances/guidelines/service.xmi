<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q1jbIPS3EdmIX5Pw7v8pRw" name="service,2.1757522381974088E-306" guid="_q1jbIPS3EdmIX5Pw7v8pRw" changeDate="2006-10-31T23:18:51.316-0800" version="1.0.0">
  <mainDescription>&lt;a id=&quot;XE_service__guidelines_for&quot; name=&quot;XE_service__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A service is the key artifact in a &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service-oriented_architecture_8328ABAD.html&quot;&#xD;
    guid=&quot;8.613638237693525E-307&quot;>Service-Oriented Architecture&lt;/a>&lt;/i>, but what is a service? The following is the entry&#xD;
    from the Rational Unified Process (RUP) glossary.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;i>A service is a software resource (discoverable) with an externalized service specification. This service&#xD;
    specification is available for searching, binding, and invocation by a service consumer. The service provider realizes&#xD;
    the service specification implementation and also delivers the quality of service requirements to the service consumer.&#xD;
    Services shall be governed by declarative policies and thus support a dynamically re-configurable architectural&#xD;
    style.&lt;/i>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    And, while the following section outlines some of the key statements in the entry above, it is worth noting an&#xD;
    additional aspect of services that really differentiate them from design elements in previous technologies; services&#xD;
    are at a level of granularity that allows them to be identified from a business level. Thus below we will also discuss&#xD;
    the business aligned nature of services.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Discoverable&quot; name=&quot;Discoverable&quot;>Discoverable&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Services are not a part of a monolithic application architecture. They exist independently at run time from any and all&#xD;
    other services within a given solution. This means that we require a method for the registration and discovery of&#xD;
    services based on criteria such as the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
    guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>Artifact: Service Specification&lt;/a> it realizes, its &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_provider_C00D3410.html&quot;&#xD;
    guid=&quot;{8427751F-3C14-4CEB-9816-5112BDB91EED}&quot;>Artifact: Service Provider&lt;/a>, as well as other business and technical&#xD;
    classifications. This discovery process may take place during development time to match given services to supporting&#xD;
    services or it may take place at run time to enable the dynamic provisioning of services (mediated invocation). To be&#xD;
    discoverable, a service must provide a set of metadata that allows categorization. This metadata is a part of the&#xD;
    external specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, see the&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service_portfolio_52FD64AC.html&quot;&#xD;
    guid=&quot;1.851952881072508E-305&quot;>Concept: Service Portfolio&lt;/a> and the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/guidelines/service_mediation_2F2C4C02.html&quot;&#xD;
    guid=&quot;2.5614739075754752E-306&quot;>Guideline: Service Mediation&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Externally_Described&quot; name=&quot;Externally_Described&quot;>Externally&lt;/a> Specified&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The external specification allows for a service to publish its details such as interface, location, policies,&#xD;
    classifications, and so on without the need for a client to have access to the service itself. Such information is then&#xD;
    usually stored in a known location or specialized service registry that supports queries of the metadata. Currently in&#xD;
    the Web Services world, the accepted standard for the description of service interfaces is WSDL (&lt;a&#xD;
    href=&quot;http://www.w3.org/TR/wsdl&quot;>Web Services Description Language)&lt;/a>, which comes from the World Wide Web&#xD;
    Consortium.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The service specification work product is actually a combination of three parts: the interface, behavior, and policy&#xD;
    specification. As such, the realization of these different aspects requires more than simply the interface definition&#xD;
    provided by WSDL.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on service registries, see the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service_portfolio_52FD64AC.html&quot;&#xD;
    guid=&quot;1.851952881072508E-305&quot;>Concept: Service Portfolio&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Contract_Based&quot; name=&quot;Contract_Based&quot;>Contract-Based&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In the glossary definition above we noted that the service specification provides a view for both the service provider&#xD;
    as well as the service consumer. These views correspond to two halves of a contract that allows the clear separation of&#xD;
    the specification from implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following table describes how the different aspects of a service specification affect both the provider and&#xD;
    consumer of the specification.&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th valign=&quot;top&quot; width=&quot;10%&quot;>&#xD;
                Role&#xD;
            &lt;/th>&#xD;
            &lt;th valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Interface Specification&#xD;
            &lt;/th>&#xD;
            &lt;th valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Behavior Specification&#xD;
            &lt;/th>&#xD;
            &lt;th valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Policy Specification&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;10%&quot;>&#xD;
                &lt;b>Provider&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs the set of operations and messages the service must respond to. All operations must respond to and&#xD;
                reply with the correct messages.&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs as to the behavior this service must support. If such behavior specification is formal and&#xD;
                complete, an implementation can be tested for conformance to the specification.&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs as to a set of constraints which the service implementation may work under as well as a set of&#xD;
                qualities of service that must be realized.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;10%&quot;>&#xD;
                &lt;b>Consumer&lt;/b>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs the set of operations that may be invoked.&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs as to the protocol requirements that the consumer must realize (operation ordering, data flows, and&#xD;
                so on). Also indicates any operations the consumer must implement to support collaborations.&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; width=&quot;30%&quot;>&#xD;
                Informs as to constraints that the consumer must be cognizant of, such as security requirements, in&#xD;
                communicating with this service. It also identifies the qualities of service a consumer can get from a&#xD;
                given provider.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Such a service specification can be seen as an application of the Design by Contract but is a necessary step in&#xD;
    achieving discoverable and dynamically reconfigurable services.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Business_Aligned&quot; name=&quot;Business_Aligned&quot;>Business Alignment&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In general, the connection between business models representing the operations of the business and the design models&#xD;
    for supporting IT applications have been at best loosely connected. In most cases, they have been completely&#xD;
    disconnected. While the RUP does provide guidance on the transition from business models to system use case models (see&#xD;
    the guideline &lt;i>Going from Business Models to Systems&lt;/i>), the connection requires a number of transformations as the&#xD;
    level of granularity and abstraction changes from the business to IT perspectives.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, it is clear that services may be classified into either business or infrastructure services. See the &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/guidances/concepts/service_portfolio_52FD64AC.html&quot;&#xD;
    guid=&quot;1.851952881072508E-305&quot;>Concept: Service Portfolio&lt;/a>&amp;nbsp;for a discussion of service classifications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One important aspect of SOA is that the level of granularity of services described in a service-oriented solution is&#xD;
    such that the operations provided by services can often be identified at a business level. This increase in the level&#xD;
    of granularity in supporting IT means that, in many cases, tasks identified in business-process models can be directly&#xD;
    realized as operations on services. Therefore the business users of IT solutions become much more a part of the&#xD;
    analysis and design process. It is also interesting to note that this closer connection with the business process model&#xD;
    also more directly associates services as IT work products, with the &lt;i>Business Goals&lt;/i> modeled in the RUP&#xD;
    business-modeling discipline.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more details on the connection between business and service models, see the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
    guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling_Service&quot; name=&quot;Modeling_Service&quot;>Modeling a Service&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In modeling the service, use the &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/whitepapers/uml_profile_for_software_services_7ADFB3D2.html&quot;&#xD;
    guid=&quot;2.972928238097629E-306&quot;>Unified Modeling Language (UML) Profile for Software Services&lt;/a>&lt;/i> and the guidance&#xD;
    provided for each element in the profile. In general, elements that make up the static view of services and service&#xD;
    specifications in a service model are shown in the diagram below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;162&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_identification-01.gif&quot;&#xD;
    width=&quot;512&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The Service Provider &quot;UpdateCustomerAddressLegacyProvider&quot; provides a Service &quot;UpdateCustomerAddress.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Service &quot;UpdateCustomerAddress&quot; implements the Service Specification &quot;IUpdateCustomerAddress.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Service Specification &quot;IUpdateCustomerAddress&quot; has a single Operation &quot;execUpdateCustomerAddress.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Operation &quot;execUpdateCustomerAddress&quot; takes a single input message, &quot;UpdateCustomerRequest.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The Operation &quot;execUpdateCustomerAddress&quot; returns a single output message, &quot;UpdateCustomerResponse.&quot;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The structure and composition view of the model capture the communication between services and the partitioning of the&#xD;
    solution. This is addressed in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service_composition_and_choreography_41EDEECB.html&quot;&#xD;
    guid=&quot;7.723783423994501E-306&quot;>Concept: Service Composition and Choreography&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/solution_partitioning_352116F8.html&quot;&#xD;
    guid=&quot;1.6501323286225543E-305&quot;>Concept: Solution Partitioning&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Alternative Methods&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    As is often the case in modeling there are alternatives methods to model the same logical structure and in some cases&#xD;
    the techniques can be used to represent additional technical details. For example in modeling the notion of both&#xD;
    provided and required capabilities for a service we can either choose to stereotype the interfaces that describe these&#xD;
    capabilities as Service Specifications and use an unstereotyped&amp;nbsp;class to represent the combined type, or we can&#xD;
    choose to stereotype the class itself and not the interfaces. Both of these options are shown in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;132&quot; alt=&quot;&quot; src=&quot;./resources/soa_svc_model-01.png&quot; width=&quot;600&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general you should stereotype the interfaces if they themselves are going to be used by other services in a&#xD;
    different context, so the rule of thumb is that whichever element is considered the reusable description should be&#xD;
    stereotyped. When creating a service on a service provider (in UML terms a port on either a class or component) you&#xD;
    select either the ServiceType or MyService class as the type of the stereotyped port, as shown below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;190&quot; alt=&quot;&quot; src=&quot;./resources/soa_svc_model-02.png&quot; width=&quot;336&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that the resulting structure will be identical for either ServiceType or MyService, the port indicates a required&#xD;
    interface and a provided interface - possibly a callback interface which the client is required to provide. However, in&#xD;
    some cases it is useful to explicitly separate out the required and provided capabilities into individual service&#xD;
    descriptions. In this case we need two classes realizing the service specifications we introduced above. The figure&#xD;
    below demonstrates these classes.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;144&quot; alt=&quot;&quot; src=&quot;./resources/soa_svc_model-03.png&quot; width=&quot;335&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Now, when we create our service provider we need two stereotyped ports, as shown below, one to represent the callin and&#xD;
    one the callback capabilities.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;190&quot; alt=&quot;&quot; src=&quot;./resources/soa_svc_model-04.png&quot; width=&quot;336&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As for when you need this additional flexibility, it will depend very much on the task at hand and the level of&#xD;
    formality you need to include in your models. The example at the end is very clear that there are separate notions of a&#xD;
    callin and callback interface; however, what if the same provider implements&amp;nbsp;a number of service end-points? The&#xD;
    proliferation of ports may make the final result hard to read and understand.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the design and implementation of services, see the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/tasks/soa_service_realization_66984C2B.html&quot; guid=&quot;_V6uMMCwUEduKcvYAyaKSaA&quot;>Task:&#xD;
    Document Service Realization Decisions&lt;/a>.&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
