<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-Fv8sgA9XhQpxiWeOPgHWIA" name="soa_service_realization,_V6uMMCwUEduKcvYAyaKSaA" guid="-Fv8sgA9XhQpxiWeOPgHWIA" changeDate="2006-11-01T09:32:24.295-0800" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    The purpose of the &lt;i>&lt;a class=&quot;elementLink&quot; href=&quot;./../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Service Model&lt;/a>&lt;/i> is primarily to identify services, their&#xD;
    organization, collaboration, and their detailed and complete specification. The role of implementation is delegated to&#xD;
    the existing Rational Unified Process (RUP) &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot; guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design&#xD;
    Model&lt;/a>&lt;/i>, and specifically the &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_component_E259F3CC.html&quot;&#xD;
    guid=&quot;{447385A0-E565-4C87-A082-402AF21CA088}&quot;>Service Component&lt;/a>&lt;/i> model element. In general, the service model is&#xD;
    realized by a design model. However, it would be possible to generate artifacts directly from the service model where&#xD;
    simply specifications are required. It may also be useful to create a use-case model from the service model that allows&#xD;
    for further description of the services before construction.&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_BrjXAC7vEdu14aFGpEDchg" name="Determine Sourcing Approach" guid="_BrjXAC7vEdu14aFGpEDchg">
    <sectionDescription>&lt;p>&#xD;
    There are a number of alternatives to be considered relative to deciding how to realize services (see figure below).&#xD;
    This is not the straightforward build versus buy decision; other interesting options come into the picture.&#xD;
    &quot;Transform&quot;-ation uses a combination of techniques including business rules extraction to pull out a segment of&#xD;
    functionality to be used independently for the realization of the component's service. &quot;Integrate&quot; is the &quot;wrappering&quot;&#xD;
    of legacy functionality to achieve functionality; integration is invocation-based. Subscription is based on the&#xD;
    availability of a publish-subscribe model (in a message-oriented middleware context) in which a consumer subscribes to&#xD;
    the services provided by the provider. One of the options is to outsource (e.g., Payroll) the functionality out to some&#xD;
    other business. As the web services and business-to-business&amp;nbsp;integration becomes more prevalent, this option will&#xD;
    also be considered for use on a wider basis.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Build&lt;/strong> - for various reasons, the decision is to go-ahead and develop the service in-house.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Buy&lt;/strong> - purchase a service that may be deployed and hosted internally.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Transform&lt;/strong> - uses a combination of techniques including business rules extraction to pull out a&#xD;
        segment of functionality to be used independently for the realization of the component's service.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Subscribe&lt;/strong> - is based on the availability of a publish-subscribe model (in a message-oriented&#xD;
        middleware context) in which a consumer subscribes to the services provided by the provider.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Integrate&lt;/strong> - is the wrappering of legacy functionality to achieve functionality; integration is&#xD;
        invocation-based.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Outsource&lt;/strong> - as Web Services and business-to-business integration becomes more prevalent, this&#xD;
        option will also be considered for use on a wider basis.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Service Realization Decisions are associated with service components. Each service component can be considered a&#xD;
    container of functionality that is needed to realize a service. It is composed of or uses both functional and technical&#xD;
    components. It is important to decide how these service components will be realized. It is not a simple &quot;buy or build&quot;&#xD;
    decision. There are other considerations that need to be looked at such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Transformation which may involve extraction of rules or making a clone of existing code and rewriting it to perform&#xD;
        as a component with defined interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with messaging or with wrappers.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Example&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    We wish to capture the realization decisions for the Rent-a-Car example, though it is hard to do this in the UML model&#xD;
    we have been using in a number of examples. To help in this process, the Realization Matrix template&amp;nbsp;can be used&#xD;
    to document the result of these decisions, as shown in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;195&quot; alt=&quot;&quot; src=&quot;./resources/realization_decisions.gif&quot; width=&quot;671&quot; />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_2v7HIC1SEduSw7cZaAXX6g" name="Determine Development Approach" guid="_2v7HIC1SEduSw7cZaAXX6g">
    <sectionDescription>&lt;p>&#xD;
    The advantage of the choices described are that whichever choice you make, there is a connection between each in terms&#xD;
    of traceability from the use-case model to a design model and then to implementation.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;181&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/soa_svce_components-01.gif&quot;&#xD;
    width=&quot;373&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is our recommendation that the service model be realized using a design model. This provides the ability for the&#xD;
    &lt;i>&lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot;&#xD;
    guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Designer&lt;/a>&lt;/i> and &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_implementer_D145E819.html&quot;&#xD;
    guid=&quot;{75501BAA-0CCE-4852-A7B2-B10CA71C002A}&quot;>Implementer&lt;/a>&lt;/i> to apply patterns to the design model and model&#xD;
    additional capabilities and structures before generating implementation artifacts.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_WejE0C7vEdu14aFGpEDchg" name="Fine-Grained Mapping of Existing Assets" guid="_WejE0C7vEdu14aFGpEDchg">
    <sectionDescription>&lt;p>&#xD;
    One must not forget that very few solutions are built without consideration to existing applications that either will&#xD;
    provide functionality to support the solution or with which the solution must interact. As such it is vital that&#xD;
    existing legacy applications that will be reused as part of any solution be catalogued and their functionality&#xD;
    identified. With a service-oriented solution, we are able to take a number of routes to integrate new services with&#xD;
    existing functionality. These are demonstrated in the figure below:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Wrap existing function as a service&lt;/b>. In this case, we are looking to leave the function as-is, but use tools&#xD;
        or middleware to expose the existing function as a service. For example, IBM provides the capability to expose&#xD;
        legacy CICS transactions as SOAP Web services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Wrap and replace existing function with a service&lt;/b>. In this case, we wrap a function as above, but we use the&#xD;
        resulting service specification to redevelop the service at a later date, replacing the original service and having&#xD;
        clients redirected to the new implementation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Use an adapter more amenable to service invocation&lt;/b>. In some cases, it is not possible to wrap a function and&#xD;
        expose it as a service, but may be possible to wrap the function in something more able to integrate, such as a&#xD;
        message queuing interface or the Java Connector Architecture (JCA). This allows new services to access the function&#xD;
        in-place.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Integrate the function into the service&lt;/b>. Obviously in some cases, it is possible for the new service to&#xD;
        access the legacy function in-place, simply using the function as a logical component within the implementation of&#xD;
        the service.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;151&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/soa_svce_identification-04.gif&quot;&#xD;
    width=&quot;397&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It should be considered that the third and fourth options provide the most flexibility because they use the existing&#xD;
    function but do not continue to expose the function as-is to clients. On the other hand, the first and second options&#xD;
    may introduce issues with the wrapping of existing functions as services because the performance of Web-service&#xD;
    protocols and mismatches between native data formats and XML may introduce performance concerns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Existing software assets and their dependencies and interfaces will have to be analyzed to determine if changes are&#xD;
    required to support the business functionality.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> For example, in order to&#xD;
    create a web services interface for a legacy implementation of a business function, analysis may involve the&#xD;
    examination of the composition and flow of online transactions or batch jobs, or persistent data stores that help&#xD;
    perform that function.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The current design of these existing applications&#xD;
    may have to change to support the functionality.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> There is also a need to&#xD;
    identify any potential barriers to creating a web services interface with the desired quality of service. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>For example, a monolithic batch implementation of a business function may&#xD;
    require sub second response time when invoked as a service.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Wrapping Existing Assets as a Services Pattern&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In some cases, however, it is expedient to develop a legacy service partition where a set of low-level legacy functions&#xD;
    are exposed individually as services. This partition is only accessible to higher level services that utilize them in&#xD;
    presenting a more granular business-aligned specification to consumers. This encapsulation of the legacy functions&#xD;
    should be seen as a temporary solution and should only be undertaken if the performance characteristics of the wrapping&#xD;
    technology is well understood. For more information see the concept &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/concepts/solution_partitioning_352116F8.html&quot;&#xD;
    guid=&quot;1.6501323286225543E-305&quot;>Solution Partitioning&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One way to look at the wrapping of a legacy function is a very simplified form of the &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_provider_C00D3410.html&quot;&#xD;
    guid=&quot;{8427751F-3C14-4CEB-9816-5112BDB91EED}&quot;>Service Provider&lt;/a>&lt;/i> model element, with a single service realizing a&#xD;
    single specification with only a single operation. The following diagram demonstrates this pattern for the legacy&#xD;
    function &quot;UpdateCustomerAddress&quot;.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &amp;nbsp;&lt;img height=&quot;162&quot; alt=&quot;Diagram is described in the textual content.&quot;&#xD;
    src=&quot;./resources/soa_svce_identification-01.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In tailoring this pattern, you may wish to do the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It is likely that a set of existing functions will be provided by the same component so the same service provider&#xD;
        should be used.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The pattern above was generated automatically; it might be preferable to rename the default operation name from&#xD;
        &quot;exec${service}&quot;.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Similarly, it would be valuable to rename the default generated messages; also at this point, the message&#xD;
        structures should be modeled.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The default pattern assumes the operation takes a message input and return a message; it may be that the legacy&#xD;
        function returns no message or is a notification only and the signature of the operation generated should be&#xD;
        amended.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The architect/designer should ensure that the correct values are specified for the &quot;allowedBindings&quot; property on&#xD;
        the service provider.&#xD;
    &lt;/li>&#xD;
&lt;/ul></sectionDescription>
  </sections>
  <purpose>&lt;p>&#xD;
    The purpose of this task is to provide a design model for implementation that may be used by developers to implement&#xD;
    service components to provide the required services.&#xD;
&lt;/p></purpose>
</org.eclipse.epf.uma:TaskDescription>
