<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-tgjZDICR7168iZJkfPJ93w" name="soa_service_message_design,_ObqZoCwUEduKcvYAyaKSaA" guid="-tgjZDICR7168iZJkfPJ93w" changeDate="2006-12-19T15:33:43.919-0800" version="1.0.0">
  <mainDescription>Messages between communicating services and components are a critical part of a SOA. These include not only the input and&#xD;
output messages of a given service invocation but also the internal message format to be used within the enterprise as the&#xD;
flow of information passes through the layers of the application architecture. &lt;span&#xD;
style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>In many cases, a common message format is recommended. &#xD;
&lt;p>&#xD;
    As services include input and output messages, this task focuses on:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        identification and specification of the format and content of input and output messages of a service,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        its relation to the underlying data models,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the internal common message format and considerations and&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        decisions on how to map each of these messages to another.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The specification of messages for the service model should take into consideration perspectives from enterprise&#xD;
    architecture/application architecture, data architecture and integration architecture. This includes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Message standards defined at an enterprise or application level&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Appropriate meta or data model that are part of a data architecture&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Message transformation standards that are part of an integration architecture.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    During specification, it is important to understand an organization's standards, if available, in each of the 3 areas&#xD;
    of architecture. Message specifications and data models are closely tied. The data model consists of underlying&#xD;
    entities and their relationships, a subset of which may be sent out as part of an output message and received as an&#xD;
    input from an incoming message. Thus the mapping between the message formats and the underlying data model or data&#xD;
    architecture is a key architectural consideration. In some cases, patterns and their implementation such as the&#xD;
    Enterprise Service Bus may handle the transformation (and routing) of messages. In many cases, we may need an explicit&#xD;
    handler to transform messages from and to data models.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In most object-oriented programming languages, behavior invocation is based either upon method calls or message passing&#xD;
    paradigms. C++ for example uses tables of function pointers to invoke the correct method. Smalltalk on the other hand&#xD;
    passes messages whose receiver is evaluated at execution time. Service-oriented solutions are inherently message based&#xD;
    and while bindings to programming languages may present method based interfaces for clients, this is not the reality of&#xD;
    communication with or between services. Another facet of service messaging is that more and more services are being&#xD;
    developed with asynchronous interfaces as opposed to the fundamentally synchronous nature of method calls.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the enterprise integration arena, one class of technology has been used with success for a number of years: Message&#xD;
    Oriented Middleware (or MOM). This set of technologies is manifest in products such as queue managers and message&#xD;
    brokers. It has provided IT organizations with a flexible, scalable, and robust method for loosely connecting&#xD;
    applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It has been noted that Service-Oriented Architecture (SOA) is an evolution of component-based development. In some&#xD;
    respects this evolution takes into account many of the lessons learned from the success of MOM: how to loosely couple&#xD;
    systems effectively. The MOM infrastructure provides the following characteristics that allow communicating systems to&#xD;
    evolve independently.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Message Queuing,&lt;/b> for reliable delivery of messages even in the event of network or system failures.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Message Routing,&lt;/b> both in terms of routing around the network for performance and reliability and advanced&#xD;
        routing based on the message content.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Message Transformation,&lt;/b> so that a calling service can post a request for a &quot;product&quot; when the receiving&#xD;
        service can accepts requests for &quot;items.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Message Adapters,&lt;/b> to allow systems that were not originally developed with MOM interfaces to be addressed by&#xD;
        MOM aware services.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
  <sections xmi:id="_V63gYDJaEduxsZm92FKuLw" name="Use Message Standards" guid="_V63gYDJaEduxsZm92FKuLw">
    <sectionDescription>When defining the message specifications for services identified, it is important to take into account an enterprise's&#xD;
message standards if they exist.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> Where message standards are not defined, it&#xD;
is advisable to develop them. Where industry message schemas exist, it is recommended to leverage them.&lt;span&#xD;
style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> For example, XML messaging specifications have been defined for the finance,&#xD;
government, travel (OTA XML [Open Travel Alliance, &lt;a href=&quot;http://www.opentravel.org/&quot;&#xD;
target=&quot;_blank&quot;>http://www.opentravel.org/&lt;/a>]) and communications industries.&lt;span&#xD;
style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> In addition, there are non-industry specific schemas available from OAGIS [Open&#xD;
Applications Group, &lt;a href=&quot;http://www.openapplications.org/index.htm&quot;>http://www.openapplications.org/index.htm&lt;/a>]. &#xD;
&lt;h3 style=&quot;MARGIN: 6pt 0in&quot;>&#xD;
    &lt;span&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-fareast-language: EN-US; mso-ansi-language: EN-US; mso-bidi-language: AR-SA&quot;>Common&#xD;
    message format&lt;/span>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    Common messages refer to messages that are transferred across the tiers of a n-tier architecture. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Typically, user-interface information is captured, sent through to a controller&#xD;
    tier, processed in the business or application layers and then passed on to a persistence layer or back-end legacy&#xD;
    system. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>During each of these transfers, a message is being exchanged&#xD;
    between tiers where each may have a different format. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>The key thing is to&#xD;
    agree on one standard for a common message format within the enterprise so as to overcome any format translation&#xD;
    overhead where an Enterprise Service Bus (ESB) is not used or when its use is deemed expensive in terms of format&#xD;
    translation. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>The use of an ESB will take care of many of these mediations,&#xD;
    transformations and routing. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>This is the Integration layer as depicted in&#xD;
    the SOA layers model.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    In some cases, it may suffice to agree on the outgoing and incoming message formats. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>The issue of a common message format is a key architectural decision: you may&#xD;
    choose to &quot;roll your own&quot; as specified here, adopt industry models such as travel industry's OTA XML or adopt&#xD;
    non-industry specific models such as those defined by OAGIS. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>In some&#xD;
    cases, the decision will be to use a common enterprise message format that updates fields in the message and passes it&#xD;
    on to the next tier for further processing.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> If such a common scheme cannot&#xD;
    be achieved due to political factors, then adapters that translate messages to an internal common message format can be&#xD;
    designed. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>They can also be leveraged as part of an ESB.&#xD;
&lt;/p>&#xD;
&lt;div style=&quot;mso-element: endnote-list&quot;>&#xD;
    &lt;b style=&quot;mso-bidi-font-weight: normal&quot;>&lt;span&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-fareast-language: EN-US; mso-ansi-language: EN-US; mso-bidi-language: AR-SA&quot;>ISV&#xD;
    Considerations&lt;/span>&lt;/b> &lt;span&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-fareast-language: EN-US; mso-ansi-language: EN-US; mso-bidi-language: AR-SA&quot;>:&#xD;
    Messages that invoke services realized within ISV packages may need to be augmented with data attributes to satisfy&#xD;
    constraints within the ISV package data model. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Such data elements may be&#xD;
    identified through analysis of the realized service within the ISV package Component or may also be identified through&#xD;
    the ISV package bottom-up service analysis. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Since these attributes may not&#xD;
    be identified until service realization, they may need to be retrofitted into the common message once they are&#xD;
    identified.&lt;/span>&#xD;
&lt;/div>&#xD;
&lt;h4&#xD;
style=&quot;MARGIN: 6pt 0in 6pt 0.5in; TEXT-INDENT: -0.5in; mso-element: endnote-list; mso-list: l0 level4 lfo1; tab-stops: list blank 0in blank .5in left .7in&quot;>&#xD;
    Common Message format and data architecture&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>In general, services should not indicate anything about the underlying data&#xD;
    models. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Rather, they should be used to encapsulate the underlying data&#xD;
    models whose data stores are leveraged by the service components that realize the services. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Thus, services that are view, edit, delete, add search and other operations on a&#xD;
    database may not be good candidates for services, but could be used as underlying component operations as they are used&#xD;
    today.&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc77069206&quot;>&lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>Existing data architectures that&#xD;
    define conceptual, logical or physical data models are required sources in defining common message formats.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> The definitions of common message formats should be coordinated with data&#xD;
    architecture efforts and data models.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> This analysis will ensure the&#xD;
    availability of proper data stores and schemas for the service components that will realize new services. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Existing data architecture will be enhanced to accommodate new services if new&#xD;
    data needs to be added to the underlying systems.&lt;/span>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc77069206&quot;>&lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>In many enterprises, existing systems&#xD;
    often reflect the existence of silos and data islands that collaborate through batch processes.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> Migrating away from isolated data stores is possible through the means of&#xD;
    services.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> Identifying a service provider's data sources is accomplished&#xD;
    during service realization.&lt;/span>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc77069206&quot;>&lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>&lt;b&#xD;
    style=&quot;mso-bidi-font-weight: normal&quot;>ISV Considerations&lt;/b>: Logical Data Model needs to accommodate the pre-defined,&#xD;
    often implicit data models embodied in ISV packages. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Thus message transfer&#xD;
    between packaged applications and the existing data models need to occur. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>This is often done through APIs offered by the ISVs.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>In a SOA, adapters to these ISV data models become important, especially if the&#xD;
    ISV is not exposing its underlying data and functionality through services.&lt;/span>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoNormal&quot; style=&quot;MARGIN: 6pt 0in; mso-element: endnote-list&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc77069206&quot;>&lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>Note that in some cases where the ISV&#xD;
    data model is accessible, it may be possible to customize the model to accommodate the messages required to support the&#xD;
    identified services. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Conversely, if the data model is not accessible,&#xD;
    service messaging may be constrained by the data model contained within the ISV.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> A mediation mechanism can also be employed to curtail the problem.&lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> Mediation, such as that provided by an ESB can be used in this context to&#xD;
    support interfacing with ISV packages. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>The ISV data model may also dictate&#xD;
    additional attributes that are required above and beyond those required to implement the service.&lt;/span>&lt;/span>&#xD;
&lt;/p>&#xD;
&lt;h4&#xD;
style=&quot;MARGIN: 6pt 0in 6pt 0.5in; TEXT-INDENT: -0.5in; mso-element: endnote-list; mso-list: l0 level4 lfo1; tab-stops: list blank 0in blank .5in left .7in&quot;>&#xD;
    &lt;span style=&quot;mso-bookmark: _Toc77069206&quot;>&lt;span style=&quot;mso-bookmark: _Toc83012232&quot;>Common message format with all&#xD;
    relevant services&lt;/span>&lt;/span>&#xD;
&lt;/h4>&#xD;
&lt;div style=&quot;mso-element: endnote-list&quot;>&#xD;
    &lt;span&#xD;
    style=&quot;FONT-SIZE: 10pt; FONT-FAMILY: Arial; mso-bidi-font-family: 'Times New Roman'; mso-fareast-font-family: 'Times New Roman'; mso-fareast-language: EN-US; mso-ansi-language: EN-US; mso-bidi-language: AR-SA&quot;>Common&#xD;
    message formats must be reconciled with the input/output messages of individual services, so they are related and&#xD;
    assigned to allow appropriate services to use and update them as needed. &lt;span&#xD;
    style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>Services may need to extract information from or expect output from the common&#xD;
    enterprise message format. &lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span>These are documented in the Service Common&#xD;
    Message Format template.&lt;/span>&#xD;
&lt;/div></sectionDescription>
  </sections>
  <sections xmi:id="_8r1KEC1AEduMFMCuL1mFMw" name="Reusing the Domain Model" guid="_8r1KEC1AEduMFMCuL1mFMw">
    <sectionDescription>&lt;p>&#xD;
    In the concept &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../extend.bus_model/guidances/concepts/domain_design_846FF5B2.html&quot;&#xD;
    guid=&quot;_qr6IQE6nEduhs-ki98mFFw&quot;>Concept: Domain Design&lt;/a>, the notion of domain modeling was outlined, similar to the&#xD;
    notion of an analysis model or business-analysis model in representing core concepts from the business domain in a&#xD;
    technology independent manner. It is clear that the messages used by services are technology aware (if not&#xD;
    technology-specific in the case of XML Schema used for Web Services) in the same way the database schema used to store&#xD;
    the domain data is technology specific within the service. In fact, we may consider the following relationship.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;106&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_msg_design-01.gif&quot;&#xD;
    width=&quot;246&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This demonstrates the relationship between the domain model used for discovery of the key domain elements and the&#xD;
    message model as the realization of the domain model as a set of elements passed into and returned from services.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;206&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_msg_design-02.gif&quot;&#xD;
    width=&quot;435&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following is a typical Java/component model where we can see the separation of the Interface from the Class and the&#xD;
    inclusion of &quot;accessor&quot; functions to get and set the value of the state variables. This is a very common approach, but&#xD;
    it has the disadvantage that, if the consumer and component are in different address spaces or on different machine,&#xD;
    the cost of communicating each call is high in terms of accessing the entire state of any one component.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;266&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_msg_design-03.gif&quot;&#xD;
    width=&quot;737&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another issue is the relationships between components, the notion that an Account has a set of Customers is difficult&#xD;
    to develop in this style and usually ends up in managing lists of identifiers used to retrieve individual objects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In developing a service model we might use a &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../soa.rup_soma/tasks/soa_service_identification_data_1AFDAC0A.html&quot;&#xD;
    guid=&quot;_mJtYwCwTEduKcvYAyaKSaA&quot;>&lt;em>data-driven service identification&lt;/em>&lt;/a> approach leading to the specification of&#xD;
    an AccountMgr service and a MeetingMgr service. The first service specification acts as the central location for&#xD;
    managing all accounts and contacts. In fact, the core data model for the Customer Relationship Management (CRM)&#xD;
    solutions was built using this and other services. The second service has been separated because it can be used by the&#xD;
    CRM solutions and other solutions for booking meetings and it will interface with the enterprise Groupware&#xD;
    applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following is a sample from the model; it shows the service specifications, the messages can be assumed from the&#xD;
    domain model above.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;134&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_msg_design-04.gif&quot;&#xD;
    width=&quot;338&quot; border=&quot;0&quot; />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_rcLnMC1AEduMFMCuL1mFMw" name="Understand Message Exchange Patterns" guid="_rcLnMC1AEduMFMCuL1mFMw">
    <sectionDescription>&lt;p>&#xD;
    When thinking about messages, there is a natural tendency to consider them to be simply the parameters to operations.&#xD;
    This is made more likely because the UML representation of services uses operations with parameters and the Web&#xD;
    Services Description Language (WSDL 1.1) uses a similar approach. However, when thinking in terms of &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_service_1EE4C96C.html&quot;&#xD;
    guid=&quot;{FF65B0A2-6C53-4F01-9727-AACDB0D542C8}&quot;>&lt;i>Services&lt;/i>&lt;/a> and &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
    guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>&lt;i>Service Specifications&lt;/i>&lt;/a>, it is more helpful to think in terms&#xD;
    of messages as reusable elements that are either produced by or used/consumed by a service operation. In services&#xD;
    parlance, the operation simply becomes a &lt;i>message exchange&lt;/i>, albeit a named exchange on a service that is&#xD;
    distinguishable from another exchange that may use the same input and output messages.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The notion of &lt;i>message exchange pattern&lt;/i>s has been of interest in the Web services standards world, as a part of&#xD;
    the analysis of the use of services in developing standards to support their specification. A message exchange pattern&#xD;
    names a particular combination of produced, used, or consumed message between two services (or between a service and a&#xD;
    consumer) and provides a common vocabulary for service designers to describe operations on service specifications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following lists common exchange patterns that can be used in the definition of service specifications. Such&#xD;
    patterns are usually found during the modeling of &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_collab_76358B24.html&quot;&#xD;
    guid=&quot;{9BBBE5B0-4D39-4555-9E20-0ADBD8327D29}&quot;>Service Collaborations&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Synchronous Request/Response:&lt;/b> This is in effect a traditional method invocation where the service consumer sends&#xD;
    a message to a service and then blocks waiting until a reply is received from the service.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;91&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-01.gif&quot;&#xD;
    width=&quot;262&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>One Way Message:&lt;/b> In this case, the consumer simply sends a message to the service, not waiting for or expecting&#xD;
    a reply. This pattern can be considered an asynchronous method call with no reply type, meaning that the service&#xD;
    consumer continues execution after the message is sent, rather than waiting for the service to process the message.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;91&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-02.gif&quot;&#xD;
    width=&quot;250&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Notification:&lt;/b> In this case, the service is responsible for sending messages back to the consumer (usually&#xD;
    another service). To accomplish thi,s the consumer has to have somehow registered with the service so that the service&#xD;
    knows where to send the notification messages.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;91&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-03.gif&quot;&#xD;
    width=&quot;253&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Asynchronous Request/Response:&lt;/b> This is a combination of the one-way message and notification. The service&#xD;
    consumer sends a message, including a reply-to address. When the service completes its processing, it calls the&#xD;
    originator back. The fact that service consumers send the first message in an asynchronous manner does require them to&#xD;
    keep track of all sent requests so that responses, when received from the service, can be correlated to the original&#xD;
    request.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;110&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-04.gif&quot;&#xD;
    width=&quot;262&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Publish/Subscribe&lt;/b>: Again this is a combination. A service consumer registers interest in a &quot;topic&quot; with a&#xD;
    publication service. Other services or service consumers publish messages (send messages) to the publication service&#xD;
    identifying the topic associated with the message. If the topic matches previously registered consumers, they are&#xD;
    notified of the new message. In this case it is possible to very loosely couple the services participating. Any&#xD;
    consumer or publisher only needs to know the location of the publication service and new consumers can be added to the&#xD;
    solution without significant effort.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;130&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_choreography-05.gif&quot;&#xD;
    width=&quot;346&quot; border=&quot;0&quot; />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_JpesQC1BEduMFMCuL1mFMw" name="Manage Message Granularity" guid="_JpesQC1BEduMFMCuL1mFMw">
    <sectionDescription>&lt;p>&#xD;
    Services are intended to provide large-granularity operations. As such, the messages that flow in and out of such&#xD;
    operations tend to be large-grained also. This concern was originally highlighted early in the deployment of Web&#xD;
    Service solutions where the use of HTTP as a transport, SOAP as a protocol, and XML as a wire format tended to lead to&#xD;
    relatively slow responses and very high bandwidth requirements. For example, consider a request for a stock quote from&#xD;
    a service. A simple stock quote was often demonstrated in the early Web Services days. The ticker symbol is four&#xD;
    characters and the response is a decimal number. In an RPC style, binary protocol we might expect that the message&#xD;
    identifier might add some overhead, let's say 8 bytes, and so we could expect somewhere in the region of 8+4 for the&#xD;
    request and 8+8 (for a high precision decimal) in response. With HTTP/SOAP, we might expect something of the following&#xD;
    form:&#xD;
&lt;/p>&#xD;
&lt;table width=&quot;100%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th width=&quot;50%&quot;>&#xD;
                Request&#xD;
            &lt;/th>&#xD;
            &lt;th width=&quot;50%&quot;>&#xD;
                Response&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot; align=&quot;left&quot; width=&quot;50%&quot;>&#xD;
&lt;pre>&#xD;
  SOAPAction: &quot;http://www.webservicex.net/Quote&quot;&lt;br />&#xD;
&#xD;
  User-Agent: MyAgent 1.0&lt;br />&#xD;
&#xD;
  Content-Type: text/xml; charset=UTF-8&lt;br />&#xD;
&#xD;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br />&#xD;
&#xD;
  &amp;lt;soap:Envelope&lt;br />&#xD;
&#xD;
   xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&lt;br />&#xD;
&#xD;
   xmlns:tns=&quot;http://www.webservicex.net/&quot;&amp;gt;&lt;br />&#xD;
&#xD;
   xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt;&lt;br />&#xD;
&#xD;
   &amp;lt;soap:Body&amp;gt;&lt;br />&#xD;
&#xD;
    &amp;lt;tns:Quote&amp;gt;&lt;br />&#xD;
&#xD;
     &amp;lt;tns:Symbol&amp;gt;IBM&amp;lt;/tns:Symbol&amp;gt;&lt;br />&#xD;
&#xD;
    &amp;lt;/tns:Quote&amp;gt;&lt;br />&#xD;
&#xD;
   &amp;lt;/soap:Body&amp;gt;&lt;br />&#xD;
&#xD;
  &amp;lt;/soap:Envelope&amp;gt;&#xD;
&lt;/pre>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot; align=&quot;left&quot; width=&quot;50%&quot;>&#xD;
&lt;pre>&#xD;
  HTTP/1.1 200 OK&lt;br />&#xD;
&#xD;
  X-Powered-By: ASP.NET&lt;br />&#xD;
&#xD;
  Connection: close&lt;br />&#xD;
&#xD;
  Content-Length: 522&lt;br />&#xD;
&#xD;
  X-AspNet-Version: 1.1.4322&lt;br />&#xD;
&#xD;
  Date: Mon, 21 Mar 2005 00:34:21 GMT&lt;br />&#xD;
&#xD;
  Content-Type : text/xml; charset=utf-8&lt;br />&#xD;
&#xD;
  Server : Microsoft-IIS/6.0Cache-Control: private, max-age=0&lt;br />&#xD;
&#xD;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;br />&#xD;
&#xD;
  &amp;lt;soap:Envelope&lt;br />&#xD;
&#xD;
   xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&amp;gt;&lt;br />&#xD;
&#xD;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt;&lt;br />&#xD;
&#xD;
   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt;&lt;br />&#xD;
&#xD;
   &amp;lt;soap:Body&amp;gt;&lt;br />&#xD;
&#xD;
    &amp;lt;QuoteResponse xmlns=&quot;http://www.webservicex.net/&quot;&amp;gt;&lt;br />&#xD;
&#xD;
      &amp;lt;Quote&amp;gt;&amp;lt;Last&amp;gt;89.28&amp;lt;/Last&amp;gt;&lt;br />&#xD;
&#xD;
      &amp;lt;/Quote&amp;gt;&lt;br />&#xD;
&#xD;
    &amp;lt;/QuoteResponse&amp;gt;&lt;br />&#xD;
&#xD;
   &amp;lt;/soap:Body&amp;gt;&lt;br />&#xD;
&#xD;
  &amp;lt;/soap:Envelope&amp;gt;&#xD;
&lt;/pre>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    Early adopters of Web Service Technology came to two conclusions. First, services were optimized for a small number of&#xD;
    operations providing data as documents rather than the more complex style of traditional component models. This has the&#xD;
    advantage of amortizing the overhead of the protocols across a bigger actual data payload. Also, between services in an&#xD;
    enterprise, at least between services within the same solution, smaller,simpler protocol bindings were chosen and&#xD;
    HTTP/SOAP was reserved for situations where it was necessary, such as interfacing to services outside the enterprise.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This notion is not entirely new. Even in the component world, the Value Object pattern, or the J2EE Service Facade are&#xD;
    both approaches to reduce the number of communications round-trips between client and server. Both use the notion of&#xD;
    sending a complete copy of the component state to the client rather than using the traditional accessor functions. For&#xD;
    services, we may also like to consider the fact that services are being developed that are more closely aligned with&#xD;
    business models, especially business process models. As such, messages come to reflect common business documents in the&#xD;
    same way EDI Transaction Sets (Electronic Data Interchange) represent business documents such as orders, invoices,&#xD;
    shipping notices, and so on.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_CgmIkC1CEduMFMCuL1mFMw" name="Manage Message Exchange Performance" guid="_CgmIkC1CEduMFMCuL1mFMw">
    <sectionDescription>&lt;p>&#xD;
    In general, the use of large messages is valuable in overcoming communications performance, although in some cases the&#xD;
    large data message can be a problem. For example, in the SOAP messages above, we saw how the message size, using HTTP,&#xD;
    SOAP, and XML significantly increased the size of the data. This has been a complaint of early systems built using Web&#xD;
    Services technologies. On the other hand, these issues have allowed us to learn some interesting lessons such as&#xD;
    considering performance in terms of code performance, message design, and protocol choice as an early design activity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One important aspect to consider is that as we are moving large chunks of state from service to consumer or service to&#xD;
    service, these messages actually represent stale snapshots of the service state. So, one of the considerations is to&#xD;
    explicitly manage this &quot;staleness&quot; by identifying the time the data can be considered reliable or to &quot;lease&quot; it to the&#xD;
    consumer such that it expires after some amount of time. For more information, see the white paper &lt;i>&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../soa.rup_soma/guidances/whitepapers/soa_cbd_paper_5703509E.html&quot;&#xD;
    guid=&quot;2.48704851646278E-307&quot;>Using Service-Oriented Architecture and Component-Based Development to Build Web Service&#xD;
    Applications&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another topic that has to be considered is the caching of content. Caching is usually a concern that is dealt with as a&#xD;
    performance optimization for applications, but in an service-oriented solution, the distributed nature and&#xD;
    message-based communication lends itself well to the insertion of caches between consumers and services. These caches&#xD;
    are not the typical database caches used for optimizing queries, but more like caches used in web servers and web&#xD;
    proxies. In fact, in the case of Web Services using HTTP and SOAP, these proxies may be used as caches to serve up&#xD;
    service responses in certain situations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The issues however, in regard to the use of any cache, are really how the cache understands the policies used to serve&#xD;
    content from the cache and how a service can invalidate the cache. The technical infrastructure used to host and manage&#xD;
    deployed services should provide caching capabilities. One area of service policy we expect to see in the future is the&#xD;
    provision of cache management information.&#xD;
&lt;/p></sectionDescription>
  </sections>
</org.eclipse.epf.uma:TaskDescription>
