<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_qmjV0PS3EdmIX5Pw7v8pRw" name="soa_service_design,{9EB2B302-79F6-4DF8-AEB7-98E6AC1756DD}" guid="_qmjV0PS3EdmIX5Pw7v8pRw" changeDate="2006-09-21T21:18:12.699-0700" version="1.0.0">
  <mainDescription>This task refines the set of &lt;a class=&quot;elementLinkWithType&quot;&#xD;
href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>Artifact: Service Specification&lt;/a>s&amp;nbsp;identified and qualified during &lt;a&#xD;
class=&quot;elementLinkWithType&quot; href=&quot;./../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>&amp;nbsp;and provides additional structure and detail.&#xD;
This design-level detail includes the interface, message and composition of services and the allocation of services to&#xD;
providers.</mainDescription>
  <sections xmi:id="_qqeMgPS3EdmIX5Pw7v8pRw" name="Reuse Enterprise Service Portfolio " guid="_qqeMgPS3EdmIX5Pw7v8pRw">
    <sectionDescription>&lt;a id=&quot;Reuse_Service_Portfolio&quot; name=&quot;Reuse_Service_Portfolio&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    One of the often stated advantages to the use of a Service-Oriented Architecture (SOA) is the ability for services to&#xD;
    represent reusable assets across the enterprise, rather than the development of components only within the scope of a&#xD;
    single application.This enterprise view is important because it embodies the notion that a truly service-oriented&#xD;
    architecture for IT provides all infrastructure and business capabilities as services and that the applications&#xD;
    developed by the enterprise reuse capabilities from the portfolio of services.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    So, in starting a project it is important to know if you are developing services as part of the portfolio or whether&#xD;
    you are developing application functionality that uses these services. For example, the development of a portal site&#xD;
    for customers to access their account information is an application-development project using services in the portfolio&#xD;
    for customer information, account information, offers, and more. In each case, the use of the portfolio has different&#xD;
    implications; the service designer is describing their service specification and publishing it as a part of the&#xD;
    portfolio. This specification allows application developers to understand the interaction requirements for the service.&#xD;
    The service implementer may now use the same service specification to develop one or more implementations of the&#xD;
    service, ensuring that the implementation conforms to the specification.&amp;nbsp; The following diagram demonstrates the&#xD;
    relationship between the enterprise-wide service portfolio and the project's portfolio.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;139&quot; alt=&quot;&quot; src=&quot;./resources/portfolio_lifecycle.png&quot; width=&quot;343&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information see the concept &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/concepts/service_portfolio_52FD64AC.html&quot; guid=&quot;1.851952881072508E-305&quot;>Service&#xD;
    Portfolio&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_qqeMgfS3EdmIX5Pw7v8pRw" name="Use Design Patterns and Mechanisms " guid="_qqeMgfS3EdmIX5Pw7v8pRw">
    <sectionDescription>&lt;p>&#xD;
    Use design patterns and mechanisms as suited to the service being designed and in accordance with project design&#xD;
    guidelines. Incorporating a pattern or mechanism is effectively performing many of the subsequent steps in this task,&#xD;
    but in accordance with the rules defined by the pattern or mechanism.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that patterns and mechanisms are typically incorporated as the design evolves and not just as the first step in&#xD;
    this task. They are also frequently applied across a set of model elements, rather than only to a single element.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The transformation of a service into its realization often involves a set of patterns, some of which are described in&#xD;
    the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/guidelines/service_component_patterns_A4634107.html&quot;&#xD;
    guid=&quot;_p_6wsExREdumvs0NuKFubw&quot;>Guideline: Service Component Patterns&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_qqeMgvS3EdmIX5Pw7v8pRw" name="Describe the Logical Organization of the Solution " guid="_qqeMgvS3EdmIX5Pw7v8pRw">
    <sectionDescription>&lt;a id=&quot;Describe_Logical_Organization&quot; name=&quot;Describe_Logical_Organization&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    It is frequently useful to organize your thinking in terms of different views into a system and how the services you&#xD;
    are developing fit into these views. In defining the logical organization views, it is important that assignment of a&#xD;
    service into a view does not imply ownership in a Unified Modeling Language (UML) sense or containment; that is, that&#xD;
    the same service shall be able to participate in multiple logical views. The organizational views are worth laying out&#xD;
    in the model ahead of the service development or at least the first iteration of these views so services can be&#xD;
    assigned to views as identified. In the service model, we use an model element &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_partn_DC19AD3F.html&quot;&#xD;
    guid=&quot;{C302AF5A-1591-4F26-94E5-C412866553BF}&quot;>Service Partition&lt;/a>&lt;/i> to represent an aspect in a view. These&#xD;
    partitions can be used to represent any number of different perspectives of the solution, but do not imply ownership of&#xD;
    the services assigned to them. For more information, see the concept &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/concepts/solution_partitioning_352116F8.html&quot;&#xD;
    guid=&quot;1.6501323286225543E-305&quot;>Solution Partitioning&lt;/a>.&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is also possible that these partitions, at least those representing key viewpoints, may reside in models separate&#xD;
    from the services themselves, allowing for the partition models to evolve independently.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_qqeMg_S3EdmIX5Pw7v8pRw" name="Describe Service Elements " guid="_qqeMg_S3EdmIX5Pw7v8pRw">
    <sectionDescription>&lt;a id=&quot;Describe_Service_Elements&quot; name=&quot;Describe_Service_Elements&quot;>&lt;/a> &#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    As is always the case when looking at modeling software systems, there is a plurality of entry points to any such&#xD;
    model, any number of representations that can be used, and of course many methodologies one might apply. In most cases,&#xD;
    these entry points are due to specific concerns in either the technology or business domains that have to be addressed.&#xD;
    These concerns are important enough to act as starting points because understanding them and the interaction between&#xD;
    them is critical to achieving success.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    It was our observation that there are a small number of such concerns in developing service-oriented solutions; the&#xD;
    following diagram represents these primary concerns as specific design tasks. While noting that each of these concerns&#xD;
    can act as the starting point for service design, and that each approach tends to be well optimized for a certain class&#xD;
    of services, it is most likely that any large project would use a combination of approaches in the identification and&#xD;
    design of services.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;115&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_policy-02.gif&quot; width=&quot;241&quot;&#xD;
    border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information see&amp;nbsp;the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
    guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>, which presents a set of detailed techniques&#xD;
    supporting these approaches.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Message_Design&quot; name=&quot;Message_Design&quot;>Message Design&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    In this approach, the focus is very much on the service domain. Techniques such as domain engineering or&#xD;
    object-oriented analysis and design provide much insight into the development of abstract domain models. This focus&#xD;
    generally produces highly reusable models for message schema. The service design is usually a secondary activity&#xD;
    although it is sometimes done in parallel. In Electronic Data Interchange (EDI), for example, there is no real notion&#xD;
    of a service interface because EDI systems usually have a single global inbox and outbox for messages.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    An example of such an approach might be in the traditional business-to-business arena, typified by EDI standardization.&#xD;
    In this case, the focus of the design activity is the development of message schema agreed upon in some industry or&#xD;
    other scope and is deemed to be representative of the schema of a class of messages, for example, and industry&#xD;
    standards such as ACORD, SWIFT, and RosettaNet (see&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/tasks/soa_service_message_design_D1BA096D.html&quot; guid=&quot;_ObqZoCwUEduKcvYAyaKSaA&quot;>Task:&#xD;
    Message Design&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Service_Design&quot; name=&quot;Service_Design&quot;>Service Design&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    In this approach, the designer is concerned with exposing, as a service or set of services, functionality expected of&#xD;
    the business or application. In this case, we do not necessarily know what the client of the services will choose to do&#xD;
    with our service, but we do know the kinds of interactions such clients will expect. Therefore, messages tend to be&#xD;
    secondary and are developed in response to the requirements of an operation.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    An example of this approach would be the Web Services APIs presented by companies such as &lt;u>Amazon&lt;/u> and&#xD;
    &lt;u>eBay&lt;/u>. Such service interfaces do not impose a business process on the client. In most cases they do not even&#xD;
    impose required interfaces on the client, but they expose the operations of their respective service providers in a&#xD;
    clear and intuitive way to third-party developers.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    As mentioned above, service-centric modeling often lends itself well to a use-case driven approach by understanding the&#xD;
    needs of actors, the external clients of the service, and providing operations that support these needs, operations&#xD;
    such as browsing catalogs, adding items to a shopping cart, checking out, and so on.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Collaboration_Design&quot; name=&quot;Collaboration_Design&quot;>Collaboration Design&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    In a collaboration design, the focus is on the collaboration of two or more services; this is very much a process view&#xD;
    of the services and is related to more traditional business modeling than it is to a software development activity. In&#xD;
    this approach, services are seen as fulfilling roles in the collaboration and the service specification is therefore&#xD;
    the set of responsibilities defined for the role across one or more collaborations.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    Such an approach would be recognizable to those that have been involved in the development of RosettaNet Partner&#xD;
    Interchange Processes (PIPs) or in the development of the OAGIS standards, although the collaborations are less than&#xD;
    complete in these cases. Such an approach would be common within a business in terms of either business-process design&#xD;
    or in business-integration activities where the components of an IT system are exposed as services.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;MsoBodyTextIndent&quot;>&#xD;
    In this case, it is usually the case that the service specification can be derived directly from the collaboration, but&#xD;
    this approach tends to focus less on message content leading to a requirement for a hybrid approach for completeness.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Policy_Identification&quot; name=&quot;Policy_Identification&quot;>Policy Identification and Capture&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Policy is a broad term that we use here to cover statements or constraints that can be considered non-functional&#xD;
    requirements. At the level of this model, we have to realize that we do not want the model to be populated with&#xD;
    detailed statements about technical information but more realistically, we capture the intent of the system in regard&#xD;
    to these requirements. For example, we may know that a certain message has to be transmitted and kept private as our&#xD;
    customers' personal details are included; we want to capture the intent that the message be private, not that we&#xD;
    require data encryption using AES 128 bit encryption over a canonical XML data set with X.509 certificates for public&#xD;
    key encryption, mainly because very few people will know what this means, let alone be able to specify it in a model at&#xD;
    this level of abstraction (see&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/tasks/sec_identify_security_patterns_1953748F.html&quot; guid=&quot;_m8lcIDIyEduePY7oPsXsLA&quot;>Task:&#xD;
    Identify Security Patterns&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following diagram demonstrates the association of policy with the elements of the &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Service Model&lt;/a>&lt;/i>. Note that policy information may be attached to&#xD;
    information other than the specification components identified below, although this is the primary area of interest.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;205&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;resources/co_soa_policy-01.gif&quot; width=&quot;329&quot;&#xD;
    border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on modeling security policy, see the white paper &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/whitepapers/modeling_security_concerns_in_service-oriented_architectures_3961AE50.html&quot;&#xD;
     guid=&quot;1.328991553095394E-305&quot;>Modeling Security Concerns in Service-Oriented Architecture&lt;/a>&lt;/i>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_qq8toPS3EdmIX5Pw7v8pRw" name="Model Service Dependencies " guid="_qq8toPS3EdmIX5Pw7v8pRw">
    <sectionDescription>&lt;p>&#xD;
    Another key aspect of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Artifact: Service Model&lt;/a> which must be developed during specification&#xD;
    is the capture of the dependencies between services. &lt;a id=&quot;Describe_Dependencies&quot; name=&quot;Describe_Dependencies&quot;>&lt;/a>As&#xD;
    a part of the service model, a number of dependencies are naturally captured. These can be as obvious as the&#xD;
    relationship between a service and its specification or more complex, such as the logical relationship between two&#xD;
    independent services because they both implement the same specification. These dependencies (described in &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Artifact: Service Model&lt;/a>&amp;nbsp;and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/reports/service_dependencies_D8D49422.html&quot;&#xD;
    guid=&quot;1.2262765587812462E-305&quot;>Report: Service Dependencies&lt;/a>) are important in understanding the ability to deploy a&#xD;
    service as an autonomous unit and will affect its evolution over time as dependencies become constraints on the service&#xD;
    ability to change.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Service dependencies describe the relationships between services that arise in the larger context of how they will be&#xD;
    used. When a service is formed from a composition of other services, the composing service depends on the composed&#xD;
    services. When services are used in the context of a business process, there is a process related dependency that&#xD;
    arises from the inherent sequence of steps in the business process that dictates the order in which services will be&#xD;
    used.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Functional dependencies/Composite Dependency&lt;/b> that arise from composition of multiple services.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Example: Reserve Vehicle will depend on Check rates and Make Reservation for its functionality&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Temporal dependency&lt;/b> where there is some pre- or post- condition or processing requirement that will need to&#xD;
        be accounted for in compositions or choreographies.&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;b>Pre-condition dependency&lt;/b> - i.e. another service invocation must have executed successfully before&#xD;
                the current invocation can begin execution.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Processing dependency&lt;/b> - i.e. another service invocation is required to complete the successful&#xD;
                execution of the current service.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Post-condition dependency&lt;/b> - this appears in cases where a service requires another service&#xD;
                invocation after its execution.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These dependencies may often be a part of the decision process a service client has to go through in choosing to reuse&#xD;
    a service, particularly if there are multiple implementations to chose from.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The kinds of dependencies/associations in the service model that are important as listed below.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The relationship between a service and the Service Providers that implements it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The relationship between a service and the Service Specification it implements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The relationship between a service and any Service Specification it requires.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The relationship between a service and any Service Channel that connects it to other services and therefore the&#xD;
        service on the other end of the channel.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The relationship between a service and any Service Partition in which the service appears.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    It is therefore important that all service specifications be complete, not only with respect to the operations and&#xD;
    messages they provide, but also any dependencies such as required interfaces for callback operations. The report &lt;i>&lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../soa.rup_soma/guidances/reports/service_dependencies_D8D49422.html&quot;&#xD;
    guid=&quot;1.2262765587812462E-305&quot;>Service Dependencies&lt;/a>&lt;/i> provides an overview of the important dependencies for the&#xD;
    service model.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_ryvJcEnxEduC74V7YHXTOQ" name="Model Service Composition and Flows" guid="_ryvJcEnxEduC74V7YHXTOQ">
    <sectionDescription>&lt;p>&#xD;
    Services are often composed of other, existing, services and in some cases technology such as choreography can allow&#xD;
    for a service to be developed without explicit code as purely a composition of existing services. During specification,&#xD;
    services that are reusing elements already in the enterprise portfolio, and have documented their dependencies on these&#xD;
    services, may be considered as composite services if their functionality relies upon the function of a composed service&#xD;
    and if the composite may not be deployed without access to the composed service(s).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In some SOA frameworks, a &lt;em>Business Process Layer&lt;/em> is intended to manage only choreographed composite services&#xD;
    where complex processes are provided as managed choreographies of more fine-grained services. In this case the Business&#xD;
    Process Execution Language for Web Services (BPEL4WS) can be used as a tool for the development of composite services,&#xD;
    service flows and business process layers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Thus, two kinds or composite services may be identified:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Hardwired composite services&lt;/strong> - these are characterized by low flexibility, owing to pre-defined&#xD;
        flow and control of services where the flow and control is not externalized. These types of services have&#xD;
        attractive Qualities of Service attributes such as performance.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Loosely wired composite services&lt;/strong> - these are characterized by high flexibility where composing&#xD;
        services into business processes is accomplished by externalizing flow and control. The flow description of the&#xD;
        composition is externalized. This type of composition exploits modeling tools, dynamic variability through rules,&#xD;
        and static variability through modeling. Composition using BPEL is an example.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/concepts/service_composition_and_choreography_41EDEECB.html&quot;&#xD;
    guid=&quot;7.723783423994501E-306&quot;>Concept: Service Composition and Choreography&lt;/a> as well as &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../soa.rup_soma/guidances/guidelines/service_realization_325D86D9.html&quot;&#xD;
    guid=&quot;_QNuHcEV1Edqpo8Lgp7-Wmg&quot;>Guideline: Service Realization - BPEL services in a SOA application&lt;/a> for a&#xD;
    project-specific example.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_fQTTkDL7EduWI_fHNNtVQA" name="Document Non-Functional Requirements" guid="_fQTTkDL7EduWI_fHNNtVQA">
    <sectionDescription>&lt;p>&#xD;
    Utilizing a Service-Oriented Architecture provides the opportunity to choose a&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_provider_C00D3410.html&quot;&#xD;
    guid=&quot;{8427751F-3C14-4CEB-9816-5112BDB91EED}&quot;>Artifact: Service Provider&lt;/a> based not only on the functionality it&#xD;
    provides, but on the Qualities of Service (QoS) that it may&amp;nbsp;guarantee. One of the reasons for changing a Service&#xD;
    Provider may often be a result of a change in non-functional requirements, necessitating a new level of QoS not&#xD;
    currently supported by an existing provider. It may also result from the degradation in QoS expected by the Service&#xD;
    Consumer. A Service-Oriented Architecture allows this agility at a lower cost, in general, than other architectural&#xD;
    styles.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    QoS can be viewed from two perspectives: that of the Provider and Consumer.&amp;nbsp;The Service Provider guarantees to&#xD;
    provide and maintain a quality of service for each of its services or group of its services. The Service Consumer, on&#xD;
    the other hand, &quot;shops around&quot; for the desired QoS and chooses a Provider based on QoS. It is also important to note&#xD;
    that in commercial settings where the Consumer and Provider enter into a legal contract over the use of the service,&#xD;
    these quality of service guarantees are reified in Service Level Agreements, frequently with penalties associated with&#xD;
    the failure of a Provider to meet such agreements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Therefore, it is very important to clearly specify the non-functional requirements required by the consumer (e.g., cost&#xD;
    of transaction, performance, availability, security, etc.) for a service or set of services. In this task of Service&#xD;
    Specification, we identify the non-functional requirements for the desired QoS. The non-functional requirements will be&#xD;
    used to commit resources for service components that offer the services and to fund the realization and maintenance of&#xD;
    service components that will ensure the delivery of the QoS over time. Key architectural decisions must be made to&#xD;
    ensure that the promised quality of service based on the non-functional requirements is achieved.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The manner in which Non-Functional Requirements are attached to the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
    guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>Artifact: Service Specification&lt;/a>&amp;nbsp;is not defined by this guidance.&#xD;
    Neither are there bounds set on what constitutes such a requirement, obviously QoS, Security have been mentioned above,&#xD;
    examples might include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Availability (i.e. mean time between failure)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Operational window (is there ever a time when the service is not expected to be used?)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Response time (how quickly does the service need to respond to a request)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Peak throughput (how many requests for the service can arrive per unit of time&amp;nbsp;such as&amp;nbsp;per second, per&#xD;
        minute, per hour)&#xD;
    &lt;/li>&#xD;
&lt;/ul></sectionDescription>
  </sections>
  <sections xmi:id="_n_29YE-GEdu0EMZ-3o0kDQ" name="Document State-Management Requirements" guid="_n_29YE-GEdu0EMZ-3o0kDQ">
    <sectionDescription>&lt;p>&#xD;
    Although individual services are considered stateless, compositions often have requirements to maintain state&#xD;
    information across the invocation of the composed services. The choreographer of the services is often responsible for&#xD;
    the management of state. Alternatively, a component that implements and realizes multiple related services or&#xD;
    operations on services may need to maintain state between invocations for performance reasons.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    State Management in SOA environment can be considered to fall into three main categories:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Transaction State&lt;/strong> - where a service has an open transaction during a conversation with a client.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Security State&lt;/strong> - where a security context is held open during a conversation with a client.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Functional State&lt;/strong> - where the conversation with a client involves a number of related operations.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information see the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../soa.rup_soma/guidances/guidelines/state_management_for_services_E4156B50.html&quot;&#xD;
    guid=&quot;4.2228409903513537E-306&quot;>Guideline: State Management for Services&lt;/a>.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>&lt;ul>&#xD;
    &lt;li>&#xD;
        To define the services and structure of a service-oriented solution in terms of collaborations of contained design&#xD;
        elements and external subsystems/interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To analyze the service for commonality and variability (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../soa.rup_soma/guidances/guidelines/variability_analysis_ADC6BC98.html&quot;&#xD;
        guid=&quot;_dyVEgDJdEduxsZm92FKuLw&quot;>Guideline: Variability Analysis&lt;/a>).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To document the specification of services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        To determine the dependencies and the communication between services.&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
