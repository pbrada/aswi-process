<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_xypspcezEdmYjcUf1_oIew" name="web_application_frameworks,1.099460392705072E-303" guid="_xypspcezEdmYjcUf1_oIew" changeDate="2006-01-18T08:49:51.056-0800" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Service Data Objects is a specification for a programming model that allows access to back-end data in a uniform, data&#xD;
    source independent and disconnected way. The model allows data to be retrieved from any type of data source (Relational&#xD;
    Database, EJB Entity Beans, Web Service, XML data source, and so forth) and presented uniformly as a structured graph&#xD;
    of data (DataGraph). SDO provides for disconnected operations by allowing the retrieval of the DataGraph to be&#xD;
    independent of any back-end connections or transactions. It is still a proposed specification submitted through the JCP&#xD;
    as Java Specification Request (JSR) 235.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Architecture&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The SDO architecture uses a uniform data access layer (Data Mediator Service) to return DataGraphs to clients from&#xD;
    heterogeneous data sources. Figure 4 shows the components of the SDO architecture.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;SDO Architecture Data object&quot; src=&quot;resources/sdo_architecture.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    Figure 4: SDO Architecture DataObject&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A DataObject holds actual data (for example, primitive values or row of data from a relational database) and possible&#xD;
    references to other DataObjects. It can be introspected to determine its type, relationships, and constraints.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    DataGraph&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A DataGraph holds a set of DataObjects and typically represents the unit of transfer between components in the&#xD;
    architecture. It records all changes to data, including new, changed or deleted Data Objects.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Data Mediator Service&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A Data Mediator Service is responsible for interacting with a Data Source to produce DataGraphs representing the data.&#xD;
    Native data representation is converted to the SDO graphical representation by this pluggable service. The Mediator is&#xD;
    also responsible for applying changes in a DataGraph back to the Data Source.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Framework Applicability&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    SDO technology promises easy tool and framework integration. In the context of JSF and other MVC frameworks, the&#xD;
    following two solutions can be considered:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Binding from UI component to SDO (JSF)&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a JSF framework, values for Web user interface components can be declaratively bound to SDOs for data retrieval&#xD;
    purposes. For example, a Data Table component could be bound to an SDO for retrieval of its values from a back-end data&#xD;
    source. This combination makes data connectivity from a UI component easy with no programming required. Figure 5 shows&#xD;
    the resulting architecture of binding JSF UI components to SDOs.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;257&quot; alt=&quot;Using SDOs with JSF &quot; src=&quot;resources/sdo_jsf.gif&quot; width=&quot;556&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;strong>Figure 5: Using SDOs with JSF&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>Model object to SDO (any MVC framework)&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The model layer of an MVC framework could use SDOs to access back-end data. Figure 6 shows an example of a model client&#xD;
    using SDOs to access data persisted using Entity EJBs. The model object uses DataGraphs returned by a Stateless Session&#xD;
    EJB facade. This Session bean facade, in turn, retrieves the DataGraphs from the Mediator, which acts as a data facade&#xD;
    for the Entity EJB based persistence mechanism.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;174&quot; alt=&quot;Using SDO with Model objects and EJBs&quot; src=&quot;resources/sdo_ejb.gif&quot; width=&quot;584&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;strong>Figure 6: Using SDOs with Model objects and EJBs&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    Resources&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    The following links provide additional information related to the application frameworks and component technologies&#xD;
    discussed in this document:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Struts Documentation: &lt;a&#xD;
        href=&quot;http://jakarta.apache.org/struts/index.html&quot;>http://jakarta.apache.org/struts/index.html&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        JavaServerFaces Documentation: &lt;a&#xD;
        href=&quot;http://java.sun.com/j2ee/javaserverfaces&quot;>http://java.sun.com/j2ee/javaserverfaces&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Struts-Faces Integration Library: &lt;a&#xD;
        href=&quot;http://cvs.apache.org/builds/jakarta-struts/nightly/struts-faces/&quot;>http://cvs.apache.org/builds/jakarta-struts/nightly/struts-faces/&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Service Data Objects White Paper: &lt;a&#xD;
        href=&quot;ftp://www6.software.ibm.com/software/developer/library/j-commonj-sdowmt/Next-Gen-Data-Programming-Whitepaper.doc&quot;>ftp://www6.software.ibm.com/software/developer/library/j-commonj-sdowmt/Next-Gen-Data-Programming-Whitepaper.doc&lt;/a>&#xD;
        (&lt;a href=&quot;http://www.microsoft.com/office/word/default.asp&quot;>download MS-Word&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Developing JSF Applications using WebSphere Studio V5.1.1:&lt;br />&#xD;
         &lt;a&#xD;
        href=&quot;http://www-106.ibm.com/developerworks/websphere/techjournal/0401_barcia/barcia.html&quot;>http://www-106.ibm.com/developerworks/websphere/techjournal/0401_barcia/barcia.html&lt;br />&#xD;
        &lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
