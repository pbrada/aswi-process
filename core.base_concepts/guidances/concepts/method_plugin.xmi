<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_0LCr8BUFEdqrUt4zetC1gg" guid="_0LCr8BUFEdqrUt4zetC1gg" changeDate="2005-11-07T14:06:50.711-0800" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    Method Plugin conceptually represents a unit for configuration, modularization, extension, packaging, and deployment of&#xD;
    method content and processes.&amp;nbsp; A Process Engineer shall design&amp;nbsp;Plugins and allocate content to these Plugins&#xD;
    with requirements for extensibility, modularity, reuse, and maintainability in mind.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Plug-ins can directly contribute new content, replace existing content, or to cross-reference to any Content Element or&#xD;
    Process within another Plug-in that it extends.&amp;nbsp; Similar to UML 2.0's 'package merge' mechanism transformation&#xD;
    interpretations, interpreting these Method Plug-in mechanisms results into new extended Method Content and&#xD;
    Processes.&amp;nbsp; For example, a J2EE Extensions Plugin for RUP might contain additional steps for Tasks identifying&#xD;
    design elements, new Work Products extensions to existing Roles to be responsible for the new Work Products, additional&#xD;
    relationships of existing Content Elements to new J2EE specific Guidance elements (such as Guidelines, White Papers,&#xD;
    Checklists), additional Activities for a Delivery Process, new Capability Patterns, etc.&amp;nbsp; A Method Plug-in defines&#xD;
    these extension using Variability Element relationships and interpretation of these leads to new Method Content and&#xD;
    Processes.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
