<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C7siQtwuEdmRU7lXzo6lKQ" name="java_2_platform_enterprise_edition_j2ee_overview,1.527482214591853E-307" guid="_C7siQtwuEdmRU7lXzo6lKQ" changeDate="2005-10-25T14:29:04.069-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In today's fast-paced e-business world of complex distributed applications, it's critical that your enterprise&#xD;
    applications be brought to market quickly. This means your project team can't afford to spend time developing&#xD;
    system-level services, such as remote connectivity, naming, persistence, security, or transaction management. Your&#xD;
    project team needs to develop and make use of portable, reusable components; you don't want to spend any time&#xD;
    reinventing tried and true architectures.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Java&amp;trade; 2 Platform, Enterprise Edition (J2EE&amp;trade;) addresses this need by providing a well-documented, standards-based&#xD;
    framework for developing and running distributed, multi-tier, component-based Java applications. This framework handles&#xD;
    much of the low-level complexity of the application, such as remote connectivity, naming, persistence, security, and&#xD;
    transaction management, leaving developers free to concentrate on the business logic of the application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The J2EE platform consists of:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A set of standards for J2EE components and the J2EE platform on which the components run.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A blueprint for application development that describes the J2EE platform in detail, giving industrial-strength,&#xD;
        best-practice information on how to develop J2EE applications.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A reference implementation of the J2EE platform, provided by Sun Microsystems Inc. as a standard against which&#xD;
        commercial J2EE products can be measured. The reference implementation includes fully developed sample&#xD;
        applications.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A compatibility test suite for testing and evaluating commercial J2EE implementations against the J2EE standards.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The J2EE platform is analogous to the services provided by your computer's operating system-using programming tools,&#xD;
    the operating system provides standard services on top of which you can develop and execute applications, without being&#xD;
    concerned about low-level management of disk access, memory, video output, networking, and so forth. You're concerned&#xD;
    with the details of your application, not the details of the underlying system. The J2EE Platform provides a&#xD;
    sophisticated &lt;i>operating system&lt;/i> for enterprise applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By using the J2EE platform, you simplify your development effort so that your project team can focus their energy on&#xD;
    the actual business logic of the application, instead of spending critical development time solving system-level&#xD;
    issues. A project team that can focus on what the application does, rather than focusing on how to deliver all of the&#xD;
    underlying services needed by the application, is much more likely to deliver an on-time, bug-free system that meets&#xD;
    your user's requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, see Sun's J2EE Platform overview at &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
    target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Products &amp;amp; APIs &amp;gt; Java&amp;trade; 2 Platform, Enterprise&#xD;
    Edition (J2EE&amp;trade;) &amp;gt; Overview&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    J2EE Development in a Nutshell&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    From an application developer's perspective:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        You purchase a commercial J2EE platform, in the form of a J2EE-compliant server. The J2EE server's behavior is&#xD;
        specified by the J2EE standard.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You develop or purchase off-the-shelf &lt;a href=&quot;#J2EE_Components&quot;>J2EE components&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You deploy and execute your J2EE components on your &lt;a href=&quot;#J2EE_Servers&quot;>J2EE-compliant server&lt;/a>, which&#xD;
        provides all of the services needed by your J2EE components.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Example&quot; name=&quot;Example&quot;>Example&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A simple example of a J2EE application is an e-commerce site, where a client (user) uses a Web browser to remotely&#xD;
    access a J2EE server. The J2EE server provides &lt;a href=&quot;#Web_Tier&quot;>Web tier&lt;/a> and &lt;a href=&quot;#Business_Tier&quot;>business&#xD;
    tier&lt;/a> services, and interacts with an &lt;a href=&quot;#EIS_Tier&quot;>Enterprise Information Systems (back end) tier&lt;/a> that&#xD;
    provides RDBMS access.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Why_Use_J2EE?&quot; name=&quot;Why_Use_J2EE?&quot;>&lt;/a>Why Use J2EE?&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You'll want to use the J2EE platform for developing your Java e-commerce or Enterprise application if any of these&#xD;
    statements apply:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        You want to make use of a &lt;a href=&quot;#Standardized,_Industry-Tested_Framework&quot;>standardized, industry-tested&#xD;
        framework&lt;/a> that provides support for transaction management, naming, security, remote connectivity, and database&#xD;
        access.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You require &lt;a href=&quot;#Portability&quot;>portability&lt;/a>-the ability for your components to be deployed on your choice of&#xD;
        J2EE-compliant server.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to &lt;a href=&quot;#Reusable_Components&quot;>reuse your components&lt;/a> or use purchased off-the-shelf components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to make use of your developers' architectural experience on the J2EE platform, using &lt;a&#xD;
        href=&quot;#Tried_and_True_Architecture_and_Design_Patterns&quot;>tried and true architecture and design patterns&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Your system needs to be &lt;a href=&quot;#Scalability&quot;>scalable&lt;/a> to meet increased loads.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to reduce development time by using powerful J2EE &lt;a href=&quot;#Development_and_Deployment_Tools&quot;>development&#xD;
        and deployment tools&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to easily &lt;a href=&quot;#Back_End_Integration&quot;>integrate with back end systems&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to take advantage of simple, powerful &lt;a href=&quot;#Security&quot;>security&lt;/a> features.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each of these points is discussed in further detail in the rest of this section.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Standardized,_Industry-Tested_Framework&quot; name=&quot;Standardized,_Industry-Tested_Framework&quot;>&lt;/a>Standardized,&#xD;
    Industry-Tested&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#J2EE_Components&quot;>J2EE components&lt;/a> run in J2EE &lt;a href=&quot;#J2EE_Containers&quot;>containers&lt;/a>, typically&#xD;
    provided as part of a J2EE-compliant server. These containers provide a set of standard services (APIs) used by the&#xD;
    J2EE components. The APIs are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        J2SE 1.4 &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                JDBC&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Java IDL&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Remote Method Invocation with CORBA's Internet Inter-ORB Protocol (RMI-IIOP)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Java Naming and Directory Interface (JNDI)&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Java Authentication and Authorization Service (JAAS)&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Transaction API (JTA)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        JavaMail&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Message Service (JMS).&lt;br />&#xD;
         For more information on JMS, see &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/concepts/java_messaging_service_jms_84F49452.html&quot;&#xD;
        guid=&quot;9.950419951286216E-306&quot;>Concept: Java Messaging Service (JMS)&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        JavaBeans Activation Framework (JAF)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Enterprise JavaBeans (EJB)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Servlet&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java API for XML Processing (JAXP)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Connector (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.3)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        JavaServer Pages (JSP)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Web Services for J2EE (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java API for XML-based RPC (JAX-RPC) (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        SOAP with attachments API for Java (SAAJ) (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java API for XML Registries (JAXR) (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        J2EE Management (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Management Extensions (JMX) (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        J2EE Deployment (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Authorization Service Provider Contract for Containers (JACC) (&lt;b>Note&lt;/b>: not supported prior to J2EE 1.4)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Portability&quot; name=&quot;Portability&quot;>Portability&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    J2EE components and applications are portable across J2EE-compliant servers, with no code modifications necessary, so&#xD;
    you can deploy your application to the J2EE-compliant server of your choice simply by updating server-specific&#xD;
    deployment information contained in eXtended Markup Language (XML) &lt;a href=&quot;#Deployment_Descriptors&quot;>deployment&#xD;
    descriptor&lt;/a> files.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The standardization of the J2EE specification has led to industry competition-you have a choice of J2EE-compliant&#xD;
    servers according to your needs and budget.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Reusable_Components&quot; name=&quot;Reusable_Components&quot;>&lt;/a>Reusable Components&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Because they conform to the J2EE standard, J2EE components can be bought off-the-shelf and plugged into your J2EE&#xD;
    application as required, saving development (especially debugging and testing) effort.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you develop a component, you can reuse it in another application or deploy it to different J2EE-compliant servers,&#xD;
    as required.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Tried_and_True_Architecture_and_Design_Patterns&quot;&#xD;
    name=&quot;Tried_and_True_Architecture_and_Design_Patterns&quot;>&lt;/a>Tried and True Architecture and Design Patterns&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The J2EE platform defines a well-structured, &lt;a href=&quot;#Multi-Tier_Architecture&quot;>multi-tiered application&#xD;
    architecture&lt;/a>. By leveraging off the J2EE architecture, your developers can quickly get on with developing the&#xD;
    actual business logic of the application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    J2EE documentation includes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A blueprint for application development that describes the J2EE platform in detail and gives best-practice&#xD;
        information on how to develop J2EE applications.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Well-documented J2EE patterns-industry best practices-that describe solutions to common J2EE architectural and&#xD;
        design problems.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information on the J2EE Platform, see &lt;a href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>.&#xD;
    Follow the links to &lt;b>J2EE &amp;gt; Blueprints&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Scalability&quot; name=&quot;Scalability&quot;>&lt;/a>Scalability&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    J2EE supports scalability to increase performance or to meet increased loads in several ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Performance enhancement features in the J2EE container&lt;/b> - such features include resource pooling (database&#xD;
        connection pooling, session bean instance pooling, and thread pooling), asynchronous message passing, and efficient&#xD;
        component lifecycle management. For example, opening a database connection is slow. Also, database connections&#xD;
        could be a scarce resource due to, for instance, licensing restrictions. The J2EE platform manages this using &lt;a&#xD;
        href=&quot;#Database_Connection_Pooling&quot;>database connection pooling&lt;/a>; the J2EE container keeps a pool of open&#xD;
        connections that can be assigned to a component as required, resulting in fast and efficient connections.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Load balancing can be achieved by clustering&lt;/b> - deploying the same components to multiple servers on&#xD;
        different machines. The load to each of the servers can then be balanced as required; for example, according to a&#xD;
        round-robin algorithm or according to server load. The J2EE platform specification does not require load balancing&#xD;
        capability in a J2EE server, but does suggest that a high-end server would have it. J2EE server vendors offer&#xD;
        various load-balancing solutions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Application partitioning&lt;/b> - logically distinct parts of an application can be deployed to different servers;&#xD;
        for example, deploying an online mail order application's inventory and accounting subsystems to separate servers.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Development_and_Deployment_Tools&quot; name=&quot;Development_and_Deployment_Tools&quot;>&lt;/a>Development and Deployment Tools&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Vendors have responded to the need for J2EE tools by providing excellent support for J2EE development in their Java&#xD;
    Integrated Development Environments (IDEs) including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Wizards for servlet creation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Wizards and dialogs for EJB creation and maintenance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Deployment descriptor generation and maintenance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        EJB object to database mapping (including generation of deployment descriptor information for container-managed&#xD;
        relationships)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with a Web container for testing Web services&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Seamless in-IDE deployment, debug, and testing of EJBs by integration with a J2EE EJB container and its deployment&#xD;
        tools&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Automatic generation of J2EE test clients&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with UML modeling tools&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Back_End_Integration&quot; name=&quot;Back_End_Integration&quot;>&lt;/a>Back End Integration&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The back end refers to the enterprise information system (EIS) tier of the application. Back end systems can be, for&#xD;
    example, RDBMS, legacy systems, or enterprise resource planning systems (ERPs).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    J2EE supports transactional access to RDBMS EISs using the JDBC and JTA APIs. In addition, EJB containers support&#xD;
    container-managed persistence, in which transactional RDBMS connection and access is handled automatically by the&#xD;
    container.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    J2EE's Connector Architecture Service Provider Interface (SPI) defines a standard for connecting non-RDBMS EIS&#xD;
    resources to a J2EE container. An EIS-specific resource adapter (supplied by the EIS vendor) is plugged in to the J2EE&#xD;
    container, extending the container so that it provides transactional, secure support for that EIS. Components in the&#xD;
    container can then access the EIS through the J2EE Connector Architecture SPI.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note&lt;/b>: J2EE's Connector Architecture SPI is not supported prior to J2EE 1.3.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Security&quot; name=&quot;Security&quot;>&lt;/a>Security&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    J2EE provides simple, powerful security features. Security information for J2EE components is defined in their&#xD;
    deployment descriptors. This information defines what security &lt;i>roles&lt;/i> are authorized to access a particular URL&#xD;
    and/or methods of a component. A security role is merely a logical name for a grouping of users; for example, an&#xD;
    organization's management team members could all be assigned a role named &quot;managers&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Since the security information is declared in the deployment descriptor, the security behavior can be changed without&#xD;
    an expensive code update-debug-test cycle.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Multi-Tier_Architecture&quot; name=&quot;Multi-Tier_Architecture&quot;>&lt;/a>Multi-Tier Architecture&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE is a multi-tier distributed application architecture-consisting of a &lt;a href=&quot;#Client_Tier&quot;>client tier&lt;/a>, &lt;a&#xD;
    href=&quot;#Middle_Tier&quot;>middle tier&lt;/a>, and &lt;a href=&quot;#EIS_Tier&quot;>EIS or back end tier&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Figure 1 shows the multi-tier architecture of the J2EE platform, as well as the various J2EE containers supporting J2EE&#xD;
    components.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/co_j2e4.jpg&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;TEXT-ALIGN: center&quot; align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;2&quot;>&lt;b>Figure 1: J2EE Multi-tier Architecture&lt;/b>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Client_Tier&quot; name=&quot;Client_Tier&quot;>&lt;/a>Client Tier&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Client tier components run in client containers. The client tier can be implemented in these ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Application_Clients&quot;>Standalone Java applications&lt;/a> - usually a GUI (also known as a &quot;thick client&quot;).&#xD;
        Such a Java application must be installed on every client machine. A Java application can access the EIS tier or&#xD;
        middle tier through APIs such as JDBC.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#HTML_Pages&quot;>Static HTML pages&lt;/a> - provide a limited GUI for an application.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dynamic HTML - generated by &lt;a href=&quot;#Java_Server_Pages&quot;>JSP pages&lt;/a> or &lt;a href=&quot;#Java_Servlets&quot;>servlets&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Applets&quot;>Applets&lt;/a> - run in a Web browser. Applets are embedded in an HTML page and are typically used&#xD;
        to provide a GUI.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Middle_Tier&quot; name=&quot;Middle_Tier&quot;>&lt;/a>Middle Tier&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The middle tier consists of the &lt;a href=&quot;#Web_Tier&quot;>Web tier&lt;/a> and &lt;a href=&quot;#Business_Tier&quot;>business tier&lt;/a>. Web&#xD;
    tier components run in a J2EE Web server that provides a &lt;a href=&quot;#Web_Container&quot;>Web container&lt;/a>. Business tier&#xD;
    components run in a &lt;a href=&quot;#J2EE_Servers&quot;>J2EE application server&lt;/a> that provides an &lt;a href=&quot;#EJB_Container&quot;>EJB&#xD;
    container&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Web_Tier&quot; name=&quot;Web_Tier&quot;>&lt;/a>Web Tier&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Web tier components include &lt;a href=&quot;#Java_Servlets&quot;>servlets&lt;/a> and &lt;a href=&quot;#Java_Server_Pages&quot;>JSP pages&lt;/a>, which&#xD;
    manage the interaction with the client tier, insulating the clients from the business and EIS tier. Clients make&#xD;
    requests of the Web tier, which processes the requests and returns the results to the client. Client requests to&#xD;
    components in the Web tier generally result in Web tier requests to components in the business tier, which, in turn,&#xD;
    might result in requests to the EIS tier.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Business_Tier&quot; name=&quot;Business_Tier&quot;>&lt;/a>Business Tier&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Business tier components are &lt;a href=&quot;#Enterprise_JavaBeans&quot;>EJBs&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        They contain the application business logic.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        They make requests to the EIS tier according to the business logic, typically in response to a request from the Web&#xD;
        tier.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;EIS_Tier&quot; name=&quot;EIS_Tier&quot;>&lt;/a>EIS Tier&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The EIS tier represents the application's stored data, often in the form of an RDBMS. The EIS tier might also consist&#xD;
    of legacy systems or ERPs, accessed through the J2EE Connector Architecture API.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the J2EE Connector Architecture API, see &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
    target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to Products &amp;amp; Technologies &amp;gt; J2EE &amp;gt; J2EE Connector&#xD;
    Architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on J2EE's standard deployment configurations, see &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/j2ee_deployment_configurations_C0F819AF.html&quot;&#xD;
    guid=&quot;7.671163061311939E-306&quot;>Concept: J2EE Deployment Configurations&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;J2EE_Servers&quot; name=&quot;J2EE_Servers&quot;>&lt;/a>J2EE Servers&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE servers are commercial products that implement the J2EE platform. Examples of commercial J2EE servers are BEA&#xD;
    WebLogic, Borland Enterprise Server, IBM WebSphere, and iPlanet.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usage of the terminology &quot;J2EE server&quot; is somewhat loose. Usually, what's meant is &quot;a J2EE server that supports both a&#xD;
    Web container and an EJB container&quot;. Using tighter terminology, a J2EE Web server (such as the J2EE reference Web&#xD;
    server implementation Tomcat) supports a Web container; a J2EE application (or EJB) server supports an EJB container.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;J2EE_Containers&quot; name=&quot;J2EE_Containers&quot;>&lt;/a>J2EE Containers&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#J2EE_Components&quot;>J2EE components&lt;/a> run in, or are hosted by, J2EE containers generally provided as part of&#xD;
    a commercial J2EE server. Containers provide a run-time environment and standard set of &lt;a&#xD;
    href=&quot;#Services_(APIs)_for_J2EE_Components&quot;>services (APIs)&lt;/a> to the J2EE components running in the container, in&#xD;
    addition to supporting the standard J2SE APIs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    J2EE defines the following types of containers:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Application_Client_Container&quot;>application client container&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Applet_Container&quot;>applet container&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Web_Container&quot;>Web container&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#EJB_Container&quot;>EJB container&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Application_Client_Container&quot; name=&quot;Application_Client_Container&quot;>&lt;/a>Application Client Container&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A &lt;a href=&quot;#Application_Clients&quot;>J2EE application client&lt;/a> runs in an application client container, which supports&#xD;
    these J2EE APIs: JDBC, JMS, JAXP, JAAS, JavaMail, JAF, JSR, JAX-RPC, SAAJ, J2EE Management and JMX.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Practically, application client containers consist of the standard J2SE installation. The application client container&#xD;
    must support the JAAS callback handler interface to satisfy the security constraints of the rest of the enterprise&#xD;
    application in the Web and EJB containers.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Applet_Container&quot; name=&quot;Applet_Container&quot;>&lt;/a>Applet Container&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An &lt;a href=&quot;#Applets&quot;>applet&lt;/a> runs in an applet container, which supports the applet programming model and supports&#xD;
    standard J2SE APIs. Practically, applet containers are supplied as the Java plug-in to a Web browser.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Web_Container&quot; name=&quot;Web_Container&quot;>&lt;/a>Web Container&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#Web_Components&quot;>Web components&lt;/a> (&lt;a href=&quot;#Java_Server_Pages&quot;>JSP pages&lt;/a> and &lt;a&#xD;
    href=&quot;#Java_Servlets&quot;>servlets&lt;/a>) run in a Web container provided as part of a J2EE server or provided as a&#xD;
    standalone J2EE Web server. A Web container supports the following J2EE APIs and packages: JDBC, JMS, JAXP, JAX-RPC,&#xD;
    JAXR, JAAS, Java Mail, JAF, J2EE Connector Architecture, JTA, JSR, SAAJ, J2EE Management, Java Servlet, and JSP.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;EJB_Container&quot; name=&quot;EJB_Container&quot;>&lt;/a>EJB Container&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#Enterprise_JavaBeans&quot;>EJB components&lt;/a> run in an EJB container, which is provided as part of a J2EE server.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An EJB container supports the following J2EE APIs and technologies: EJB, JDBC, JMS, JAXP, JAX-RPC, JAXR, JAAS, Java&#xD;
    Mail, JAF, JTA, JSR, SAAJ, J2EE Management, and J2EE Connector Architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following subsections summarize the key functionality supported by EJB containers:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Remote_Communications&quot;>Remote Communications&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Concurrency&quot;>Concurrency&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Naming&quot;>Naming&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Persistence&quot;>Persistence&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Transaction_Management&quot;>Transaction Management&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Security_Management&quot;>Security Management&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Lifecycle_Management&quot;>Lifecycle Management&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Database_Connection_Pooling&quot;>Database Connection Pooling&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Messaging&quot;>Messaging&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Remote_Communications&quot; name=&quot;Remote_Communications&quot;>&lt;/a>Remote Communications&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJB containers hide the complexity of remote communications from developers by using container-provided classes&#xD;
    (generated by container tools when the EJB is compiled, along with RMI stub classes for the use of clients) that&#xD;
    implement the EJB interfaces. These implementation classes are remote Java objects that a client can access using Java&#xD;
    RMI. From the client's perspective, the client simply calls methods on the EJB interface, without any consideration of&#xD;
    remote communications.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Concurrency&quot; name=&quot;Concurrency&quot;>&lt;/a>Concurrency&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJB containers transparently manage concurrent requests from multiple clients. Clients can act as if they have&#xD;
    exclusive access to the EJB. For example, if two clients request the same entity EJB, the container provides each of&#xD;
    them with their own instance and manages synchronization internally without the client's knowledge.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Naming&quot; name=&quot;Naming&quot;>&lt;/a>Naming&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The EJB container provides a JNDI name space for locating EJBs deployed in the container. EJB clients can look up EJBs&#xD;
    to obtain a Home interface. The Home interface for an EJB provides methods to find and create EJB instances. As long as&#xD;
    the JNDI naming context is available from their location, clients can access the EJBs.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Persistence&quot; name=&quot;Persistence&quot;>&lt;/a>Persistence&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJB developers have the choice of two schemes for the storage of entity EJB persistent data: Container Managed&#xD;
    Persistence (CMP) and Bean Managed Persistence (BMP). CMP delegates the responsibility for implementing the data access&#xD;
    code to the container, whereas BMP leaves the EJB developer responsible for implementing that code. CMP allows the EJB&#xD;
    developer to use a standard implementation for access to persistent storage simply by declaring container-managed&#xD;
    fields in a deployment descriptor.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Transaction_Management&quot; name=&quot;Transaction_Management&quot;>&lt;/a>Transaction Management&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A transaction is a sequence of operations that succeeds or fails atomically-so that if any operation in the sequence&#xD;
    fails, no change is made to the system state. For example, say you want to issue air tickets: you would validate a&#xD;
    customer's credit card account, debit that account, and then issue the tickets. This sequence of operations should&#xD;
    occur in a single transaction, so that if any operation fails, no change is made to the customer's credit card account&#xD;
    and no tickets are issued.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    EJBs can use either &lt;a href=&quot;#Bean-Managed_Transaction_Demarcation&quot;>bean-managed transaction demarcation&lt;/a> or &lt;a&#xD;
    href=&quot;#Container-Managed_Transaction_Demarcation&quot;>container-managed transaction demarcation&lt;/a>, which is described in&#xD;
    the next two headings.&#xD;
&lt;/p>&#xD;
&lt;h6>&#xD;
    &lt;a id=&quot;Bean-Managed_Transaction_Demarcation&quot; name=&quot;Bean-Managed_Transaction_Demarcation&quot;>&lt;/a>Bean-managed transaction&#xD;
    demarcation&#xD;
&lt;/h6>&#xD;
&lt;p>&#xD;
    In bean-managed transaction demarcation, you use a simple API to demarcate transaction boundaries. This is the Java&#xD;
    Transaction API (JTA), which you use to programmatically control transaction demarcation; for example, by calling the&#xD;
    &lt;code>begin()&lt;/code>, &lt;code>commit()&lt;/code>, and &lt;code>rollback()&lt;/code> methods of the JTA UserTransaction interface.&#xD;
    The developer is responsible for coding rollback logic for transaction exception conditions, as the container does not&#xD;
    handle this automatically.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> Entity EJBs cannot use bean-managed transaction demarcation-they can only use container-managed&#xD;
    transaction demarcation.&#xD;
&lt;/p>&#xD;
&lt;h6>&#xD;
    &lt;a id=&quot;Container-managed_Transaction_Demarcation&quot;&#xD;
    name=&quot;Container-managed_Transaction_Demarcation&quot;>&lt;/a>Container-managed transaction demarcation&#xD;
&lt;/h6>&#xD;
&lt;p>&#xD;
    In container-managed transaction demarcation, you don't supply code to begin and end transactions. Instead, you supply&#xD;
    transaction attribute information in the EJB deployment descriptor for each method of your EJB. The transaction&#xD;
    attribute (one of Required, RequiresNew, NotSupported, Supports, Mandatory, or Never) tells the container what&#xD;
    transaction scope to use for the method. For example, if a client is running within a transaction and it calls a method&#xD;
    of your EJB for which the transaction attribute is set to Required, then the method will be called within the scope of&#xD;
    the existing transaction.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use container-managed transaction demarcation rather than bean-managed transaction demarcation whenever possible, so&#xD;
    that you don't have to add, debug, and test transaction demarcation code in your component. Instead, the transaction&#xD;
    behavior of each of your EJB methods is specified at deployment time, in the deployment descriptor. This means that the&#xD;
    transaction behavior can be changed without an expensive code update-debug-test cycle.&#xD;
&lt;/p>&#xD;
&lt;h6>&#xD;
    &lt;a id=&quot;Distributed_Transactions&quot; name=&quot;Distributed_Transactions&quot;>&lt;/a>Distributed transactions&#xD;
&lt;/h6>&#xD;
&lt;p>&#xD;
    A distributed transaction is a transaction that must be coordinated across multiple databases and/or multiple&#xD;
    applications. This is in contrast to a centralized transaction, such as a single J2EE application server committing&#xD;
    transactions to a single database.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &lt;i>two-phase commit&lt;/i> is necessary in distributed transactions; for example, where there is more than one database&#xD;
    being updated. Some EJB containers (such as BEA WebLogic Server 6.0) supply support for two-phase commit, using Open&#xD;
    Group's XA protocol. The application programmer does not need to write any code to handle the two-phase commit; the EJB&#xD;
    container manages it.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Security_Management&quot; name=&quot;Security_Management&quot;>&lt;/a>Security Management&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJB security is handled by the EJB container, using security information in the deployment descriptor. In the&#xD;
    deployment descriptor, you declare a set of &lt;i>roles&lt;/i> and, for each EJB method, you declare the roles that are&#xD;
    authorized to call the method.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At run-time, each client of the EJB is assigned to a role, and the EJB container manages access to the EJB's methods by&#xD;
    checking that the client role is authorized to call that method.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Since the security information is declared in the deployment descriptor, the security behavior can be changed without&#xD;
    an expensive code update-debug-test cycle.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Lifecycle_Management&quot; name=&quot;Lifecycle_Management&quot;>&lt;/a>Lifecycle Management&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJBs move through a series of states during their lifecycle in response to client requests. The EJB container is&#xD;
    responsible for managing this lifecycle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At container startup, the container creates a pool of EJB instances in a resource pool (to save startup time when the&#xD;
    EJB resource is needed). When an EJB client requests the creation of an EJB, an instance is assigned from the pool. The&#xD;
    client can now make requests of the EJB. When an EJB client requests removal of an EJB, that instance is returned to&#xD;
    the pool.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The container notifies an EJB instance of various events in the EJB lifecycle, using a set of standard callback methods&#xD;
    such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbCreate()&lt;/code> - called by the container after the EJB instance is created&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbRemove()&lt;/code> - called by the container when the EJB instance is about to be deleted&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbActivate()&lt;/code> - called by the container after the EJB instance is restored from a passive state&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbPassivate()&lt;/code> - called by the container when the EJB instance is about to be passivated&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbStore()&lt;/code> - called by the container when the EJB instance is about to be written to a database&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;code>ejbLoad()&lt;/code> - called by the container after the EJB instance fields are loaded from the database&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Each EJB is required to implement these callbacks although the EJB's implementation of the callback method is often&#xD;
    empty. For example, the container calls the EJB's &lt;code>ejbRemove()&lt;/code> method to notify the EJB that the EJB is&#xD;
    about to be removed (there has been a client request to remove the EJB). In the EJB's &lt;code>ejbRemove()&lt;/code> method,&#xD;
    you would code any operations necessary before the EJB can be removed, such as releasing any resources held by the EJB.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    EJBs can be passivated-state information is saved and the EJB instance is freed up for use by the resource pool-as&#xD;
    required by the container. A passivated EJB will be activated-state information restored-by the container if a client&#xD;
    request to that particular EJB object is received.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Database_Connection_Pooling&quot; name=&quot;Database_Connection_Pooling&quot;>&lt;/a>Database Connection Pooling&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Opening a database connection is slow. Also, database connections could be a scarce resource, due to, for example,&#xD;
    licensing restrictions. The EJB container manages this expense through database connection pooling-the container keeps&#xD;
    a pool of open connections that can be assigned and unassigned to an EJB as required, resulting in fast and efficient&#xD;
    connections.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For entity EJBs using CMP, database connections are handled automatically. No connection or SQL code needs to be&#xD;
    written-you simply specify the JNDI name of the JDBC data source in the EJB deployment descriptor and use&#xD;
    container-specific deployment tools to generate the connect routines for you. The container manages the database&#xD;
    connection pool.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For entity EJBs using BMP or for session EJBs, you need to write connection code to connect to a JDBC data source and&#xD;
    write SQL code to access the database. The JDBC data source is still managed by the container-the JDBC data source&#xD;
    actually uses a database connection pool maintained by the container.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Messaging&quot; name=&quot;Messaging&quot;>&lt;/a>Messaging&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    EJB containers are required to provide messaging support for the asynchronous exchange of messages. JMS, or other&#xD;
    messaging types, can be used by message-driven EJBs process delivered messages. Because of the JMS's involvement with&#xD;
    EJBs, they must support transactional access from Web and EJB container components like servlets, JSP pages, and EJBs.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;J2EE_Components&quot; name=&quot;J2EE_Components&quot;>&lt;/a>J2EE Components&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following section gives a brief discussion of all of the types of J2EE components. J2EE components include &lt;a&#xD;
    href=&quot;#Applets&quot;>applets&lt;/a>, &lt;a href=&quot;#Application_Clients&quot;>application clients&lt;/a>, &lt;a href=&quot;#Web_Components&quot;>Web&#xD;
    components&lt;/a>, and &lt;a href=&quot;#Enterprise_JavaBeans&quot;>Enterprise JavaBeans&lt;/a>. J2EE components run in J2EE containers.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Applets&quot; name=&quot;Applets&quot;>&lt;/a>Applets&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Applets are small programs that can be sent along with a Web page and execute in a Web browser. They could also execute&#xD;
    in other environments that support the applet programming model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Applets are primarily used for implementing user interfaces and can greatly extend the capabilities of HTML pages.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Application_Clients&quot; name=&quot;Application_Clients&quot;>&lt;/a>Application Clients&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Application clients are Java applications. They have access to the facilities of the J2EE middle tier and EIS tier.&#xD;
    They are typically desktop applications that provide a user interface. They might be used to implement a &quot;thick client&quot;&#xD;
    as described in &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/distribution_patterns_5A01CAF5.html&quot; guid=&quot;6.137181182978733E-305&quot;>Concept:&#xD;
    Distribution Patterns&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Web_Components&quot; name=&quot;Web_Components&quot;>&lt;/a>Web Components&#xD;
&lt;/h4>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Java_Servlets&quot; name=&quot;Java_Servlets&quot;>&lt;/a>Java Servlets&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Java Servlet technology allows a Web server to handle requests from a Web client and provide responses containing&#xD;
    dynamic content. A Java servlet can interact with other Web and EJB components to produce this dynamic content. The&#xD;
    generated content can take the form of any text-based document including HTML and XML. Java Servlet can also be used as&#xD;
    web services endpoint in collaboration with JAX-RPC API.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> The usage of Servlet as web services endpoint is a new feature of J2EE 1.4 (JAX-RPC 1.1) and so not&#xD;
    supported on previous versions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on J2EE servlets, see &lt;a href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>.&#xD;
    Follow the links to &lt;b>J2EE &amp;gt; Blueprints&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Java_Server_Pages&quot; name=&quot;Java_Server_Pages&quot;>&lt;/a>JavaServer Pages&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    JavaServer Pages (JSP) technology is based on Java Servlets, but it's text-based instead of code-based. A JSP page&#xD;
    processes requests and generates responses like a servlet, but its logic is primarily presentation-driven. A JSP page&#xD;
    contains mostly static HTML that defines the format for the presentation of the data obtained from other sources like&#xD;
    JavaBeans and EJBs. A Web component developer can create custom tag libraries to extend JSP to add new capabilities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on JSP, see &lt;a href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the&#xD;
    links to J2EE &amp;gt; Blueprints.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;HTML_Pages&quot; name=&quot;HTML_Pages&quot;>&lt;/a>HTML Pages&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    HTML pages can be used to support user interfaces. They might be defined as static Web pages, or could be generated by&#xD;
    servlets and JSP pages. The J2EE specification requires that J2EE Web clients support the display of HTML pages.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;JavaBeans&quot; name=&quot;JavaBeans&quot;>&lt;/a>JavaBeans&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The JavaBeans API defines an architecture for creating simple reusable components. These components can be edited and&#xD;
    assembled using application builder tools. Regular Java code is used to implement JavaBeans, so that the implementation&#xD;
    remains readable to other programmers, who might use these components, as well as to the tools.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    JavaBeans is not a J2EE technology, but is used by J2EE technologies. For example, EJBs can use JavaBeans as value&#xD;
    objects. For differences between JavaBeans and Enterprise JavaBeans, see the section titled &lt;a&#xD;
    href=&quot;#Comparing_JavaBeans_and_EJBs&quot;>&lt;i>Comparing JavaBeans and EJBs&lt;/i>&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on JavaBeans, see &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/javabean_D488CF3B.html&quot; guid=&quot;7.536447688812142E-306&quot;>Concept:&#xD;
    JavaBeans&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Enterprise_JavaBeans&quot; name=&quot;Enterprise_JavaBeans&quot;>&lt;/a>Enterprise JavaBeans&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Enterprise JavaBeans specification stipulates an architecture for the development and deployment of&#xD;
    component-based, transactional distributed business applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The components defined by the EJB specification are called Enterprise JavaBeans (EJBs). EJBs are server-side Java&#xD;
    components in which you implement the business rules of your application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    EJBs are deployed to, and run in, an environment called an EJB container, described previously under the heading &lt;i>&lt;a&#xD;
    href=&quot;#EJB_Container&quot;>EJB Container&lt;/a>&lt;/i>, which provides services such as &lt;a&#xD;
    href=&quot;#Transaction_Management&quot;>transaction management&lt;/a>, &lt;a href=&quot;#Database_Connection_Pooling&quot;>database&#xD;
    connectivity&lt;/a>, and &lt;a href=&quot;#Security_Management&quot;>security&lt;/a>. By concealing such complexities, the EJB&#xD;
    architecture enables component developers to focus on business logic.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An Enterprise JavaBean (EJB) is a collaboration of Java interfaces, an EJB implementation class, and an XML deployment&#xD;
    descriptor. The EJB interfaces and implementation class must conform to rules defined by the EJB specification, such as&#xD;
    implementing certain interfaces and providing certain callback methods.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The EJB interfaces include home interfaces that provide methods to find and create EJB instances, and component&#xD;
    interfaces that provide the business methods for a particular EJB instance. These can be remote interfaces, meaning&#xD;
    that they can be invoked across the network, or local interfaces, which means the caller must be in the same process&#xD;
    (or more precisely, in the same Java Virtual Machine). The EJB interfaces are implemented by EJB container classes that&#xD;
    delegate methods to the EJB implementation class. An exception is a finder method of a container-managed entity EJB,&#xD;
    which is handled by the container class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are three types of EJBs: &lt;a href=&quot;#Session_Beans&quot;>session beans&lt;/a>, &lt;a href=&quot;#Entity_Beans&quot;>entity beans&lt;/a>,&#xD;
    and &lt;a href=&quot;#Message-Driven_Beans&quot;>message-driven beans&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on EJBs, see &lt;a href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the&#xD;
    links to J2EE &amp;gt; Blueprints.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Session_Beans&quot; name=&quot;Session_Beans&quot;>&lt;/a>Session Beans&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A session bean component provides services that implement client-specific business logic. A single client can access&#xD;
    each session bean instance through local or remote interfaces. Session beans can save data to a database, but usually&#xD;
    call upon entity beans representing business objects to save data. Session bean instances can maintain a transient&#xD;
    conversational state.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A session bean might have a method &lt;code>getAllCustomers()&lt;/code> that returns a collection of all of the customers in&#xD;
    the database. This bean would obtain its information from the Customer entity bean and deliver the results to the&#xD;
    client.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Stateless session beans can be used as web services endpoint as defined in the JSR and EJB specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> The usage of stateless session beans as web services is a new feature of J2EE 1.4 (JSR 109 and EJB 2.1)&#xD;
    and so not supported on previous versions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on session beans, see the Enterprise JavaBeans Specification, Version 2.1 at &lt;a&#xD;
    href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Products &amp;amp;&#xD;
    Technologies &amp;gt; J2EE &amp;gt; Enterprise JavaBeans&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Entity_Beans&quot; name=&quot;Entity_Beans&quot;>&lt;/a>Entity Beans&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    An entity bean component provides services that implement business object-specific logic. Multiple clients can access&#xD;
    an entity bean instance concurrently through local or remote interfaces. Entity beans save business object data to&#xD;
    databases, and the persisted data can survive container or client crashes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An entity bean could represent a customer, which might be stored as a row in the customer table of a relational&#xD;
    database. The EJB developer chooses the method of persistence, in this case a relational database.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are two types of entity bean persistence: bean-managed persistence (BMP) and container-managed persistence (CMP).&#xD;
    BMP entity beans must implement the data access code, whereas CMP entity beans have this ability implemented by the&#xD;
    container. CMP container implementations are usually provided for relational database persistence, although other types&#xD;
    of persistence (object database, file-based persistence, and so forth) are also possible.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on entity beans, see the Enterprise JavaBeans Specification, Version 2.1at &lt;a&#xD;
    href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Products &amp;amp;&#xD;
    Technologies &amp;gt; J2EE &amp;gt; Enterprise JavaBeans&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Message-Driven_Beans&quot; name=&quot;Message-Driven_Beans&quot;>&lt;/a>Message-Driven Beans&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A message-driven bean component provides a service that implements message processing-specific business logic. Only the&#xD;
    container can call this service; the client cannot directly call this service through remote or local interfaces.&#xD;
    Instead, when a message arrives at a destination or endpoint serviced by the bean, the container calls an instance of&#xD;
    the message-driven bean assigned as MessageListener to the destination. Message-driven bean instances do not maintain a&#xD;
    conversational state, but can maintain instance variables with resource references (for example, database connection)&#xD;
    across method calls.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Note:&lt;/b> Message-driven beans are not supported prior to EJB 2.0. The support of messaging types different from JMS&#xD;
    is a new feature of the EJB 2.1 specification and so they are not supported on previous version.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on message-driven beans, see the Enterprise JavaBeans Specification, Version 2.0 at &lt;a&#xD;
    href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Products &amp;amp;&#xD;
    Technologies &amp;gt; J2EE &amp;gt; Enterprise JavaBeans&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Comparing_JavaBeans_and_EJBs&quot; name=&quot;Comparing_JavaBeans_and_EJBs&quot;>&lt;/a>Comparing JavaBeans and EJBs&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Although similar in name, EJBs are much more complex than regular JavaBeans. Both define architectures for reusable&#xD;
    components, but EJBs add the required support for the creation of distributed, multi-user services. Both types of&#xD;
    components can be assembled using application builder tools, but EJBs need to be deployed to an EJB container to&#xD;
    execute.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Services_(APIs)_for_J2EE_Components&quot; name=&quot;Services_(APIs)_for_J2EE_Components&quot;>&lt;/a>Services (APIs) for J2EE&#xD;
    Components&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE containers support all of the J2SE standard APIs, as well as a subset of J2EE APIs depending on the container&#xD;
    type. Components within a container can access this available subset. The following table gives a brief description of&#xD;
    each API and lists the J2EE containers where they are available.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th width=&quot;12%&quot;>&#xD;
                    &lt;div align=&quot;left&quot;>&#xD;
                        Name&#xD;
                    &lt;/div>&#xD;
                &lt;/th>&#xD;
                &lt;th valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;div align=&quot;left&quot;>&#xD;
                        Description&#xD;
                    &lt;/div>&#xD;
                &lt;/th>&#xD;
                &lt;th valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;div align=&quot;left&quot;>&#xD;
                        J2EE Containers,&lt;br />&#xD;
                         where APIs are available&#xD;
                    &lt;/div>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot; height=&quot;128&quot;>&#xD;
                    &lt;p>&#xD;
                        EJB 2.1&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot; height=&quot;128&quot;>&#xD;
                    &lt;p>&#xD;
                        The EJB specification defines a component model for EJBs-business tier components that&#xD;
                        automatically support services such as remote communications, transaction management, security and&#xD;
                        persistence.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on EJB, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Enterprise JavaBeans&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot; height=&quot;128&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            EJB&lt;br />&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Application client*&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web*&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                    &lt;p>&#xD;
                        * client API only&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JAAS&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Authentication and Authorization Service (JAAS) provides services for authentication and&#xD;
                        authorization of users to ensure they have permission to perform an action.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAAS, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2SE &amp;gt; Core Java &amp;gt; Java Authentication and Authorization Service (JAAS)&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&lt;br />&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot; height=&quot;129&quot;>&#xD;
                    &lt;p>&#xD;
                        JAF 1.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot; height=&quot;129&quot;>&#xD;
                    &lt;p>&#xD;
                        JavaBeans Activation Framework (JAF) provides services to identify data and instantiate a JavaBean&#xD;
                        to manipulate that data.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAF, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2SE &amp;gt; Desktop Java &amp;gt; JavaBeans &amp;gt; JavaBeans Activation Framework&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot; height=&quot;129&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JAXP 1.2&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java API for XML Processing (JAXP) provides an abstract interface for XML document processing that&#xD;
                        can be used with compliant parsers and transformers that use DOM SAX or XSLT.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAXP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Java API for XML Processing (JAXP)&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JAX-RPC 1.1&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The JAX-RPC specification defines client APIs for accessing web services as well as techniques for&#xD;
                        implementing web service endpoints.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAX-RPC, visit &lt;a href=&quot;http://java.sun.com/webservices/jaxrpc/index.jsp&quot;&#xD;
                        target=&quot;_blank&quot;>JAX-RPC&lt;/a>/font&amp;gt;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot; height=&quot;129&quot;>&#xD;
                    &lt;p>&#xD;
                        Web Services for J2EE 1.1&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot; height=&quot;129&quot;>&#xD;
                    &lt;p>&#xD;
                        The Web Services for J2EE specification (JSR-109) defines the capabilities a J2EE application&lt;br />&#xD;
                         server must support for deployment of web service endpoints.. .&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on Web Services for J2EE, visit &lt;a&#xD;
                        href=&quot;http://jcp.org/aboutJava/communityprocess/final/jsr109/index.html&quot;&#xD;
                        target=&quot;_blank&quot;>http://jcp.org/aboutJava/communityprocess/final/jsr109/index.html&lt;/a>&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot; height=&quot;129&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        SAAJ 1.2&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The SSAJ API provides the ability to manipulate SOAP messages. .&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAXP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; SOAP with Attachments API for Java (SAAJ)&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JAXR 1.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The JAXR specification defines APIs for client access to XML-based registries such as WebXML&#xD;
                        registries and UDDI registries.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JAXP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Java API for XML Registries (JAXR).&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JavaMail 1.3&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The JavaMail API provides a framework that can be extended to build Java-based mail applications.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JavaMail, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; JavaMail&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JDBC 3.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Database Connectivity (JDBC) is an API for accessing tabular data sources such as SQL&#xD;
                        databases, spreadsheets, and flat files.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JDBC, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to&lt;b>Products &amp;amp; Technologies &amp;gt;&#xD;
                        J2EE &amp;gt; JDBC&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JMS 1.1&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Message Service (JMS) provides asynchronous messaging services for the transfer of data and&#xD;
                        notification of events. With JMS, it is possible to use message-driven EJBs to asynchronously&#xD;
                        process messages delivered to JMS topics and queues.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JMS, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Java Message Service&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JNDI&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Naming and Directory Interface Specification (JNDI) provides naming and directory services to&#xD;
                        register and lookup distributed components and resources. Clients only need to know the registered&#xD;
                        JNDI name for the component or resource and don't need to know their actual network location.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        Example: EJBs are registered in the enterprise directory at deployment time, using the deployment&#xD;
                        descriptor &lt;code>ejb-name&lt;/code> field. J2EE clients look up an EJB using the JNDI lookup-all&#xD;
                        clients need to know is the name by which the EJB was registered in the directory. The JNDI lookup&#xD;
                        returns a reference to the EJB?s home object.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JNDI, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2SE &amp;gt; Core Java &amp;gt; Java Naming and Directory Interface (JNDI)&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JTA 1.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Transaction API (JTA) defines interfaces for managing distributed transaction services between&#xD;
                        transaction manager, resource manager, application server, and application.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JTA, &lt;b>&lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to&lt;/b> Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Transactions.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        J2EE Connector 1.5&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        J2EE Connector Architecture Service Provider Interface (SPI) defines a standard for connecting EIS&#xD;
                        resources to a J2EE container-an EIS-specific resource adapter (supplied by the EIS vendor) is&#xD;
                        plugged in to the J2EE container, extending the container so that it provides transactional, secure&#xD;
                        support for that EIS. Components in the container can then access the EIS via the J2EE Connector&#xD;
                        Architecture SPI.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on J2EE Connectors, visit &lt;b>&lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to&lt;/b> Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; J2EE Connector Architecture.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JSP 2.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        JavaServer Pages technology provides Web developers with the ability to create and maintain dynamic&#xD;
                        Web pages. JSP pages are text-based and use XML-like tags to perform business logic and generate&#xD;
                        custom content. JSP technology allows business logic to be delegated to other components so that&#xD;
                        only the presentation logic needs to be embedded in the JSP page.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JSP, visit &lt;b>&lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to&lt;/b> Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; &lt;b>JavaServer Pages&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;p>&#xD;
                        Web&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        Servlet 2.4&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Java Servlets extend the capabilities of the Web server to help build Web-based applications.&#xD;
                        Servlets are often used in interactive Web applications where the Web server responds to user&#xD;
                        requests with dynamically generated content obtained from existing business systems.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on Java Servlets, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE&lt;/b> &amp;gt; &lt;b>Java Servlet&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;p>&#xD;
                        Web&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        RMI-IIOP&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        Remote Method Invocation technology run over Internet Inter-Orb Protocol (RMI-IIOP) allows Java&#xD;
                        components to communicate with legacy CORBA components written in other languages like C++ or&#xD;
                        Smalltalk.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on RMI-IIOP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products and APIs &amp;gt;&#xD;
                        RMI-IIOP&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        J2EE Management 1.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The J2EE Management API provides APIs for management tools to query a J2EE&lt;br />&#xD;
                         application server to determine its current status, applications deployed, and so on..&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on RMI-IIOP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; J2EE Management Specification&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JMX 1.2&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The JMX API is used by the J2EE Management API to provide some of the required support for&#xD;
                        management of a J2EE product.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on RMI-IIOP, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2SE &amp;gt; Core Java &amp;gt; Java Management Extensions (JMX)&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        J2EE Deployment 1.1&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The J2EE Deployment API defines the interfaces between the runtime environment of a deployment tool&#xD;
                        and plug-in components provided by a J2EE application&lt;br />&#xD;
                         server.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on J2EE Deployment, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; J2EE Deployment Specification&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;12%&quot;>&#xD;
                    &lt;p>&#xD;
                        JACC 1.0&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;67%&quot;>&#xD;
                    &lt;p>&#xD;
                        The JACC specification defines a contract between a J2EE application server and an&lt;br />&#xD;
                         authorization policy provider.&#xD;
                    &lt;/p>&#xD;
                    &lt;p>&#xD;
                        For more information on JACC , visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
                        target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Products &amp;amp; Technologies&#xD;
                        &amp;gt; J2EE &amp;gt; Java Authorization Contract for Containers&lt;/b>.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; width=&quot;21%&quot;>&#xD;
                    &lt;ul class=&quot;noindent&quot;>&#xD;
                        &lt;li>&#xD;
                            Application client&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            Web&#xD;
                        &lt;/li>&#xD;
                        &lt;li>&#xD;
                            EJB&#xD;
                        &lt;/li>&#xD;
                    &lt;/ul>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Assembly_and_Deployment&quot; name=&quot;Assembly_and_Deployment&quot;>&lt;/a>Assembly and Deployment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE applications are composed of the application deployment descriptor (application.xml) and one or more J2EE modules&#xD;
    that make up the application. The modules are reusable, portable components. J2EE applications are packaged in .ear&#xD;
    archives.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Deployment_Descriptors&quot; name=&quot;Deployment_Descriptors&quot;>&lt;/a>Deployment Descriptors&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Deployment descriptors are XML files used in J2EE applications and J2EE modules. They provide configuration information&#xD;
    that the J2EE server reads at the time of deployment. This configuration information allows the server to customize the&#xD;
    J2EE application or module declaratively without changing the source code or classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is a generic deployment descriptor type for each J2EE application or module. Generic deployment descriptors, like&#xD;
    the EJB module's ejb-jar.xml, define information that applies to the EJB regardless of the server upon which it is&#xD;
    deployed. Server-specific deployment descriptors specify information that is only meaningful to a particular server.&#xD;
    Server-specific deployment descriptors have names that reflect the server for which they are meant.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;J2EE_Modules&quot; name=&quot;J2EE_Modules&quot;>&lt;/a>J2EE Modules&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A J2EE module consists of a deployment descriptor for the module and a number of elements that make up the module,&#xD;
    including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Non-Java elements deployed on the Web server (JSP pages, image files, static HTML pages); in other words, virtual&#xD;
        directory elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java elements deployed on a Web server (servlets, JavaBeans, Java classes)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Elements deployed on an EJB server (EJBs and supporting Java classes)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    There are three kinds of J2EE modules:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#J2EE_Application_Client&quot;>J2EE Application Client&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Web_Component&quot;>Web Component&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Enterprise_JavaBean&quot;>Enterprise JavaBean&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;J2EE_Application_Client&quot; name=&quot;J2EE_Application_Client&quot;>&lt;/a>J2EE Application Client&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    J2EE application client modules are packaged in .jar archives and contain:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        application-client.xml deployment descriptor&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        application client implementation .class files&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Web_Component&quot; name=&quot;Web_Component&quot;>&lt;/a>Web Component&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Web component modules are packaged in .war archives and contain:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        web.xml deployment descriptor and server-specific deployment descriptors&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        JSP pages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        HTML pages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Images (for example, .gif and .jpg)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Servlet Class files&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    If the module is a web service, the .war archive contains:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        webservices.xml deployment descriptor&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Servlet Class files&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        WSDL files&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    &lt;a id=&quot;Enterprise_JavaBean&quot; name=&quot;Enterprise_JavaBean&quot;>&lt;/a>Enterprise JavaBean&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A single Enterprise JavaBean JAR archive might contain a number of EJBs, but their deployment information is stored in&#xD;
    one set of deployment descriptors (ejb-jar.xml plus any server-specific deployment descriptors).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A standard Enterprise JavaBean module contains:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        ejb-jar.xml and server-specific deployment descriptors&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        EJB implementation Class files&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A Web Service Enterprise JavaBean module contains:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        webservices.xml deployment descriptors&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        EJB implementation Class files&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information on J2EE packaging and deployment, see &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
    target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Docs &amp;amp; Training &amp;gt; J2EE Platform, Enterprise&#xD;
    Edition &amp;gt; Java Blueprints Program&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;J2EE_Application_Development&quot; name=&quot;J2EE_Application_Development&quot;>&lt;/a>J2EE Application Development&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The J2EE application development process defines several roles and stages. The following sections define the &lt;a&#xD;
    href=&quot;#J2EE_Application_Development_Roles&quot;>development roles&lt;/a> provided by the J2EE specification and the &lt;a&#xD;
    href=&quot;#J2EE_Application_Development_Stages&quot;>development stages&lt;/a> in which these roles participate.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;J2EE_Application_Development_Roles&quot; name=&quot;J2EE_Application_Development_Roles&quot;>&lt;/a>J2EE Application Development&#xD;
    Roles&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The application development roles are summarized in this table.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                    Role Name&#xD;
                &lt;/th>&#xD;
                &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                    Description&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        J2EE Product Provider&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        A J2EE product provider is the supplier of a J2EE platform implementation, also known as a J2EE&#xD;
                        product. J2EE product providers include BEA, IBM, and Sun. These organizations typically play to&#xD;
                        their existing strengths in delivering an implementation of the J2EE platform. For example, the BEA&#xD;
                        implementation builds upon BEA's highly successful Tuxedo transaction processing monitor. A J2EE&#xD;
                        product provider also supplies the tools required to support application deployment and management.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        &lt;a id=&quot;Application_Component_Provider&quot; name=&quot;Application_Component_Provider&quot;>&lt;/a>Application&#xD;
                        Component Provider&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        The application component provider actually encompasses a number of roles, such as EJB developers&#xD;
                        and HTML document designers. These roles are responsible for producing the J2EE application&#xD;
                        components using the tools provided.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        &lt;a id=&quot;Application_Assembler&quot; name=&quot;Application_Assembler&quot;>&lt;/a>Application Assembler&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td>&#xD;
                    &lt;p>&#xD;
                        The application assembler creates a J2EE application from J2EE application components using the&#xD;
                        tools provided. The J2EE application is delivered as an Enterprise Archive (EAR) file. The&#xD;
                        application assembler also describes any external dependencies of the J2EE application. The&#xD;
                        deployer resolves these dependencies when actually deploying the J2EE application.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        &lt;a id=&quot;Deployer&quot; name=&quot;Deployer&quot;>&lt;/a>Deployer&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td>&#xD;
                    &lt;p>&#xD;
                        The deployer is responsible for deploying a J2EE application and the application components from&#xD;
                        which it is comprised into the operational environment. The first stage of deployment is to install&#xD;
                        the various application components within the relevant J2EE containers. The second stage of&#xD;
                        deployment is to configure any external dependencies that have been declared so that they can be&#xD;
                        resolved. For example, security roles that have been defined are mapped onto user groups and&#xD;
                        accounts in the operational environment. The third stage of deployment is to execute the new&#xD;
                        application so that it's ready to receive requests.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        System Administrator&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td>&#xD;
                    &lt;p>&#xD;
                        The system administrator is responsible for the run-time infrastructure, which includes any&#xD;
                        deployed J2EE applications. This role uses the appropriate tools provided by the J2EE product&#xD;
                        provider to accomplish this task.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot;>&#xD;
                    &lt;p>&#xD;
                        Tool Provider&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td>&#xD;
                    &lt;p>&#xD;
                        The tool provider provides tools to support developing and packaging application components. These&#xD;
                        tools often correspond to the different types of application component produced, and include IDEs&#xD;
                        such as IBM VisualAge for Java and Borland JBuilder.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; height=&quot;70&quot;>&#xD;
                    &lt;p>&#xD;
                        System Component Provider&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td height=&quot;70&quot;>&#xD;
                    &lt;p>&#xD;
                        The System Component Provider provides different system level components such as resource adapters&#xD;
                        or authorization policy provider.&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    These roles are not exclusive and a single person could take on more than one role, especially on small development&#xD;
    teams or in a prototyping situation.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;J2EE_Application_Development_Stages&quot; name=&quot;J2EE_Application_Development_Stages&quot;>&lt;/a>J2EE Application Development&#xD;
    Stages&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This section describes the different stages of J2EE application development, as stipulated in the J2EE specification.&#xD;
    The development stages are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Component Development&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul type=&quot;circle&quot;>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#J2EE_Application_Client_Creation&quot;>J2EE Application Client Creation&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Web_Component_Creation&quot;>Web Component Creation&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Enterprise_JavaBean_Creation&quot;>Enterprise JavaBean Creation&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#J2EE_Application_Assembly&quot;>J2EE Application Assembly&lt;/a>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#J2EE_Application_Deployment&quot;>J2EE Application Deployment&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
        &lt;p>&#xD;
            A J2EE application must contain at least one J2EE module, so at least one of the component development stages&#xD;
            is required. The final two stages are always necessary since all J2EE applications must be assembled and&#xD;
            deployed.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            The following table summarizes the development stages for J2EE applications.&#xD;
        &lt;/p>&#xD;
        &lt;div align=&quot;center&quot;>&#xD;
            &lt;table&#xD;
            style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
             cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
                &lt;tbody>&#xD;
                    &lt;tr>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                            J2EE Development Stage&#xD;
                        &lt;/th>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                            Tasks&#xD;
                        &lt;/th>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                            Performed by J2EE Role&#xD;
                        &lt;/th>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot;>&#xD;
                            Results in (Deliverable)&#xD;
                        &lt;/th>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a id=&quot;J2EE_Application_Client_Creation&quot; name=&quot;J2EE_Application_Client_Creation&quot;>&lt;/a>J2EE&#xD;
                                Application Client Creation&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;ul>&#xD;
                                &lt;li>&#xD;
                                    Writes client code and compiles classes&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Creates the application-client.xml deployment descriptor&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Creates a JAR file archive containing the Class and XML files&#xD;
                                &lt;/li>&#xD;
                            &lt;/ul>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a href=&quot;#Application_Component_Provider&quot;>Application Component Provider&lt;/a> (software&#xD;
                                developer)&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                A JAR file containing the J2EE application client&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a id=&quot;Web_Component_Creation&quot; name=&quot;Web_Component_Creation&quot;>&lt;/a>Web Component Creation&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;ul>&#xD;
                                &lt;li>&#xD;
                                    Writes servlet code and compiles classes&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Writes JSP and HTML pages&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Creates the web.xml deployment descriptor&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Creates a Web Application Archive (WAR) file archive containing the Class, .jsp, .html,&#xD;
                                    and XML files&#xD;
                                &lt;/li>&#xD;
                            &lt;/ul>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a href=&quot;#Application_Component_Provider&quot;>Application Component Provider&lt;/a> (software&#xD;
                                developer: servlets; Web designer: JSP pages, HTML pages)&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                A WAR file containing the Web component&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a id=&quot;Enterprise_JavaBean_Creation&quot; name=&quot;Enterprise_JavaBean_Creation&quot;>&lt;/a>Enterprise&#xD;
                                JavaBean Creation&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td>&#xD;
                            &lt;ul>&#xD;
                                &lt;li>&#xD;
                                    Write EJB code and compile classes&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Create the ejb-jar.xml and server-specific deployment descriptors&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Create a JAR file archive containing the Class and XML files&#xD;
                                &lt;/li>&#xD;
                            &lt;/ul>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a href=&quot;#Application_Component_Provider&quot;>Application Component Provider&lt;/a> (software&#xD;
                                developer)&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td>&#xD;
                            &lt;p>&#xD;
                                A JAR file containing the Enterprise JavaBean&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a id=&quot;J2EE_Application_Assembly&quot; name=&quot;J2EE_Application_Assembly&quot;>&lt;/a>J2EE Application&#xD;
                                Assembly&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;ul>&#xD;
                                &lt;li>&#xD;
                                    Create the application.xml deployment descriptor&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Create a EAR file archive containing the EJBs (JAR), Web components (WAR), and XML&#xD;
                                    files&#xD;
                                &lt;/li>&#xD;
                            &lt;/ul>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a href=&quot;#Application_Assembler&quot;>Application Assembler&lt;/a>&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                An EAR file containing the J2EE application&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a id=&quot;J2EE_Application_Deployment&quot; name=&quot;J2EE_Application_Deployment&quot;>&lt;/a>J2EE Application&#xD;
                                Deployment&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;ul>&#xD;
                                &lt;li>&#xD;
                                    Add the J2EE application (EAR) to the J2EE server environment&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Edit the application.xml deployment descriptor with local environment configuration&#xD;
                                &lt;/li>&#xD;
                                &lt;li>&#xD;
                                    Deploys the J2EE application to the J2EE server&#xD;
                                &lt;/li>&#xD;
                            &lt;/ul>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                &lt;a href=&quot;#Deployer&quot;>Deployer&lt;/a>&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot;>&#xD;
                            &lt;p>&#xD;
                                Installed and configured J2EE application&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                &lt;/tbody>&#xD;
            &lt;/table>&lt;br />&#xD;
        &lt;/div>&#xD;
        &lt;p>&#xD;
            Each stage of the development process produces a deliverable that is used in the next stage. The components&#xD;
            created in the Component Development stages are used in the J2EE Application Assembly stage to produce the J2EE&#xD;
            application EAR archive. In the J2EE Application Deployment stage, the EAR archive is deployed to the J2EE&#xD;
            server.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            The deliverables for each stage are portable and need not be performed by the same people or even on the same&#xD;
            environment, as long as the environment satisfies the J2EE Platform requirements.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            For more information on J2EE packaging and deployment, see &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
            target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>J2EE &amp;gt; Blueprints&lt;/b>.&#xD;
        &lt;/p>&#xD;
        &lt;h3>&#xD;
            &lt;a id=&quot;More_Information&quot; name=&quot;More_Information&quot;>&lt;/a>More Information&#xD;
        &lt;/h3>&#xD;
        &lt;p>&#xD;
            Additional information regarding J2EE can be found in the Sun J2EE Blueprints. You can access it at &lt;a&#xD;
            href=&quot;http://java.sun.com/&quot; target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>J2EE &amp;gt;&#xD;
            Blueprints &amp;gt; Guidelines: Designing Enterprise Applications with the J2EE Platform, Second Edition.&lt;/b>&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            A copy of this document is also included within the Rational Unified Process.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            The chapters within the Sun J2EE Blueprints for information on specific topics is summarized in this table.&#xD;
        &lt;/p>&#xD;
        &lt;div align=&quot;center&quot;>&#xD;
            &lt;table&#xD;
            style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
             cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
                &lt;tbody>&#xD;
                    &lt;tr>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot; width=&quot;45%&quot;>&#xD;
                            J2EE Concept&#xD;
                        &lt;/th>&#xD;
                        &lt;th valign=&quot;top&quot; align=&quot;left&quot; width=&quot;55%&quot;>&#xD;
                            J2EE Blueprints Chapter&#xD;
                        &lt;/th>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                J2EE Platform Technologies&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 2&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                Enterprise JavaBeans&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 5&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                Transactions&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 8&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                Security&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 9&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                Servlets&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 4&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                JavaServer Pages&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 4&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                    &lt;tr>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;45%&quot;>&#xD;
                            &lt;p>&#xD;
                                Deployment and Packaging&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                        &lt;td valign=&quot;top&quot; width=&quot;55%&quot;>&#xD;
                            &lt;p>&#xD;
                                Chapter 7&#xD;
                            &lt;/p>&#xD;
                        &lt;/td>&#xD;
                    &lt;/tr>&#xD;
                &lt;/tbody>&#xD;
            &lt;/table>&#xD;
        &lt;/div>&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
