<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C74vgtwuEdmRU7lXzo6lKQ" name="java_messaging_service_jms,9.950419951286216E-306" guid="_C74vgtwuEdmRU7lXzo6lKQ" changeDate="2005-10-25T14:30:43.402-0700" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Java Messaging System, JMS, provides a cross platform standard for asynchronous communication of business data and&#xD;
    events across the enterprise. The communication is typically across processes and machines. Objects in applications,&#xD;
    typically running on different machines, communicate by accessing the services of the message-oriented middleware (MOM)&#xD;
    through a standard set of interfaces defined through the JMS.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/mom_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    JMS provides a set of interfaces that isolate the Java programmer (implementing the message producers and consumers)&#xD;
    from the MOM providers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This content page describes the key concepts and the typical use of JMS.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Messages&quot; name=&quot;Messages&quot;>&lt;/a>Messages&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A message is a self-contained package of business data. It has three compartments:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Header&lt;/b>: Contains network routing information and message identifiers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Properties&lt;/b>: Contains meta-data for the message. JMS dictates some of the properties, but application&#xD;
        programmers can also add their own.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Payload&lt;/b>: Contains the actual business data. The payload is entirely controlled by the application&#xD;
        programmer.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/message_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In JMS, the message is encapsulated in an object that implements the interface &lt;i>javax.jms.Message&lt;/i>. A Java program&#xD;
    can access the compartments thorough this interface, as shown in the following diagram. The payload comes in several&#xD;
    variations, discussed later.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/message_expanded_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The &lt;b>header&lt;/b> contains properties of the message that must always be there. The following properties are available&#xD;
    from the header:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        MessageID&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Timestamp&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        CorrelationID&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        ReplyTo&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Destination&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        DeliveryMode&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Redelivered&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Type&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Expiration&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Priority&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The &lt;b>properties&lt;/b> can be used by the application programmer to provide meta-data for the message. The properties&#xD;
    consist of an arbitrary set of name-value-pairs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are six kinds of &lt;b>payloads&lt;/b> supported by JMS:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Text messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Object messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Byte messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Map messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Stream messages&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Message (no body present)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Types of payloads are reflected in the class hierarchy where interfaces extend the &lt;i>javax.jms.Message&lt;/i>. In the&#xD;
    following class diagram, we show the frequently used text, object, and bytes messages. Text messages are commonly the&#xD;
    carriers of XML data.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/message_hierarchy.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Destinations&quot; name=&quot;Destinations&quot;>&lt;/a>Destinations&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    JMS defines the concept of a destination. Messages are sent to and received from destinations. Destinations come in two&#xD;
    forms:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Queues&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Topics&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;b>Queues&lt;/b> are message destinations used when messages are handled by only one receiver. Imagining that the messages&#xD;
    are similar to sending snail-mail, the queues are mailboxes owned by a particular recipient. Communication using queues&#xD;
    is called &lt;i>point-to-point&lt;/i> communication.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Topics&lt;/b> are message destinations used when messages need to be received by multiple receivers, each of which&#xD;
    express an interest in receiving a particular kind of message. Using the analogy with snail-mail again, one may think&#xD;
    of this as writing an article in a newspaper; one message is read by any number of receivers. We often refer to this&#xD;
    kind of design as the &lt;i>publish-and-subscribe&lt;/i> model.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Message_Delivery&quot; name=&quot;Message_Delivery&quot;>&lt;/a>Message Delivery&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The delivery of messages can be performed in two ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Persistent&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Non-persistent&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The persistent delivery includes storage of the message into a file or a database, which enables guaranteed delivery.&#xD;
    Non-persistent delivery improves performance and reduces storage overhead, but there is no guarantee that the message&#xD;
    will be delivered. For most applications that use JMS, persistent delivery is the commonly chosen way.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;JMS_Clients&quot; name=&quot;JMS_Clients&quot;>&lt;/a>JMS Clients&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    JMS clients are Java objects that use JMS. There are two roles defined:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Message producers&lt;/b>: Java programs that create and send messages.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Message consumers&lt;/b>: Java programs that receive messages.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The following diagram is an overview of how producer, consumers and &lt;a href=&quot;#JMS_Providers&quot;>JMS providers&lt;/a>&#xD;
    collaborate.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/jms_roles_collab.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    A message producer can be any Java class that has access to a JMS implementation. The message producers create and send&#xD;
    messages.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A message consumer can be any Java class that has access to a JMS implementation. The message consumers receive and&#xD;
    handle messages.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A JMS client uses a set of interfaces to access JMS. The objects that implement the JMS interfaces are created through&#xD;
    a set of factories. The initial factory is the &lt;i>ConnectionFactory&lt;/i>. The connection factory is looked up through&#xD;
    JNDI. The JMS client uses the connection factory to create connection object. The connection object is used to create a&#xD;
    session object, which is used as a factory for the other JMS objects. The following figure illustrates the key&#xD;
    conceptual relationships between the factories, abstracting from the details of queues and topics.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/connection_factory.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Connection factories, connections and sessions come in two forms: one for queues and the other one for topics. The&#xD;
    class diagram below shows the interface hierarchy for key JMS concepts.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/iface_hierarchy.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;JMS_Providers&quot; name=&quot;JMS_Providers&quot;>&lt;/a>JMS Providers&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A JMS Provider is an implementation that satisfies the JMS specification. The JMS provider is responsible for&#xD;
    receiving, persisting and delivering messages.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;More_Information&quot; name=&quot;More_Information&quot;>&lt;/a>More Information&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For more information on JMS, visit &lt;a href=&quot;http://java.sun.com/products/jms/&quot;&#xD;
    target=&quot;blank&quot;>http://java.sun.com/products/jms/&lt;/a>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
