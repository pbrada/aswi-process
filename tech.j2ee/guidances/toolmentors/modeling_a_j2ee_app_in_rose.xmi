<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_EhBhUNwuEdmRU7lXzo6lKQ" name="modeling_a_j2ee_app_in_rose,{E2D2968D-F30B-4C0B-9006-E72B96A846FF}" guid="_EhBhUNwuEdmRU7lXzo6lKQ" changeDate="2005-11-17T15:31:52.621-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You will also design J2EE components within the J2EE framework, representing them in Rose as classes and collaborations&#xD;
    of classes.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, a J2EE application uses the services of a relational database. You design a Data Model for the database,&#xD;
    representing it in Rose using the Rose Data Modeler.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To model a J2EE application in Rose, perform the following steps:&lt;br />&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225359&quot;>Set up Rational Rose for the J2EE Project&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Organize%20the%20Design%20Model&quot;>Organize the Design Model&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Model%20Java%20Beans%20and%20Java%20classes&quot;>Model Java Beans and Java Classes&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Model%20EJBs&quot;>Model EJBs&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225372&quot;>Model the User Interface Layer&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information on J2EE, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE) Overview&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For an overview of component-based development using the J2EE platform, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/developing_component_solutions_B14102ED.html&quot;&#xD;
    guid=&quot;1.8809435842664573E-305&quot;>Concept: Developing Component Solutions&lt;/a> .&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See also:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/web_architecture_patterns_49E51CA1.html&quot;&#xD;
        guid=&quot;5.037070740002309E-305&quot;>Concept: Web Architecture Patterns&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/design_model_A82D7B3E.html&quot;&#xD;
        guid=&quot;2.3158107674855575E-306&quot;>Guideline: Design Model&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;_Toc498225359&quot; name=&quot;_Toc498225359&quot;>Set up Rational Rose for the J2EE Project&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Set up Rational Rose as described in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/setting_up_for_project_637A2D05.html&quot;&#xD;
    guid=&quot;{F4DEA91A-7EBD-4853-8517-ACB4ED6FD5AD}&quot;>Tool Mentor: Setting Up Rational Rose for a Project&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition, you will need to enable the Rose Java add-in and configure project-specific settings.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For detailed information about configuring Rose Java, see &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&amp;nbsp;&lt;i>Rose Java &amp;gt; How to &amp;gt; Set Project&#xD;
    Properties&lt;/i> in the Rational Rose online Help.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Organize the Design Model&quot; name=&quot;Organize the Design Model&quot;>Organize the Design Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Create%20packages%20and%20layers%20in%20the%20design%20model&quot;>Create Packages and Layers in the&#xD;
            Design Model&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Add%20Java%20language%20packages&quot;>Add Java Language Packages&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Add%20Schemas%20package&quot;>Add Schemas Package&lt;/a>&amp;nbsp;&amp;nbsp;&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Create packages and layers in the design model&quot; name=&quot;Create packages and layers in the design model&quot;>Create&#xD;
    Packages and Layers in the Design Model&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/manage_design_model_1D45D75E.html&quot;&#xD;
    guid=&quot;{BD1DD906-031C-4D8C-8078-87B6869A8C14}&quot;>Tool Mentor: Managing the Design Model Using Rational Rose&lt;/a> describes&#xD;
    how to create packages and layers in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Artifact: Design Model&lt;/a>, starting with the RUP model template that is&#xD;
    provided with Rose.&amp;nbsp; This template provides a skeleton of the design model, including placeholders for the types&#xD;
    of packages, subsystems and diagrams that should be created during design activities (&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot; guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case&#xD;
    Design&lt;/a>, &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot;&#xD;
    guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class Design&lt;/a>, and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/subsystem_design_real-time_design_681F0256.html&quot;&#xD;
    guid=&quot;{30B2108A-294F-44EE-AC02-FFC1F70D67FF}&quot;>Task: subsystem_design_real-time_design&lt;/a>).&amp;nbsp; &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See also:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/layering_FCCD1BDA.html&quot;&#xD;
        guid=&quot;4.458864982057142E-306&quot;>Guideline: Layering&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot;&#xD;
        guid=&quot;3.801315327549898E-305&quot;>Concept: Layering&lt;/a>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Note that the package structure in your &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Artifact: Design Model&lt;/a> does not have to match the package structure&#xD;
    in your &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
    guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Artifact: Implementation Model&lt;/a>. When you forward engineer your Java&#xD;
    classes, it is the package structure in the Implementation Model that determines the package structure of the generated&#xD;
    Java classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&#xD;
    &amp;nbsp;For more information about packages, refer to the &lt;i>Package&lt;/i> topic in the Rational Rose online Help.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Add Java language packages&quot; name=&quot;Add Java language packages&quot;>Add the Java Language Packages&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You must add the Java language packages for Java and J2EE, to provide the services of the J2EE platform, called the&#xD;
    ?system layer?. These packages are used when you create your own classes in the model; for example, if your class&#xD;
    defines an operation that returns the Java type String, then the Java language package java.lang that contains the&#xD;
    class String must be present in your model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;For details, see the Rational Rose online Help topics:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
            border=&quot;0&quot; /> &lt;i>Rose Java &amp;gt; Concepts &amp;gt; Using Java Frameworks&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
            border=&quot;0&quot; />&amp;nbsp; &lt;i>Rose Java &amp;gt; How to &amp;gt; Load Java class libraries in a model&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Add Schemas package&quot; name=&quot;Add Schemas package&quot;>Add the Schemas Package&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Schemas package contains the design of the database tables in the application.&amp;nbsp; See &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/modeling_and_designing_databases_C61A6907.html&quot;&#xD;
    guid=&quot;{C1A09291-4091-4300-AF91-B7715DE432F9}&quot;>Tool Mentor: Designing and Modeling Databases Using Rational Rose Data&#xD;
    Modeler&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Model Java Beans and Java classes&quot; name=&quot;Model Java Beans and Java classes&quot;>Model Java Beans and Java&#xD;
    Classes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This section does not cover how you model EJBs (see &lt;a href=&quot;#Model%20EJBs&quot;>Model EJBs&lt;/a>) or how you model the&#xD;
    presentation classes, such as HTML and JSP pages (see &lt;a href=&quot;#_Toc498225372&quot;>Model the Presentation Layer&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It does provide information on how to model the remaining Java beans and Java classes (such as utility classes) as you&#xD;
    would for any Java application. For details, see:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot;&#xD;
            guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot;&#xD;
            guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/subsystem_design_5D1BCC0C.html&quot;&#xD;
            guid=&quot;{CAA385CA-2BA2-40F2-8FE3-E21089D02119}&quot;>Task: Subsystem Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/design_model_A82D7B3E.html&quot;&#xD;
            guid=&quot;2.3158107674855575E-306&quot;>Guideline: Design Model&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/manage_class_E87F7860.html&quot;&#xD;
            guid=&quot;{234EB01D-88DF-4EBC-B806-CAA81CD2BF13}&quot;>Tool Mentor: Managing Classes Using Rational Rose&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Model EJBs&quot; name=&quot;Model EJBs&quot;>Model EJBs&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For more information on EJBs, see and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/enterprise_javabean_ejb_7F0C3AFF.html&quot;&#xD;
    guid=&quot;1.5078998518719443E-305&quot;>Guideline: Enterprise JavaBean (EJB)&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following is a summary of the steps you perform to model an EJB in Rose:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Create%20a%20Design%20Subsystem%20for%20the%20EJB&quot;>Create a Design Subsystem for the EJB&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Determine&quot;>Determine the Type of the EJB and its Persistence Mechanism&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#UseRoseJ&quot;>Use Rose Java to Create EJB 1.1 classes&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Model%20the%20classes?%20relationships&quot;>Model the Classes? Relationships&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Model%20the%20classes?%20interactions&quot;>Model the Classes? Interactions&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#Model%20EJB%20persistence&quot;>Model EJB Persistence&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225366&quot;>Model Transactions&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225366&quot;>Model Security&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225370&quot;>Forward Engineer EJB Components&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a href=&quot;#_Toc498225371&quot;>Reverse Engineer EJBs&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Create a Design Subsystem for the EJB&quot; name=&quot;Create a Design Subsystem for the EJB&quot;>Create a Design Subsystem&#xD;
    for the EJB&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In general, EJBs are grouped in design subsystems.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Design subsystems are used to encapsulate behavior inside of a &quot;package&quot;, which provides explicit and formal&#xD;
    interfaces, and which (by convention) does not expose any of its internal contents.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/manage_subsystems_CE198D48.html&quot;&#xD;
    guid=&quot;{6943FA40-808B-4E3E-94FE-D7843FA59E91}&quot;>Tool Mentor: Managing Subsystems Using Rational Rose&lt;/a> for detailed&#xD;
    information on how to create design subsystems.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Determine&quot; name=&quot;Determine&quot;>Determine the Type of the EJB, and its Persistence Mechanism&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Before you can create the EJB in Rose, you must decide on what type of EJB it will be-entity bean, session bean, or&#xD;
    message-driven bean. For an entity bean, you must choose between container-managed-persistence and&#xD;
    bean-managed-persistence. For a session bean you must choose whether the bean is to be stateful or stateless.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/enterprise_javabean_ejb_7F0C3AFF.html&quot;&#xD;
    guid=&quot;1.5078998518719443E-305&quot;>Guideline: Enterprise JavaBean (EJB)&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;UseRoseJ&quot; name=&quot;UseRoseJ&quot;>Use Rose Java to Create EJB Classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Rose Java provides a set of dialogs for creating and maintaining EJB classes in Rose.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp; &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
    border=&quot;0&quot; /> &amp;nbsp;For more information, refer to the &lt;i>Rose Java &amp;gt; How to &amp;gt; Work with EJBs and servlets&lt;/i>&#xD;
    topic in the Rational Rose online help.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You use Rose Java to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            create a new EJB from the very beginning&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            convert an existing class in the model to an EJB-Rose Java converts the existing class into the EJB remote&#xD;
            interface, and creates new classes for the home interface and bean class&amp;nbsp;&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            add finder methods to the EJB&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            update the home interface with any lifecycle or finder methods defined in the bean implementation class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            update the EJB's class properties (such as the name of the home interface), persistence properties (like&#xD;
            whether it is bean-managed or container-managed) and deployment descriptor properties (such as&#xD;
            container-managed fields or environment entries).&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    An entity or session bean created using Rose Java consists of the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            the home interface class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            the remote interface class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            the bean class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            properties that define the generic EJB deployment descriptor ejb-jar.xml, stored as properties of the EJB?s&#xD;
            bean class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            operations and attributes required by the EJB specification (such as callback methods) will have been created&#xD;
            in the home interface, remote interface, and bean class&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Those classes created by the Rose Java EJB utility are modeled according to the mapping defined in the Sun standard&#xD;
    &lt;i>JSR-000026 UML/EJB Mapping Specification&lt;/i>.&amp;nbsp;&lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For more information, refer to the &lt;i>Rose Java &amp;gt;&#xD;
    Concepts &amp;gt; About Support for the Java 2 Platform, Enterprise Edition (J2EE)&lt;/i> topic in the Rational Rose online&#xD;
    Help.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the EJB 1.1 or 2.0 specifications, visit &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
    target=&quot;_blank&quot;>http://java.sun.com/&lt;/a> and follow the links to &lt;b>Docs &amp;amp; Training &amp;gt; Java 2 Platform,&#xD;
    Enterprise Edition &amp;gt; Enterprise JavaBeans Specification&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc498225365&quot; name=&quot;_Toc498225365&quot;>Define Operations and Attributes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    After you have created the EJB classes, you can add operations (such as business methods) and attributes as you choose.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rose Java provides a set of dialogs for creating and maintaining EJB classes in Rose.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp; &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
    border=&quot;0&quot; /> &amp;nbsp;Refer to the &lt;i>Rose Java &amp;gt; How to &amp;gt; Work with EJBs and servlets&lt;/i> &lt;i>&amp;gt; Adding methods&#xD;
    to a bean class&lt;/i> topic in the Rational Rose online help.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on defining operations and attributes, see:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot;&#xD;
            guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/manage_class_E87F7860.html&quot;&#xD;
            guid=&quot;{234EB01D-88DF-4EBC-B806-CAA81CD2BF13}&quot;>Tool Mentor: Managing Classes Using Rational Rose&lt;/a>.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Model the classes? relationships&quot; name=&quot;Model the classes? relationships&quot;>Model the Classes:&amp;nbsp;&#xD;
    Relationships&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You create class diagrams as part of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot; guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class&#xD;
    Design&lt;/a>, on which you model the relationships (such as associations, dependencies, and inheritance relationships)&#xD;
    between classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Rational Unified Process Rose model template, provided with Rose, gives an outline as a starting point for the&#xD;
    class diagrams you should create.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot;&#xD;
    guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class Design&lt;/a> for more information on modeling the relationships&#xD;
    between classes.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Model the classes? interactions&quot; name=&quot;Model the classes? interactions&quot;>Model the Classes:&#xD;
    &amp;nbsp;Interactions&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As part of the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot;&#xD;
    guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case Design&lt;/a> you create messages on sequence diagrams, which&#xD;
    you then use to describe the interactions between design objects. Create a set of sequence diagrams to describe the&#xD;
    main and alternative flows of events for each Use-Case Realization in your Design Model.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As an EJB designer, you use a sequence diagram to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            determine the operations and operation arguments of the classes involved in the interaction&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            document the operations that will be called by a class during an interaction&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            document what an object does when it receives a message, for example, by attaching a script to the message.&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
            border=&quot;0&quot; /> &amp;nbsp;For more information, refer to the &lt;i>Rational Rose &amp;gt; How to &amp;gt; Create and work in a&#xD;
            model &amp;gt; Using scripts on sequence diagrams&lt;/i> help topic&lt;i>.&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    See also:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot;&#xD;
        guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case Design&lt;/a> - Describe Interactions Between Design&#xD;
        Objects.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/sequence_diagram_AFA76EBB.html&quot;&#xD;
        guid=&quot;3.211008403369512E-306&quot;>Guideline: Sequence Diagram&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/manage_sequence_diagrams_C11A1E78.html&quot;&#xD;
        guid=&quot;{70C1E98C-D6AC-4278-8554-1E000AF5A57D}&quot;>Tool Mentor: Managing Sequence Diagrams Using Rational Rose&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_enterprise_javabeans_ejbs_2581AEE5.html&quot;&#xD;
        guid=&quot;9.931732120190802E-307&quot;>Guideline: Identifying Enterprise JavaBeans (EJBs)&lt;/a> - Modeling EJB Object&#xD;
        Interactions&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Model EJB persistence&quot; name=&quot;Model EJB persistence&quot;>Model EJB Persistence&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An Entity EJB represents an object-oriented view of the application?s persistent data.&amp;nbsp; Modeling an EJB class as&#xD;
    an entity and flagging the class as Persistent indicates that the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Role:&#xD;
    Database Designer&lt;/a> will need to map the EJB object onto the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot; guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data&#xD;
    Model&lt;/a> during the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/database_design_8552DD3.html&quot;&#xD;
    guid=&quot;{2E74A414-49F5-4F27-BFCB-AA2DAC675F58}&quot;>Task: Database Design&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot;&#xD;
    guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Role: Database Designer&lt;/a> creates the application?s data model as part&#xD;
    of the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/database_design_8552DD3.html&quot;&#xD;
    guid=&quot;{2E74A414-49F5-4F27-BFCB-AA2DAC675F58}&quot;>Task: Database Design&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rose provides support for database design with the Rational Rose Data Modeler tool, which allows you to transform&#xD;
    persistent classes in your object model into a data model, and vice versa.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The mapping of classes in the object model onto tables in the data model is documented in the &lt;i>Mapped From&lt;/i> field&#xD;
    of data model table?s Rose specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See also &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot;&#xD;
    guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Artifact: Data Model&lt;/a> and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/data_model_80FB2539.html&quot; guid=&quot;3.4196799396281445E-306&quot;>Guideline: Data&#xD;
    Model&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For detailed information on the Rose Data Modeler, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/modeling_and_designing_databases_C61A6907.html&quot;&#xD;
    guid=&quot;{C1A09291-4091-4300-AF91-B7715DE432F9}&quot;>Tool Mentor: Designing and Modeling Databases Using Rational Rose Data&#xD;
    Modeler&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Modeling considerations for Session EJBs&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Session beans can read or write persistent data-see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/designing_enterprise_javabeans_ejbs_1F6B0E88.html&quot;&#xD;
    guid=&quot;2.8082009592332426E-306&quot;>Guideline: Designing Enterprise JavaBeans (EJBs)&lt;/a>- Direct Access vs. Entity&#xD;
    EJBs.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In such a situation you should use data access object (DAO) classes to isolate the details of the EJB?s database&#xD;
    connection and access using the javax.sql interface.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Modeling considerations for bean-managed Entity EJBs&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Bean-managed entity beans read and write database tables using the JDBC API. Use DAO classes to isolate the details of&#xD;
    the EJB?s database connection and access using the javax.sql interface.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Modeling considerations for container-managed Entity EJBs&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    You do not need to design DAO classes for a container-managed Entity EJB, since its persistence is managed by the EJB&#xD;
    container.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc498225366&quot; name=&quot;_Toc498225366&quot;>Model Transactions&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Transactions define a set of &lt;b>atomic&lt;/b> operation invocations-they are either all performed or none of them are&#xD;
    performed. In the context of persistence, a transaction defines a set of changes to a set of objects that again are&#xD;
    either all performed or none are performed. Transactions provide consistency, ensuring that sets of objects move from&#xD;
    one consistent state to another.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE) Overview&lt;/a> - Transaction Management&#xD;
    for an overview of transaction management.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Model EJB transactions as described in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot; guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case&#xD;
    Design&lt;/a> - Modeling Transactions.&amp;nbsp; At implementation time you decide, based on your design model, whether to&#xD;
    demarcate the transactions declaratively-in the deployment descriptor, by defining the transaction attribute of an EJB&#xD;
    method as one of Required, RequiresNew, NotSupported, Supports, Mandatory, or Never or programmatically using the Java&#xD;
    Transaction API.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc498225367&quot; name=&quot;_Toc498225367&quot;>Model Security&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As part of the design, determine whether application security can be handled declaratively, using security roles and&#xD;
    method permissions in the EJB deployment descriptor or programmatically using J2EE security APIs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use sequence diagrams to consider security scenarios. If necessary, annotate the sequence diagrams to document the&#xD;
    security requirements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE) Overview&lt;/a> - Security Management for&#xD;
    an overview of security management.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc498225370&quot; name=&quot;_Toc498225370&quot;>Forward Engineer EJB Component&lt;/a>s&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You generate an EJB's Java classes by forward engineering using Rose Java, as described in &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/generating_elements_F992DEA8.html&quot;&#xD;
    guid=&quot;{EE8B53A9-8501-459E-90CC-990B25068DFA}&quot;>Tool Mentor: Generating Elements from a Model Using Rational Rose&lt;/a>.&#xD;
    The EJB deployment descriptor ejb-jar.xml will be generated automatically as a result of forward engineering the EJB's&#xD;
    bean class.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;_Toc498225371&quot; name=&quot;_Toc498225371&quot;>Reverse Engineer EJBs&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You can reverse engineer an existing EJB using Rose Java, as described in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/reverse_engineer_code_D4050BB0.html&quot;&#xD;
    guid=&quot;{D674D96E-1A37-48D1-B120-6145C9802E3E}&quot;>Tool Mentor: Reverse-Engineering Code Using Rational Rose&lt;/a>. You must&#xD;
    reverse engineer a .jar file that contains the EJB classes and the deployment descriptor, so that Rose Java can&#xD;
    determine the relationships between the classes (for example, which class is the home interface) being reverse&#xD;
    engineered.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;_Toc498225372&quot; name=&quot;_Toc498225372&quot;>Model the User Interface Layer&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Model the User Interface layer of a J2EE application as you would any Web application. In general, analysis classes&#xD;
    stereotyped &amp;lt;&amp;lt;boundary&amp;gt;&amp;gt; are candidates for classes and collaborations of classes in the User Interface&#xD;
    layer. Boundary classes can be implemented as, for example, JSP pages, servlets, HTML pages or standalone Java clients,&#xD;
    depending on the design.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information, see:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot;&#xD;
            href=&quot;./../../../core.base_rup/guidances/whitepapers/modeling_web_application_architectures_with_uml_54011136.html&quot;&#xD;
            guid=&quot;_TACPgEWgEdqT6eCCQuiftQ&quot;>Whitepaper: Modeling Web Application Architectures with UML&lt;/a>&amp;nbsp;&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot;&#xD;
            border=&quot;0&quot; /> &amp;nbsp;&lt;i>RoseWeb Modeler &amp;gt; Concepts&lt;/i> topic in the Rational Rose online Help&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            Modeling Web Application Design with UML at &lt;a href=&quot;http://www.rational.com/products/whitepapers/100462.jsp&quot;&#xD;
            target=&quot;_blank&quot;>http://www.rational.com/products/whitepapers/100462.jsp&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Related activities:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/use_case_design_92D13EEE.html&quot;&#xD;
            guid=&quot;{76E2B93D-051C-4B8C-BEA1-B40A40CBD986}&quot;>Task: Use-Case Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/subsystem_design_5D1BCC0C.html&quot;&#xD;
            guid=&quot;{CAA385CA-2BA2-40F2-8FE3-E21089D02119}&quot;>Task: Subsystem Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/tasks/class_design_98F20FF9.html&quot;&#xD;
            guid=&quot;{27AE0601-2E95-4A6A-8EB3-0A4BA8E5626B}&quot;>Task: Class Design&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    See also:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/web_architecture_patterns_49E51CA1.html&quot;&#xD;
            guid=&quot;5.037070740002309E-305&quot;>Concept: Web Architecture Patterns&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot;&#xD;
            guid=&quot;3.801315327549898E-305&quot;>Concept: Layering&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot;&#xD;
            href=&quot;./../../../core.base_rup/guidances/guidelines/building_web_applications_with_the_uml_922EDDA8.html&quot;&#xD;
            guid=&quot;4.559124609104376E-305&quot;>Guideline: Building Web Applications with the UML&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/design_model_A82D7B3E.html&quot;&#xD;
            guid=&quot;2.3158107674855575E-306&quot;>Guideline: Design Model&lt;/a>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Forward and Reverse Engineering of Presentation Classes&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    You can forward and reverse engineer presentation classes. Rose Java supports:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            Reverse engineering of a Web application (.war). &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot;&#xD;
            src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&amp;nbsp;For more information, refer to the&#xD;
            &lt;i>Rose Java &amp;gt; How to &amp;gt; Reverse Engineer from&amp;nbsp; Java Source to Rose&amp;nbsp;&lt;/i> topic in the Rational&#xD;
            Rose online Help.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            Creating a new servlet class complete with appropriate methods. &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot; hspace=&quot;0&quot;&#xD;
            src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&amp;nbsp;For more information, refer to the&#xD;
            &lt;i>Rose Java &amp;gt; How to &amp;gt; Work with EJBs and servlets&lt;/i> topic in the Rational Rose online Help.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
