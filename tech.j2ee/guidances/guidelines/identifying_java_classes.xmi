<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C-LOgNwuEdmRU7lXzo6lKQ" name="identifying_java_classes,2.5015077375422883E-305" guid="_C-LOgNwuEdmRU7lXzo6lKQ" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In a Java application, Java classes are the fundamental building blocks of all implementation constructs, such as&#xD;
    JavaBeans, EJBs, Servlets, and Applets. All implementation logic is provided in Java classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Classes are templates from which objects are created. Classes encapsulate data structures with the algorithms for&#xD;
    manipulating the data. A class is usually a factory for the objects it defines.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These guidelines do not explain the concept of classes or object-oriented design in detail. The discussion that follows&#xD;
    assumes that the reader is familiar with object-oriented design. For a detailed discussion on object-oriented design,&#xD;
    please see the reference section.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Java_Class_Features&quot; name=&quot;Java_Class_Features&quot;>&lt;/a>Java Class Features&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Java classes include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Member functions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Member data&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Static functions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Static data&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inheritance&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Implementation of interfaces&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Member functions implement some behavior relating to individual objects. Member functions are executed in the context&#xD;
    of an individual object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Member data defines the data structures for objects, in the form of a set of variable declarations. The member data is&#xD;
    ideally only accessed through member functions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Static functions are methods that are executed outside the context of the individual objects they define.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Static data belongs to the class defining it rather than the individual objects it defines. There is exactly one&#xD;
    instance of static data in a running application. The static data is typically only accessed through static functions,&#xD;
    although some designs call for instances directly accessing the static data.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Java classes can be related through inheritance, expressed using the Java keyword &quot;extends&quot;. Inheritance provides a&#xD;
    sophisticated technique for code reuse, allowing designers to extract common data structures and behavior into&#xD;
    superclasses, leaving specific behavior in subclasses.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An interface declares a set of methods whose implementation is provided in classes. A class can implement several&#xD;
    interfaces and interfaces can be implemented by many classes. Separation of interface from implementation increases&#xD;
    decoupling of classes. Accessing objects through interfaces provides a clean way to use polymorphism.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identifying_Java_Classes&quot; name=&quot;Identifying_Java_Classes&quot;>&lt;/a>Identifying Java Classes&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In a J2EE application, Java classes can be identified to in order to support the design of J2EE elements. For more&#xD;
    information on identifying these elements, see the following guidelines:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_enterprise_javabeans_ejbs_2581AEE5.html&quot;&#xD;
        guid=&quot;9.931732120190802E-307&quot;>Guideline: Identifying Enterprise JavaBeans (EJBs)&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_servlets_951FE427.html&quot;&#xD;
        guid=&quot;6.749276633239724E-306&quot;>Guideline: Identifying Servlets&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_javabeans_B4489D75.html&quot;&#xD;
        guid=&quot;2.8184208504373704E-306&quot;>Guideline: Identifying JavaBeans&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_j2ee_application_clients_A6AFA9D0.html&quot;&#xD;
        guid=&quot;1.2221823675598937E-305&quot;>Guideline: Identifying J2EE Application Clients&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The guidelines for identifying additional Java classes are no different than the guidelines for identifying any other&#xD;
    kind of classes. For more information, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/identify_design_elements_real-time_design_7BC430C2.html&quot;&#xD;
    guid=&quot;{586963D0-607D-4EC2-8D53-292DAFAB9C92}&quot;>Task: identify_design_elements_real-time_design&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling_Java_Classes&quot; name=&quot;Modeling_Java_Classes&quot;>&lt;/a>Modeling Java Classes&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Java classes are modeled as UML classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the diagram below, we show the UML representation of a Java class and the corresponding Java source code.&#xD;
&lt;/p>&#xD;
&lt;table>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/myclass.gif&quot; />&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                class MyClass {&lt;br />&#xD;
                 private int myMemberData;&lt;br />&#xD;
                 private String myOtherMemberData;&lt;br />&#xD;
                 private static int myStaticData;&lt;br />&#xD;
                 public int getMyMemberData() {&lt;br />&#xD;
                 return this.myOtherMemberData;&lt;br />&#xD;
                 }&lt;br />&#xD;
                 public static int getMyStaticData() {&lt;br />&#xD;
                 return MyClass.myStaticData;&lt;br />&#xD;
                 }&lt;br />&#xD;
                 }&lt;br />&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
