<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C-XbwdwuEdmRU7lXzo6lKQ" name="identifying_servlets,6.749276633239724E-306" guid="_C-XbwdwuEdmRU7lXzo6lKQ" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This guideline focuses on identifying Servlets. Additional guidance on Servlets is provided in &lt;a&#xD;
    class=&quot;elementlinkwithtype&quot; href=&quot;./../../../tech.j2ee/guidances/guidelines/servlet_FB1EC186.html&quot;&#xD;
    guid=&quot;7.265155609265114E-306&quot;>Guideline: Servlet&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Identifying Servlets&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Servlets are server classes that interact with web-based clients. They are primarily identified from control classes&#xD;
    (see &lt;a class=&quot;elementlinkwithtype&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/analysis_class_7E97273E.html&quot;&#xD;
    guid=&quot;2.2738948033145062E-306&quot;>Guideline: Analysis Class&lt;/a>) in web architectures. They may be used to generate web&#xD;
    pages for presentation purposes, but in general this is better suited to JSPs (see &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/javaserver_page_jsp_C204C841.html&quot;&#xD;
    guid=&quot;2.5833499297818664E-306&quot;>Guideline: JavaServer Page (JSP)&lt;/a>). They may also be used to interact with databases,&#xD;
    as in a Web-centric deployment configuration, as described in &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/j2ee_deployment_configurations_C0F819AF.html&quot;&#xD;
    guid=&quot;7.671163061311939E-306&quot;>Concept: J2EE Deployment Configurations&lt;/a>. And since J2EE 1.4, servlets can also be&#xD;
    used to implement web services as defined in the &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;http://java.sun.com/webservices/jaxrpc/index.jsp&quot; target=&quot;_blank&quot;>JAX-RPC&lt;/a> specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, for applications with significant business logic, or applications which require the features offered by EJBs,&#xD;
    a multi-tier deployment configuration (see &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/j2ee_deployment_configurations_C0F819AF.html&quot;&#xD;
    guid=&quot;7.671163061311939E-306&quot;>Concept: J2EE Deployment Configurations&lt;/a>) is more appropriate. In this case, servlets&#xD;
    are typically used to coordinate presentation logic and provide a bridge to the business logic and data provided by&#xD;
    EJBs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A typical use of a servlet is as a Front Controller. Front controllers provide a single entry point to an application,&#xD;
    thus making security, application state, and presentation uniform and easier to maintain. &amp;nbsp; A front controller&#xD;
    accepts a user request, processes the request and determines the appropriate presentation component to forward it to.&#xD;
    See &lt;i>Core J2EE Design Patterns - Front Controller&lt;/i> ([&lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/supportingmaterials/java_references_110189E3.html&quot;&#xD;
    guid=&quot;1.4494927535802764E-304&quot;>ALU01&lt;/a>]) for details.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If your design contains a large number of JSPs with similar control code, consider introducing a servlet to consolidate&#xD;
    this logic in one place.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Modeling Servlets&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Servlets are represented in RUP by &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
    guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>Artifact: Design Class&lt;/a>, and so are modeled as classes. Servlets for&#xD;
    handling HTTP requests are stereotyped as &amp;lt;&amp;lt;HTTPServlet&amp;gt;&amp;gt;. Servlets for handling other protocols are&#xD;
    stereotyped as &amp;lt;&amp;lt;GenericServlet&amp;gt;&amp;gt;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Every servlet may be thought of as providing the same interface, a single operation that services requests and provides&#xD;
    standard client, session, and servlet context information. So, modeling a servlet is not concerned about defining&#xD;
    interface operations, but rather defining its responsibilities and how it interacts with other design elements, such as&#xD;
    clients, JSPs, helper classes, EJBs, and so on.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    Web Services Endpoint&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    As we have seen previously, servlets can be used to implement web services and need to fill the following requirements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It must have a default public constructor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It must implement all the methods declared by the &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/concepts/web_services_for_j2ee_4E401D7.html&quot;&#xD;
        guid=&quot;1.2274284020937826E-305&quot;>Service Endpoint Interface&lt;/a> and its business methods must be public and not final&#xD;
        or static.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It must be stateless.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The class must be public, but not final nor abstract.&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
