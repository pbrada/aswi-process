<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C946otwuEdmRU7lXzo6lKQ" name="identifying_session_beans,6.241144674389355E-307" guid="_C946otwuEdmRU7lXzo6lKQ" version="7.1.0">
  <mainDescription>&lt;h2>&#xD;
    Introduction&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    This guideline focuses on identifying Session Beans. Additional guidance on Session Beans is provided in &lt;a&#xD;
    class=&quot;elementlinkwithtype&quot; href=&quot;./../../../tech.j2ee/guidances/guidelines/session_bean_B41C78.html&quot;&#xD;
    guid=&quot;7.831474550884131E-306&quot;>Guideline: Session Bean&lt;/a> General guidance on EJBs is provided by &lt;a&#xD;
    class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/enterprise_javabean_ejb_7F0C3AFF.html&quot;&#xD;
    guid=&quot;1.5078998518719443E-305&quot;>Guideline: Enterprise JavaBean (EJB)&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Reusable_Components&quot; name=&quot;Identifying_Session_Beans&quot;>&lt;/a>Identifying Session Beans&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Control classes are often good candidates for session beans, as session beans are geared to providing control logic, in&#xD;
    particular when this control logic involves a conversations with a client. A session beans is also often identified as&#xD;
    a facade for a set of objects in the Business Tier (see &lt;a href=&quot;#Session_Facade_Pattern&quot;>Session Facade Pattern&lt;/a>&#xD;
    below). Also since J2EE 1.4, stateless session beans can be used to implement web services.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you are working with J2EE 1.3, a standard practice is to handle all remote client access through session EJBs, which&#xD;
    manipulate entity EJBs in the same JVM through local component interfaces.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    Modeling Session Beans&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/identifying_enterprise_javabeans_ejbs_2581AEE5.html&quot;&#xD;
    guid=&quot;9.931732120190802E-307&quot;>Guideline: Identifying Enterprise JavaBeans (EJBs)&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    Stateful vs. Stateless&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    There are two types of session beans: stateful and stateless. Part of identifying a session bean is defining its&#xD;
    responsibilities - one of which may be to maintain client state between calls.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Stateful session beans hold state information about the conversation between the client and the EJB container. A&#xD;
    stateful session bean instance only exists for the duration of the client conversation. Stateful session beans&#xD;
    typically perform services using this data for the client. The services provided by the stateful session bean might&#xD;
    coordinate the interactions of other business objects (session beans and entity beans). For example, a &lt;i>shopping&#xD;
    cart&lt;/i> containing objects for purchase might be implemented using a stateful session bean, because it retains&#xD;
    information while the client is interacting with the application. Because stateful session beans are allocated to a&#xD;
    specific client, they consume more system resources than a stateless session bean, for the advantage of retaining&#xD;
    client state. The container manages these resources, typically by &quot;passivating&quot; (writing to disk) stateful session&#xD;
    beans and reactivating them when and as needed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Stateless session beans don't hold state information about the conversation between the client and the EJB container.&#xD;
    &quot;Stateless&quot; really means no client conversation state. Thus, a stateless session bean can contain other kinds of state,&#xD;
    such as a database connection that any client can use. Stateless session beans perform generic services that don't use&#xD;
    client state data from previous method calls, but instead receive all relevant input as parameters in the current&#xD;
    method call, or obtain the data from other sources during the method call (such as from entity beans or by accessing a&#xD;
    database via JDBC). Stateless session beans are typically drawn from a ready pool and dispatched as needed to handle&#xD;
    incoming requests. Because all instances are equivalent, stateless session beans don't need to know about their client.&#xD;
    This can allow for increased performance and scalability. Stateless session beans are more efficient, because an&#xD;
    instance can be shared among discontiguous requests, rather than &quot;tied&quot; up with a particular session of activity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, choose the kind of session bean most naturally suited to the conversation with the client. There are&#xD;
    strategies to force-fit a stateful session bean into a stateless session bean, such as storing client state on the&#xD;
    client, and resending on each invocation, or storing and retrieving client state from a database on each method&#xD;
    invocation. These strategies, however, may actually reduce scaleability due to overheads in network traffic and data&#xD;
    access.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the session bean will be created to implement a web service, you must use a stateless session bean as defined in the&#xD;
    JSR 1.3 API specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Different approaches to designing client state is covered by &lt;a class=&quot;elementlinkwithtype&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/designing_state_for_j2ee_applications_C145BCA3.html&quot;&#xD;
    guid=&quot;7.896195949843941E-306&quot;>Guideline: Designing State for J2EE Applications&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Reusable_Components&quot; name=&quot;Session_Facade_Pattern&quot;>&lt;/a>Session Facade Pattern&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    A common use of session beans is as a facade that encapsulates interactions between objects in the Business Tier. The&#xD;
    session bean serves to abstract this complexity, providing a simpler interface for clients. This pattern is described&#xD;
    in detail in J2EE Patterns - Session Facade Pattern ([&lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/supportingmaterials/java_references_110189E3.html&quot;&#xD;
    guid=&quot;1.4494927535802764E-304&quot;>ALU01&lt;/a>]).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, it is generally good practice to pull out inter-entity bean logic and move into session beans to minimize&#xD;
    coupling between entity beans. The entity beans can be accessed via local interfaces, as the session bean facade&#xD;
    provides access to remote clients. This approach is most effective when there are several closely related entity beans.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    Web Services Endpoint&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    As we have seen previously, stateless session beans can be used to implement web services.Such bean is also called&#xD;
    Service Implementation Bean and need to fill the following requirements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It must have a default public constructor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It must implement all the methods declared by the &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
        href=&quot;./../../../tech.j2ee/guidances/concepts/web_services_for_j2ee_4E401D7.html&quot;&#xD;
        guid=&quot;1.2274284020937826E-305&quot;>Service Endpoint Interface&lt;/a> and its business methods must be public and not final&#xD;
        or static.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It must be stateless.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The class must be public, but not final nor abstract.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information about using session beans to implement web services, please see &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;http://java.sun.com/products/ejb/docs.html&quot; target=&quot;_blank&quot;>EJB 2.1&lt;/a> and &lt;a&#xD;
    href=&quot;http://www.jcp.org/en/jsr/detail?id=109&quot; target=&quot;_blank&quot;>JSR 109&lt;/a> specifications.&lt;br />&#xD;
&lt;/p>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
