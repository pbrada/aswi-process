<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C7yo4dwuEdmRU7lXzo6lKQ" name="j2ee_deployment_configurations,7.671163061311939E-306" guid="_C7yo4dwuEdmRU7lXzo6lKQ" version="7.1.0">
  <mainDescription>&lt;h2>&#xD;
    Introduction&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The J2EE platform supports the development and deployment of a variety of standard deployment configurations. It is&#xD;
    such standard deployment configurations &lt;span style=&quot;COLOR: windowtext&quot;>that take a lot of the guesswork out of&#xD;
    application development.&lt;/span> In the following sections, you'll find descriptions of the most common deployment&#xD;
    configurations, and the pros and cons of each.&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-LEFT: 0px&quot;>&#xD;
    If you're not already familiar with the J2EE concepts, see those described in &lt;a class=&quot;elementlink&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot;>Java 2 Platform Enterprise Edition (J2EE) Overview&lt;/a> before going further.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Standalone Deployment Configuration&quot; id=&quot;Standalone Deployment Configuration&quot;>&lt;/a>Standalone Deployment&#xD;
    Configuration&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The first deployment configuration is shown in Figure 1. In this configuration, there is neither a Web container nor an&#xD;
    EJB container-a client accesses EIS resources directly, and is responsible for handling any presentation logic,&#xD;
    business logic, and integration logic itself.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;JDFPFigure&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;182&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/co_j2e1.jpg&quot; width=&quot;294&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;FN&quot; align=&quot;center&quot;>&#xD;
    &lt;b>&lt;font size=&quot;2&quot;>Figure 1: Standalone Deployment Configuration&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    At first glance, this configuration might seem like an attractive proposition for applications that provide simple&#xD;
    manipulation of data held in the EIS resources. However, this configuration has a number of potential drawbacks.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    Changes to EIS resources can have a major impact on the implementation of the application, which is often directly&#xD;
    dependent on the internal structure of each EIS resource, such as the structure of database tables. Any change to the&#xD;
    application itself requires a complete rollout to every user-there is no central server where the application is&#xD;
    deployed so that clients have immediate access to the latest fixes.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    Also, this deployment configuration does not encourage a division of responsibility. For example, it's often the case&#xD;
    that presentation logic and business logic are tightly coupled, making it difficult to support application evolution&#xD;
    and maintenance.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The real issues with this deployment configuration, however, start to surface when you decide to scale your&#xD;
    application. Client workstations have limited performance characteristics so, ideally, you should distribute processing&#xD;
    across a number of machines. However, the standalone configuration isn?t designed to support distributed processing.&#xD;
    Also, when you attempt to support more clients accessing EIS resources concurrently, you might find that your&#xD;
    applications are constrained by the EIS resource itself, such as the number of concurrent database connections.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;EJB-Centric Deployment Configuration&quot; id=&quot;EJB-Centric Deployment Configuration&quot;>&lt;/a>EJB-centric Deployment&#xD;
    Configuration&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The EJB-centric deployment configuration is shown in Figure 2. In this configuration, an EJB container sits between the&#xD;
    client container and the EIS resources-there is no Web container. The presentation logic is in the client, with&#xD;
    business logic residing in EJBs. Rather than accessing EIS resources directly, all requests from the clients are&#xD;
    managed by the appropriate EJBs. Clients are, therefore, shielded from changes in EIS resources.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;JDFPFigure&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;171&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/co_j2e2.jpg&quot; width=&quot;443&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;FN&quot; align=&quot;center&quot;>&#xD;
    &lt;b>&lt;font size=&quot;2&quot;>Figure 2: EJB-centric Deployment Configuration&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The EJB-centric deployment configuration is designed to address many of the issues present in the standalone deployment&#xD;
    configuration. From a scalability perspective, the J2EE platform implementation can distribute processing across a&#xD;
    number of machines. Also, an EJB container is responsible for ensuring efficient use of limited resources, such as&#xD;
    database connections. From an application evolution and maintenance perspective, this configuration also encourages a&#xD;
    separation of presentation logic and business logic.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    However, one of the drawbacks of the EJB-centric deployment configuration is that even minor changes to the user&#xD;
    interface require a complete rollout of the application to every user. Even though the business logic encapsulated in&#xD;
    EJBs can be redeployed on the server (thereby giving users immediate access to any changes), this is not true of the&#xD;
    presentation logic. This is unfortunate, as the look and feel of an application could undergo frequent changes.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Web-Centric Deployment Configuration&quot; id=&quot;Web-Centric Deployment Configuration&quot;>&lt;/a>Web-centric Deployment&#xD;
    Configuration&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The Web-centric deployment configuration is shown in Figure 3. In this configuration, a Web container sits between the&#xD;
    client container and the EIS resources-there is no EJB container. Both presentation logic and business logic are&#xD;
    handled by elements in the Web container (JSPs and servlets). In this configuration, a simple markup language is used&#xD;
    in the client, such as HTML, although this equally could be XML or WML.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;JDFPFigure&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;177&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/co_j2e3.jpg&quot; width=&quot;458&quot;&#xD;
    v:shapes=&quot;_x0000_i1027&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;FN&quot; align=&quot;center&quot;>&#xD;
    &lt;b>&lt;font size=&quot;2&quot;>Figure 3: Web-centric Deployment Configuration&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    Typically a Web-centric deployment configuration results in an emphasis on supporting the look and feel of the&#xD;
    resulting application, with less emphasis on supporting the business logic. Such a configuration supports frequent&#xD;
    changes to the look of an application and is in wide use today.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    A Web-centric deployment configuration provides a number of benefits. First, clients aren?t impacted by changes to EIS&#xD;
    resources, since clients don?t access these resources directly. Second, it's possible to redeploy the entire&#xD;
    application without requiring any rollout to users, since the application resides wholly on a server.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    However, while the use of EJBs is sometimes considered to be overkill for the job at hand, the omission of EJBs results&#xD;
    in some of the issues raised for the standalone deployment configuration. Specifically, this configuration does not&#xD;
    encourage a clear division of responsibility between presentation logic and business logic, often resulting in tightly&#xD;
    coupled elements that impede application evolution and maintenance. Also, all of the scalability issues present in a&#xD;
    standalone deployment configuration apply to a Web-centric architecture.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Multi-Tier Deployment Configuration&quot; id=&quot;Multi-Tier Deployment Configuration&quot;>&lt;/a>Multi-tier Deployment&#xD;
    Configuration&#xD;
&lt;/h2>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The multi-tier deployment configuration is shown in Figure 4. This configuration includes both a Web container and an&#xD;
    EJB container, and it exhibits all of the benefits discussed for the other deployment configurations with none of the&#xD;
    drawbacks. Presentation logic is handled by elements in the Web container, with business logic handled by EJBs in the&#xD;
    EJB container.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;JDFPFigure&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;253&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/co_j2e4.jpg&quot; width=&quot;571&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;FN&quot; align=&quot;center&quot;>&#xD;
    &lt;b>&lt;font size=&quot;2&quot;>Figure 4: Multi-tier Deployment Configuration&lt;/font>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    Clients aren?t impacted by changes to EIS resources because these resources aren?t accessed directly. Also, it's&#xD;
    possible to redeploy the entire application without requiring any rollout to users, since the application resides&#xD;
    wholly on the server.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    From a scalability perspective, processing can be distributed to support concurrent processing. Also from a scalability&#xD;
    perspective, the EJB container is responsible for ensuring efficient use of limited resources, such as database&#xD;
    connections.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    From an application evolution and maintenance perspective, this configuration also encourages a clean separation of&#xD;
    responsibilities. The presentation logic is decoupled from EIS resources, and the business logic is decoupled from the&#xD;
    look and feel. This clean separation can aid allocation of work to differently skilled developers, and presentation&#xD;
    logic and business logic can be developed concurrently.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    The multi-tier deployment configuration can also ease the migration from one client device (such as a Web browser) to&#xD;
    another (such as a PDA). A complete rewrite of the application isn?t required because the business logic encapsulated&#xD;
    in EJBs remains unchanged and can be used as-is.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;Body&quot;>&#xD;
    To summarize, there are a number of deployment configurations, each with its pros and cons. One of the objectives of&#xD;
    the J2EE platform is to be flexible enough to support whatever deployment configuration is deemed appropriate for an&#xD;
    organization, at the same time addressing the enterprise concerns.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
