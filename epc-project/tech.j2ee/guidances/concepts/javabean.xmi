<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C_mx4twuEdmRU7lXzo6lKQ" name="javabean,7.536447688812142E-306" guid="_C_mx4twuEdmRU7lXzo6lKQ" changeDate="2005-10-25T14:34:43.357-0700" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    JavaBeans define a simple and powerful component model for Java. The goal of JavaBeans is to provide for self-contained&#xD;
    and reusable units that can be manipulated programmatically by developers or visually in builder tools.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    JavaBeans can be GUI controls or they may be lacking visual representation. GUI controls in Java are typically&#xD;
    JavaBeans in order to be manipulated by the builder tools. In J2EE, simple JavaBeans are commonly used from JSPs, where&#xD;
    they provide for separation of presentation in HTML and the Java code, which is contained in the JavaBeans.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A JavaBean is a Java class with three distinctive features:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#JavaBean_Properties&quot;>Properties&lt;/a>,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Events_and_Notification&quot;>Events&lt;/a>,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Methods.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;JavaBean_Properties&quot; name=&quot;JavaBean_Properties&quot;>&lt;/a>JavaBean Properties&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Properties of a JavaBean can be access by other components. Typically, a property is a private value accessed through&#xD;
    setter and getter methods, but it can be a computed value as well. Updates of properties can have various side effects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Accessors are methods for accessing properties. Accessors can be getters and setters, and they follow naming&#xD;
    conventions:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;+0&quot;>&lt;font size=&quot;2&quot;>void set&lt;i>PropertyName&lt;/i>(&lt;i>PropertyType&lt;/i> value); // setter&lt;br />&#xD;
     &lt;i>PropertyType&lt;/i> get&lt;i>PropertyName&lt;/i>() // getter&lt;/font>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For a boolean property, a getter can be:&lt;br />&#xD;
    &lt;br />&#xD;
     &lt;font size=&quot;2&quot;>boolean is&lt;i>PropertyName&lt;/i>() // getter for a boolean property&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Example&lt;/b>: Customer Bean&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following is an example of a simple JavaBean (Customer) with two simple properties: name and email. Notice how the&#xD;
    properties are defined through the pairs of set/get methods.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;UML diagram showing Customer properties.&quot; src=&quot;resources/customer.gif&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        public class Customer {&lt;br />&#xD;
         private String name;&lt;br />&#xD;
         private String email;&lt;br />&#xD;
        &lt;br />&#xD;
         public String getName() {&lt;br />&#xD;
         return name;&lt;br />&#xD;
         }&lt;br />&#xD;
        &lt;br />&#xD;
         public void setName(String aName) {&lt;br />&#xD;
         name = aName;&lt;br />&#xD;
         }&lt;br />&#xD;
        &lt;br />&#xD;
         public String getEmail() {&lt;br />&#xD;
         return email;&lt;br />&#xD;
         }&lt;br />&#xD;
        &lt;br />&#xD;
         public void setEmail(String aEmail) {&lt;br />&#xD;
         email = aEmail;&lt;br />&#xD;
         }&lt;br />&#xD;
        &lt;br />&#xD;
         }&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Such simple JavaBeans are often used in JSPs, where they enable transport of values from forms on the web pages.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Indexed_Properties&quot; name=&quot;Indexed_Properties&quot;>&lt;/a>Indexed Properties&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Besides simple properties, which have a single value, a property can be a set of values contained in an array.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Indexed properties can return a value at the specified index, or the whole array of values.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Indexed properties have the following signatures:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;font size=&quot;2&quot;>void set&lt;i>PropertyName&lt;/i>(int index, &lt;i>PropertyType&lt;/i> value); // indexed setter&lt;br />&#xD;
         &lt;i>PropertyType&lt;/i> getter(int index); // indexed getter&lt;br />&#xD;
         void set&lt;i>PropertyName&lt;/i>(&lt;i>PropertyType&lt;/i> values[]); // array setter&lt;br />&#xD;
         &lt;i>PropertyType&lt;/i>[]get&lt;i>PropertyName&lt;/i>(); // array getter&lt;/font>&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Bound_Properties&quot; name=&quot;Bound_Properties&quot;>&lt;/a>Bound Properties&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The bound property mechanism provides for notification service when the property changes. Interested objects that wish&#xD;
    to be notified of the change register themselves in advance, and when the property change occurs, the registered&#xD;
    objects are sent the notification. Typically, this notification is done through an &lt;a&#xD;
    href=&quot;#Events_and_Notification&quot;>event&lt;/a> fired by the component with the bound property after the property has been&#xD;
    set.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A JavaBean with a bound property exposes methods for registration and deregistration of interested objects, called&#xD;
    listeners. The developers can define their own notification mechanism, but the Java libraries provide a number of&#xD;
    commonly used support classes in the &lt;i>java.beans&lt;/i> package.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Constrained_Properties&quot; name=&quot;Constrained_Properties&quot;>&lt;/a>Constrained Properties&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Constrained properties are similar to bound properties, but the notification happens before the property is actually&#xD;
    set. That enables interested parties to disallow the change of the property by throwing a &lt;i>PropertyVetoException&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Events_and_Notification&quot; name=&quot;Events_and_Notification&quot;>&lt;/a>Events and Notification&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Events are the feature of JavaBeans which enables independently developed components to communicate with each other by&#xD;
    propagating information about the state change. In this model, some components fire events, which are handled by other&#xD;
    components, in the role of the event listeners.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To support this communication model, JavaBeans component model provides:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        properties that can fire events (&lt;a href=&quot;#Bound_Properties&quot;>bound&lt;/a> and &lt;a&#xD;
        href=&quot;#Constrained_Properties&quot;>constrained&lt;/a> properties)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        registration methods, so that listeners can register themselves&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        events, which carry information about the change&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        listeners, which can react on the delivered event&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The following class diagram illustrates these concepts for a JavaBean called &lt;i>EventSource&lt;/i> with a simple&#xD;
    &lt;i>int&lt;/i> property.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/event_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    During configuration, concrete listeners register with the JavaBean. At some point later, some other object calls the&#xD;
    &lt;i>setProperty&lt;/i> method, which will start the notification process by creating the event object. The EventSource&#xD;
    JavaBean will invoke the &lt;i>propertyChange&lt;/i> method on all registered listeners. Event listeners will receive the&#xD;
    event, read the values from it and react on the event.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following sequence diagram illustrates the order of invocations:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/event_sequ_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Notification of listeners is synchronous with respect to the JavaBean instance, which is the source of the event, but&#xD;
    the event listener can do the processing of events in another thread.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introspection&quot; name=&quot;Introspection&quot;>&lt;/a>Introspection&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Introspection is a run-time mechanism that enables detection of &lt;a href=&quot;#JavaBean_Properties&quot;>properties&lt;/a>, &lt;a&#xD;
    href=&quot;#Events_and_Notification&quot;>events&lt;/a> and methods of a JavaBean. Introspection is used by development tools and by&#xD;
    programs that do not use hard-coded dependencies on other components. Introspection is achieved through reflection and&#xD;
    a set of conventions for naming of methods and interfaces. Additional features of introspection are supported by the&#xD;
    &lt;i>BeanInfo&lt;/i> class. JavaBeans naming conventions used for introspection are sometimes called &quot;design patterns&quot;, but&#xD;
    they should not be confused with the notion of design pattern in object-oriented design.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Persistence&quot; name=&quot;Persistence&quot;>&lt;/a>Persistence&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A JavaBean can be persisted through a serialization mechanism. The serialization can be automatic or custom, depending&#xD;
    if the JavaBean implements &lt;i>Serializable&lt;/i> or &lt;i>Externalizable&lt;/i> interfaces. JDK 1.4 introduces&#xD;
    &lt;i>XMLEncoder&lt;/i> and &lt;i>XMLDecoder&lt;/i> classes that provide for storing of JavaBeans instances in the XML format.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Customization&quot; name=&quot;Customization&quot;>&lt;/a>Customization&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The appearance and behavior of a JavaBean can be customized at design time. This is particularly important for visual&#xD;
    JavaBeans that are used in graphical user interfaces. The customization is done through a property editor or by using&#xD;
    customizers. Customizers provide a custom user interface for configuring a JavaBean instance at design time.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;BeanContext&quot; name=&quot;BeanContext&quot;>&lt;/a>BeanContext&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    BeanContext defines a logical containment hierarchy that enables JavaBeans to interrogate their environment for&#xD;
    capabilities and services. BeanContext mechanisms provide support for logical containment hierarchy of JavaBeans and&#xD;
    lookup of services offered by JavaBeans in the hierarchy.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;JavaBeans_Activation_Framework&quot; name=&quot;JavaBeans_Activation_Framework&quot;>&lt;/a>JavaBeans&amp;trade; Activation Framework&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Java Activation Framework is a standard Java extension which enables determination of the type of a piece of data,&#xD;
    encapsulation of it, discovery of its available operations and instantiation of a software component that corresponds&#xD;
    to the desired operation on the piece of data.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;More_Information&quot; name=&quot;More_Information&quot;>&lt;/a>More Information&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For more information on JavaBeans, see the JavaBeans API Specification, Version 1.01 at &lt;a href=&quot;http://java.sun.com/&quot;&#xD;
    target=&quot;_blank&quot;>http://java.sun.com/&lt;/a>. Follow the links to &lt;b>Docs &amp;amp; Training &amp;gt; Java 2 Platform, Standard&#xD;
    Edition &amp;gt; Java 2 SDK, SE v1.3 documentation &amp;gt; JavaBeans &amp;gt; JavaBeans Specification&lt;/b>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
