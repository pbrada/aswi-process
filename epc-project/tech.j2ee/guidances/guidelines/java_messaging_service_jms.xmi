<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C9ggIdwuEdmRU7lXzo6lKQ" name="java_messaging_service_jms,1.706166121514094E-306" guid="_C9ggIdwuEdmRU7lXzo6lKQ" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Java Message Service (JMS) can be used for communication between components. Features of JMS, such as asynchronous&#xD;
    communication and guaranteed delivery, make it a popular choice for enterprise applications. JMS can be used for&#xD;
    synchronous communication as well, but the asynchronous use is dominant.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These guidelines describe when to use JMS, how to model it, and some applicable design considerations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on JMS, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_messaging_service_jms_84F49452.html&quot;&#xD;
    guid=&quot;9.950419951286216E-306&quot;>Concept: Java Messaging Service (JMS)&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling_JMS&quot; name=&quot;Modeling_JMS&quot;>&lt;/a>Modeling JMS&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    JMS clients are modeled as classes. The following diagram illustrates a typical interaction of a message producer for&#xD;
    sending messages using JMS. The example is using a queue as a destination.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/jms_send_queue.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    A JMS client must implement the message listener interface. The JMS provider makes sure that a special method&#xD;
    &lt;i>onMessage&lt;/i> is called whenever a message arrives.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/msg_consumer.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The next diagram shows a typical setup of a JMS consumer client.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/msg_consumer_sequ.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Designing_JMS&quot; name=&quot;Designing_JMS&quot;>&lt;/a>Designing JMS&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are two main ways of designing JMS applications: &lt;i>point-to-point&lt;/i> and &lt;i>publish-subscribe&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a &lt;b>point-to-point&lt;/b> model, JMS is used to deliver a message to ONE client.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/pt_to_pt.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Message producers communicate with a message consumer by sending messages to one queue. Conceptually, a queue has only&#xD;
    one consumer, but many JMS providers allow multiple consumers to support load balancing. When multiple consumers are&#xD;
    used, each message is handled by one and only one consumer. Messages are held in the queue until they are consumed or&#xD;
    until they expire.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a &lt;b>publish-subscribe&lt;/b> model, the communication pattern allows multiple producers to send messages to multiple&#xD;
    consumers. Consumers subscribe to topics, and the middleware delivers the messages to the consumers.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/publish_subscribe.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In contrast to the point-to-point model, the publish-and-subscribe model keeps the messages in a topic until all the&#xD;
    clients have received it.&#xD;
&lt;/p>&lt;b>Note:&lt;/b> Since JMS 1.1 you can combine this two models on the same JMS application.&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
