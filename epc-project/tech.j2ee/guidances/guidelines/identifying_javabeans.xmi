<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C9_BQtwuEdmRU7lXzo6lKQ" name="identifying_javabeans,2.8184208504373704E-306" guid="_C9_BQtwuEdmRU7lXzo6lKQ" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This guideline focuses on identifying and modeling JavaBeans.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on JavaBeans, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/javabean_D488CF3B.html&quot; guid=&quot;7.536447688812142E-306&quot;>Concept:&#xD;
    JavaBean&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identifying_JavaBeans&quot; name=&quot;Identifying_JavaBeans&quot;>&lt;/a>Identifying JavaBeans&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    JavaBeans are Java classes, which are written according to conventions of the JavaBeans component model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    JavaBeans can be used in their simple form, where a JavaBean exposes properties through its getters and setters, but&#xD;
    fires no events. Such a JavaBean would fall under the recommended practice of naming getters and setters for fields of&#xD;
    plain Java classes. This type of JavaBean is commonly used in Java Server Pages, where it acts as a carrier of data&#xD;
    from a form in a Web page.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An additional level of sophistication can be added if we want to allow other parties to be notified upon change or&#xD;
    attempt of change of a JavaBean property. In this case, JavaBean needs to be designed so that it fires events&#xD;
    describing the change of the property.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    JavaBeans which fire (and handle) events are common in user interface frameworks such as Swing, where they are used to&#xD;
    implement the Model-View-Controller architectural pattern. JavaBeans representing the visual components often have&#xD;
    additional classes such as bean customizers, which allow for modification of JavaBean instances during design&#xD;
    time&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling_JavaBeans&quot; name=&quot;Modeling_JavaBeans&quot;>&lt;/a>Modeling JavaBeans&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Java Beans are modeled as Java classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Properties of Java Beans are not explicitly modeled; instead, they are identified through the JavaBeans naming&#xD;
    conventions.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;UML diagram showing Customer properties.&quot;&#xD;
        src=&quot;./../../../tech.j2ee/guidances/concepts/resources/customer.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In design diagrams, it is helpful to use dependencies showing which class fires or handles events. Event listeners are&#xD;
    introduced as interfaces, which are realized by their concrete implementations.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;UML diagram showing event listeners.&quot;&#xD;
        src=&quot;./../../../tech.j2ee/guidances/concepts/resources/event_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
