<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_Dy5QANwuEdmRU7lXzo6lKQ" name="j2ee_module,1.5663580058239784E-305" guid="_Dy5QANwuEdmRU7lXzo6lKQ" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A J2EE Module is the smallest independent unit of deployment in a J2EE application. There are different kinds of J2EE&#xD;
    Modules, as described in &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot; class=&quot;elementLinkWithType&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE)&#xD;
    Overview&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The number and size of J2EE Modules affects how easy it is to deploy and test a J2EE application.&amp;nbsp;It&#xD;
    also&amp;nbsp;affects the ease in which components can be reused for other applications, and how easily the system can be&#xD;
    adapted to other deployment configurations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For information on assembling J2EE Modules, see &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/assembling_j2ee_modules_17925A58.html&quot;&#xD;
    guid=&quot;3.7932077950837037E-305&quot; class=&quot;elementlinkwithtype&quot;>Guideline: Assembling J2EE Modules&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For information on deploying J2EE Modules, see &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/deploying_j2ee_modules_and_applications_62A4A967.html&quot;&#xD;
    guid=&quot;5.3908533897796765E-306&quot; class=&quot;elementlinkwithtype&quot;>Guideline: Deploying J2EE Modules and Applications&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Identifying J2EE Modules&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE Modules are created during integration, but they reflect decisions made in implementation (and actually design).&#xD;
    J2EE Modules are commonly used to package &lt;a&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_implementation_subsystem_118747E9.html&quot;&#xD;
    guid=&quot;{0F629848-C19E-49AB-A6C1-C8D6A094898A}&quot; class=&quot;elementLinkWithType&quot;>Artifact: Implementation Subsystem&lt;/a>, which&#xD;
    commonly map to &lt;a href=&quot;./../../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
    guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot; class=&quot;elementLinkWithType&quot;>Artifact: Design Subsystem&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    J2EE Modules should contain closely related EJBs and helper classes that are only used by those EJBs. Generally such&#xD;
    relationships are identified in design, and these classes would be grouped into a Design Subsystem. The identification&#xD;
    of Design Subsystems should already have considered the issues of re-use, replacement, and support for multiple&#xD;
    deployment configurations. However, when modules are allocated for deployment to specific nodes, then weaknesses in the&#xD;
    design may become apparent, and changes to the Design Subsystems (and/or Implementation Subsystems) may be needed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Identify J2EE Modules to contain components targeted to a single container. Web components are packaged in Web modules&#xD;
    and EJB components are packaged in EJB modules, and Application Client components are packaged in Application Client&#xD;
    modules.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Regular Java classes that are used by multiple modules should be packaged in separate J2EE Modules. The resulting JAR&#xD;
    files appear in class-path references in the modules that require them (or in the transitive closure of such class-path&#xD;
    references).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In summary, when identifying J2EE Modules, start by identifying one module for each Implementation Subsystem, unless&#xD;
    the subsystem contains components to be deployed to different containers, and then define separate modules for each of&#xD;
    the containers.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Modeling J2EE Modules&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    J2EE Modules are represented in the &lt;a class=&quot;elementlink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
    guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Implementation Model&lt;/a> as UML artifacts with a stereotype that&#xD;
    identifies its type: &amp;lt;&amp;lt;EJB-JAR&amp;gt;&amp;gt;, &amp;lt;&amp;lt;JAR&amp;gt;&amp;gt;, or &amp;lt;&amp;lt;WAR&amp;gt;&amp;gt;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The composition of components (such as EJBs or servlets) into a J2EE module can be shown graphically by drawing an&#xD;
    &amp;lt;&amp;lt;implements&amp;gt;&amp;gt; dependency from the contained component to the module it is packaged in, as shown in the&#xD;
    following diagram. &amp;lt;&amp;lt;JARInclude&amp;gt;&amp;gt; dependencies can also be drawn to show the inclusion of an entire Java&#xD;
    package in the archive.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/auction_manager_ejb_jar.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another option is to represent the archive as a package and show the contained components within the package as shown&#xD;
    in the following diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/auction_manager_ejb_jar_package.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In addition to modeling what components are packaged in the archive, you can also model properties of the components,&#xD;
    which are ultimately documented in the archive's deployment descriptor.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of how to model some EJB component properties is provided below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/ejb_jar_example.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The above diagram shows the assembly of three EJBs, BankEJB, LoanEJB, CustomerEJB, and LoanManagerEJB into the same&#xD;
    module, EJBJARArchive1. Notice the modeling of the EJB method properties, the security roles, and the transactions. In&#xD;
    this example, the CustomerEJB runs under the transaction type specified by CustomerTrans (e.g., &quot;Required&quot;). The source&#xD;
    code uses the role name &quot;user&quot;, which is mapped to the &quot;Customer&quot; user role in the deployment descriptor. Also, all&#xD;
    methods in LoanEJB and CustomerEJB are executed with &quot;Customer's&quot; credentials, even if the invoking user belongs to a&#xD;
    different role. Similarly, LoanManagerEJB methods are executed as &quot;Admin&quot;. Finally, no methods can be accessed by users&#xD;
    in BankEJB.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of how to model some Web component properties is provided below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/war_example.gif&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The above diagram shows the assembly of a servlet into a Web module. Notice the modeling of the the security roles and&#xD;
    constraints, where users of type &quot;Customer&quot; run methods in the show results servlet as themselves, subject to security&#xD;
    constraints defined by the properties of WebSecurityContraint1.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The deployment of a J2EE module to a node can be shown in the Deployment Model. See &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/describing_distribution_for_j2ee_applications_93B5A232.html&quot;&#xD;
    guid=&quot;2.0306406686133254E-306&quot; class=&quot;elementlinkwithtype&quot;>Guideline: Describing Distribution for J2EE Applications&lt;/a>&#xD;
    for further discussion on modeling the mapping from modules to deployment nodes.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Deployment Descriptors&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Each J2EE Module contains a J2EE-standard deployment descriptor, plus zero or more vendor-specific descriptors. The&#xD;
    different kinds of deployment descriptors are described in &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot; class=&quot;elementLinkWithType&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE)&#xD;
    Overview&lt;/a>. In general, the standard J2EE deployment descriptors capture primarily design and implementation&#xD;
    decisions. Decisions that RUP would refer to as &quot;deployment decisions&quot;, such as which nodes a component executes on,&#xD;
    and how a component is configured for particular node, is captured in vendor-specific deployment descriptors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Deployment descriptors serve two separate purposes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A means of communicating design decisions to the container. For example, the deployment descriptor for a session&#xD;
        EJB has a &quot;session-type&quot; which states whether the session EJB is stateful or stateless. This must be consistent&#xD;
        with the design and code - one cannot simply change this in the deployment descriptor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A means of tailoring behavior without recompiling code. For example, one can use the deployment descriptor to&#xD;
        define which roles are authorized to call specific methods. This CAN be changed without changes in the EJB's code.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The contents of the deployment descriptor are set when the J2EE Module is created and when it is assembled into a J2EE&#xD;
    Application. For more information on assembling J2EE Modules, see &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/assembling_j2ee_modules_17925A58.html&quot;&#xD;
    guid=&quot;3.7932077950837037E-305&quot; class=&quot;elementlinkwithtype&quot;>Guideline: Assembling J2EE Modules&lt;/a>. For more information&#xD;
    on assembling J2EE Applications, see &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/guidelines/assembling_j2ee_applications_38E5D5D5.html&quot;&#xD;
    guid=&quot;3.347498143656868E-305&quot; class=&quot;elementlinkwithtype&quot;>Guideline: Assembling J2EE Applications&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
