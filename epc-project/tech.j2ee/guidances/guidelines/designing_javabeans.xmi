<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_C8vrI9wuEdmRU7lXzo6lKQ" name="designing_javabeans,1.360568578285337E-305" guid="_C8vrI9wuEdmRU7lXzo6lKQ" version="7.1.0">
  <copyrightStatement href="uma://{928369F7-6023-4D92-9476-A24595B9D4BC}#_vtEpkP1QEdm0MIyQRNy4gA"/>
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This guideline focuses on designing JavaBeans and different choices a designer can make.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on JavaBeans, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/javabean_D488CF3B.html&quot; guid=&quot;7.536447688812142E-306&quot;>Concept:&#xD;
    JavaBean&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;JavaBean_Properties&quot; name=&quot;JavaBean_Properties&quot;>&lt;/a>JavaBean Properties&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Internally, a property value can be stored as a private field, but it can be calculated as well. The designer has a&#xD;
    choice of pre-computing the value of the property, or use lazy evaluation, where the value will be calculated only when&#xD;
    asked for by a caller.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The designer also has a choice of bounding or constraining the property. If the property is bound or constrained, then&#xD;
    the designer must decide on the &lt;a href=&quot;#Events_and_Notification&quot;>events and notification&lt;/a> mechanism.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Events_and_Notification&quot; name=&quot;Events_and_Notification&quot;>&lt;/a>Events and Notification&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For the implementation of the notification mechanism, the designer has two choices:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use &lt;i>PropertyChangeSupport&lt;/i> and &lt;i>PropertyChangeEvent&lt;/i> classes from the &lt;i>java.beans&lt;/i> package.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create a custom notification mechanism&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Classes from the &lt;i>java.beans&lt;/i> package provide implementation that is applicable in most situations.&#xD;
    &lt;i>PropertyChangeEvent&lt;/i> contains the reference to the object that fired the event, the name of the property as&#xD;
    String, and two objects representing the old and the new value of the property. Class &lt;i>PropertyChangeSupport&lt;/i>&#xD;
    maintains a collection of &lt;i>PropertyChangeListeners&lt;/i> and contains the code for the notification in the method&#xD;
    &lt;i>firePropertyChange&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/property_change_support.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    &lt;i>PropertyChangeSupport&lt;/i> is commonly used for JavaBeans that make up part of the user interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Custom notification may be appropriate where the overhead of the creation of event objects needs to be minimized. The&#xD;
    downside is that the implementer must implement the notification mechanism. The implementer of the custom notification&#xD;
    must keep in mind that a different thread may add or remove listeners during the notification process. In order to&#xD;
    provide for the correct behavior, most solutions create a copy of the collection that holds the listeners; the&#xD;
    notification is then performed using the copy. Most published implementations create such a copy at the beginning of&#xD;
    the notification process, which results in the creation of many clones and degraded performance. However, since&#xD;
    notifications are more common than listener additions or removals, a longer-lived copy can be created in advance during&#xD;
    the addition or removal of the listeners and then reused for notifications, providing for faster execution.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Considering productivity of developers, custom notification should be attempted only when the performance of property&#xD;
    change support from the &lt;i>java.beans&lt;/i> package proves to be the bottleneck.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following examples demonstrate both the use of the property change support from the &lt;i>java.beans&lt;/i> package, as&#xD;
    well as the use of a custom notification mechanism.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Example&lt;/b>: Tank JavaBean using &lt;i>java.beans.PropertyChangeSupport&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Here we have a JavaBean representing a &lt;i>Tank&lt;/i>, which has one bound property: &lt;i>level&lt;/i>. When the level of the&#xD;
    &lt;i>Tank&lt;/i> is changed, the &lt;i>Tank&lt;/i> fires a &lt;i>PropertyChangeEvent&lt;/i> which is handled by the&#xD;
    &lt;i>TankController&lt;/i> object.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/tank_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Example&lt;/b>: Tank Java Bean using Custom Notification&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the following example, the class &lt;i>Tank&lt;/i> is implemented with a custom, more efficient notification mechanism,&#xD;
    which avoids creation of objects during the notification.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &lt;img alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/tank_custom_example.gif&quot; />&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
