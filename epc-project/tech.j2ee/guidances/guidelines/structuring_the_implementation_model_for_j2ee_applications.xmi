<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_DAj0I9wuEdmRU7lXzo6lKQ" name="structuring_the_implementation_model_for_j2ee_applications,8.351669390824964E-306" guid="_DAj0I9wuEdmRU7lXzo6lKQ" changeDate="2005-10-25T14:50:23.479-0700" version="7.1.0">
  <mainDescription>&lt;h2>&#xD;
    Introduction&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    It is assumed you are familiar with general information on J2EE as a technology platform, covered in &lt;a&#xD;
    href=&quot;./../../../tech.j2ee/guidances/concepts/java_2_platform_enterprise_edition_j2ee_overview_9A95BA45.html&quot;&#xD;
    guid=&quot;1.527482214591853E-307&quot; class=&quot;elementlinkwithtype&quot;>Concept: Java 2 Platform Enterprise Edition (J2EE)&#xD;
    Overview&lt;/a> and &lt;a href=&quot;./../../../core.base_rup/guidances/concepts/mapping_from_design_to_code_D1454680.html&quot;&#xD;
    guid=&quot;1.424219730601675E-305&quot; class=&quot;elementlinkwithtype&quot;>Concept: Mapping from Design to Code&lt;/a>. Some of the&#xD;
    concepts in this guideline belong to UML 1.4, whereas you may be using it in the context of a UML 1.3-based plug-in. If&#xD;
    you have a hard time making sense of something, check what the two UML specifications have to say on the matter.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Structuring the Implementation Model&quot; id=&quot;Structuring the Implementation Model&quot;>&lt;/a>Structuring the&#xD;
    Implementation Model&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;./../../../core.base_rup/tasks/structure_implementation_model_E0E0DEF9.html&quot;&#xD;
    guid=&quot;{35272424-8A0A-4DDD-BA74-C91B80A8D046}&quot; class=&quot;elementlinkwithtype&quot;>Task: Structure the Implementation&#xD;
    Model&lt;/a>&amp;nbsp;describes how to produce an Implementation Model structure that is strongly aligned with the structure&#xD;
    of the Design Model, but, at the same time, reflects any development environment constraints, and supports parallel&#xD;
    development and incremental integration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Implementation Model structure for a J2EE application is dependent on the development and implementation&#xD;
    environment, however, in general, there are four potential structures within a J2EE Implementation Model:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Deployment support (J2EE modules and deployment descriptors)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Virtual directory structure (JSPs, HTML pages)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java directory for elements deployed on a Web server (servlets, JavaBeans)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java directory for elements deployed on an EJB application server (EJBs)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Modeling Implementation Subsystems&quot; id=&quot;Modeling Implementation Subsystems&quot;>&lt;/a>Modeling Implementation&#xD;
    Subsystems&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    The Implementation View in the &lt;a href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot; class=&quot;elementlinkwithtype&quot;>Artifact: Software Architecture Document&lt;/a>&#xD;
    provides a high level overview of the implementation model. This includes identifying the Implementation Subsystems. In&#xD;
    a J2EE application, the Implementation Subsystems might not map to a single directory in the file system or a single&#xD;
    package in a model, because the Implementation Subsystem might include non-Java elements from one model (such as JSPs&#xD;
    and HTML pages) and Java elements from another. One strategy for handling this is to have a parallel packaging&#xD;
    structure in each model. Packages with the same name in each model are implicitly associated.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is common for an Implementation Subsystem to provide the implementation for a single deployable Implementation File&#xD;
    (a JAR, WAR, or EAR file). In this case, identifying the deployable files might serve to identify the Implementation&#xD;
    Subsystems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A representation of physical elements, consisting of Implementation Directories and Implementation Files, might be&#xD;
    within each &lt;a class=&quot;elementlink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_implementation_subsystem_118747E9.html&quot;&#xD;
    guid=&quot;{0F629848-C19E-49AB-A6C1-C8D6A094898A}&quot;>Implementation Subsystem&lt;/a>. There could also be logical elements,&#xD;
    consisting of &lt;a href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
    guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot; class=&quot;elementlinkwithusertext&quot;>classes&lt;/a>, components, &lt;a&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_package_8376BC8E.html&quot; guid=&quot;{80CC5437-F481-487B-A69B-957D9D236D8D}&quot;&#xD;
    class=&quot;elementlinkwithusertext&quot;>packages&lt;/a>, and so on, that correspond to the &lt;a&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot; guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;&#xD;
    class=&quot;elementlinkwithtype&quot;>Artifact: Design Model&lt;/a> elements, but are a precise model of the source code (a&#xD;
    round-trip engineering model). See &lt;a&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/mapping_from_design_to_code_D1454680.html&quot; guid=&quot;1.424219730601675E-305&quot;&#xD;
    class=&quot;elementlinkwithtype&quot;>Concept: Mapping from Design to Code&lt;/a> for more information on the relationship between&#xD;
    the &lt;a class=&quot;elementlink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a> and the &lt;a class=&quot;elementlink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
    guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Implementation Model&lt;/a>.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Round-trip engineering models provide a precise representation of source code. In J2EE, each package in a Java model&#xD;
    represents a Java package, each class represents a Java class, and so on. However, there is often a need to supplement&#xD;
    round-trip engineering models with additional information, including:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        diagrams that show information not automatically produced as part of round-trip engineering&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        higher level abstractions of the model&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Design Model abstracts classes, components, packages, and so forth. However, there might also be a need for higher&#xD;
    level abstractions or additional diagramming for the physical elements (files and directories). These are described in&#xD;
    the subsequent sections.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Modeling Implementation Directories&quot; id=&quot;Modeling Implementation Directories&quot;>&lt;/a>Modeling Implementation&#xD;
    Directories&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Round-trip engineering generally handles only a subset of the directories required in the development environment.&#xD;
    Additional directories are often needed to organize test artifacts, deployment units, documentation, and so on.&#xD;
    Generally no modeling is required, as directories can be viewed as part of the file system.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a name=&quot;Modeling Implementation Files&quot; id=&quot;Modeling Implementation Files&quot;>&lt;/a>Modeling Implementation Files&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Implementation files are generally not modeled unless some support is provided by a round-trip engineering tool or some&#xD;
    not-so-obvious relationships need to be shown.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is generally one .java file for each Java interface or class, and one compiled .class file for each .java file.&#xD;
    So, modeling these files is not of much interest.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In J2EE, a subsystem usually contains one or more archive files (JAR, WAR, or EAR files).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Archive files are most correctly modeled as a composition relationship from the archive file to the files that it&#xD;
    contains. However, when compiled .class files are combined to make up a JAR file it might be more useful to show a&#xD;
    dependency from the JAR file to the classes and interfaces that it ultimately implements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the Implementation Subsystem only produces one JAR file, then perhaps no modeling will be necessary at all;&#xD;
    especially if all deployable files in the Implementation Subsystem can be assumed to be part of the JAR file.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Overlapping Archive Files&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    It is possible, but generally not advisable, to define two archive files that contain some of the same elements. For&#xD;
    example, two EAR files might contain some, but not all, of the same EJB JARs; or two EJB JARs could contain the same&#xD;
    EJBs, but have different deployment descriptors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It's best that archive files do &lt;b>not&lt;/b> overlap to keep a close correspondence between the implementation subsystems&#xD;
    and deployable archive files. However, when overlapping is necessary, it might be helpful to model this along with&#xD;
    rationale for those overlaps.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
