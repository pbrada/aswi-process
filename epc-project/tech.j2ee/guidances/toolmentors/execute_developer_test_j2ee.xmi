<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_EhgCcdwuEdmRU7lXzo6lKQ" name="execute_developer_test_j2ee,{2A51E42A-769C-4E39-98D7-9C5650A9ECFF}" guid="_EhgCcdwuEdmRU7lXzo6lKQ" changeDate="2005-10-25T14:39:57.519-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_XDE_Developer_-_Java_Platform_Edition__Executing_J2EE_Developer_Tests&quot;&#xD;
name=&quot;XE_XDE_Developer_-_Java_Platform_Edition__Executing_J2EE_Developer_Tests&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Purpose&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor describes how to perform developer testing of J2EE applications using Rational XDE.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Overview&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The following steps are performed in this tool mentor:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SetUp_the_Testing_Environment&quot;>Set-Up the Testing Environment&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Execute_Test&quot;>Execute Test&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Links to topics in the Rational XDE&amp;trade; online Help are marked with &lt;img height=&quot;16&quot; alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SetUp_the_Testing_Environment&quot; name=&quot;SetUp_the_Testing_Environment&quot;>Set-Up the Testing Environment&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In a J2EE application, in order to unit test a single component, the component may need to be assembled into a J2EE&#xD;
    Application and actually deployed. Of course, minimal assembly and deployment is performed at this point -- just enough&#xD;
    to get the component up and running in the testing environment. For more information on assembling J2EE applications,&#xD;
    see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/toolmentors/assembling_j2ee_mods_and_apps_729DC5B.html&quot;&#xD;
    guid=&quot;{3B38F989-686C-4AC9-91EE-981F90D75F0D}&quot;>Tool Mentor: Assembling J2EE Modules and Applications Using Rational XDE&#xD;
    Developer - Java Platform Edition&lt;/a>. For more information on deploying J2EE applications, see &lt;a&#xD;
    class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../tech.j2ee/guidances/toolmentors/deploying_j2ee_mods_and_apps_934BB4EE.html&quot;&#xD;
    guid=&quot;{709B15F1-BB9D-4379-920E-5A6E7DB36536}&quot;>Tool Mentor: Deploying J2EE Modules and Applications Using Rational XDE&#xD;
    Developer - Java Platform Edition&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you are using WebSphere Studio Application Developer, you can test your components on the built-in WebSphere Test&#xD;
    Environment (WTE). Just select your components in the J2EE Browser in the J2EE Perspective and invoke the &quot;Run on&#xD;
    Server&quot; context-menu command. For more information, see the WebSphere Studio Application Developer online help.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If you wish to debug your application on a separate application server, you must start the server with debugging&#xD;
    enabled. Consult your server documentation for how to do this. Then, once you deploy your application, you can connect&#xD;
    the Eclipse debugger to the server to debug your application. Note that most application servers do not provide a way&#xD;
    to debug JSP's (which are compiled into Java code). Consult your server documentation.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Execute_Test&quot; name=&quot;Execute_Test&quot;>Execute Test&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Once you have deployed your application, debug your components as you normally would.using the built-in Java debugger&#xD;
    and any other debugging or analysis tools you have available.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that if you are using WebSphere Studio Application Developer and XDE, you can use Rational Purify and XDE's Trace&#xD;
    feature to debug and trace your running J2EE components in the WebSphere Test Environment (WTE) that is part of&#xD;
    Application Developer. Note that XDE Trace does not support components running on remote J2EE application servers. For&#xD;
    more information, see &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; />&lt;i>Analyzing Run-time&#xD;
    Behavior with Rational PurifyPlus&lt;/i> &#xD;
    &lt;!-- Removed Javascript - ReferenceHelpTopic(topicTitle,&quot;tr&quot;,&quot;tr_o_home.htm&quot;);-->Also, it is not currently currently&#xD;
    possible to use Trace or PurifyPlus with JSP pages.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
