<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:RoleDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_swSkgNoTEdmCj7Yn9Ev4rg" name="cots_system_architect,{1D3A4C45-97FC-491F-8580-523E3AC5887E}" guid="_swSkgNoTEdmCj7Yn9Ev4rg" changeDate="2005-11-30T18:14:19.106-0800" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    The System Architect establishes and refines the system's logical and physical structure and is concerned with the&#xD;
    optimization of these structures in terms of major system elements and their interfaces, and making trade-offs in&#xD;
    competing factors and constraints (for example, performance, cost, environmental impact), in evaluating potential&#xD;
    solutions that produce the required behavior. The System Architects' view spans the entire system and all factors,&#xD;
    external and internal, that might affect its development. Given the need to maintain this broad view, the System&#xD;
    Architect rarely engages in depth in the detailed engineering of a system, preferring to leave that to other&#xD;
    practitioners in the various engineering specialties.&#xD;
&lt;/p></mainDescription>
  <keyConsiderations>&lt;b>Relationship of System Architect to Software Architect&lt;/b> &#xD;
&lt;p>&#xD;
    There are many similarities in the roles; indeed for projects that are deemed &quot;systems&quot; developments because of their&#xD;
    size or complexity, but which are, nevertheless largely or completely software, the two roles coalesce. However, in the&#xD;
    general case, the constituency of the System Architect is larger than that of the Software Architect. The System&#xD;
    Architect must contend with physically imposed constraints that do not exist in the much more malleable world of&#xD;
    software. The very flexibility of software though makes possible paths of architectural evolution that previously could&#xD;
    not be contemplated. Therefore, the relationship of Software Architect to System Architect is not a strictly&#xD;
    subordinate one: feedback from software architectural considerations can profoundly affect the system architecture; to&#xD;
    deny this is to run the risk of potentially sub-optimal &lt;i>system&lt;/i> architectures based on the simplistic notion of&#xD;
    software architecture as derivative from the allocation of requirements (by the System Architect) to computing&#xD;
    platforms. It is true to say though that in a team of System Architect and Software Architect(s), the responsibilities&#xD;
    of the System Architect role require that the System Architect be &lt;i>primus inter pares&lt;/i>, because the system is the&#xD;
    end-product.&#xD;
&lt;/p></keyConsiderations>
  <skills>&lt;p>&#xD;
    &quot;The ideal architect should be a person of letters, a mathematician, familiar with historical studies, a diligent&#xD;
    student of philosophy, acquainted with music, not ignorant of medicine, learned in the responses of jurisconsults,&#xD;
    familiar with astronomy and astronomical calculations.&quot;â€”Vitruvius, circa 25 BC&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Performance of the role of System Architect requires individuals who are well-versed in the several disciplines that&#xD;
    contribute to systems engineering and who possess strong skills in analysis as well as solution synthesis. The System&#xD;
    Architect must also be skilled at heuristic and inductive reasoning (on which so much of system architecting depends),&#xD;
    as well as the deductive reasoning of other engineering disciplines. The system architect is concerned not simply with&#xD;
    the technology of the solution but many other issues, such as system operation, performance, economic viability,&#xD;
    manufacturability, and logistical support, and the political, technical, social, financial, and environmental factors&#xD;
    (among others) that bear on these issues.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The System Architect has to possess the experience and maturity that allows for objective analysis and trade studies to&#xD;
    be done to select the best solution from many, with the ability to make good judgments when information is incomplete&#xD;
    or ambiguous, and the ability to recognize that &quot;best&quot; is often dictated by political and economic as well as&#xD;
    engineering considerations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In dealing with systems that are composites of people, hardware and software, the System Architect requires a strong&#xD;
    sense of the physical limitations and constraints placed on any solution, by the human and hardware components. In&#xD;
    addition to experience in systems engineering (and knowledge of allied disciplines such as operations research and&#xD;
    engineering economics), the System Architect should have a strong grounding in software engineering (because of its&#xD;
    ubiquity in modern systems), as well as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Experience&lt;/strong> in the problem domain and a deep understanding of the requirements. This expertise can&#xD;
        be spread through a system architecture team.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Leadership&lt;/strong> qualities, in order to drive the technical effort across the various teams, make&#xD;
        critical decisions under pressure and make those decisions stick. To be effective, the System Architect and the&#xD;
        Project Manager must work closely together, with the System Architect leading the technical issues and the Project&#xD;
        Manager leading the administrative issues. The System Architect must have the authority to make technical&#xD;
        decisions.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Communication&lt;/strong> skills, to earn trust, to persuade, to motivate, and to mentor. The System Architect&#xD;
        does not have authority by virtue of position, rather by demonstrated ability and results. In order to be&#xD;
        effective, the System Architect must command the respect of the project team, the Project Manager, the customer,&#xD;
        and the user community, as well as the management team&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Goal-orientation and proactivity&lt;/strong> with a relentless focus on results. The System Architect is the&#xD;
        technical driving force behind the project, not a consultant or dreamer. The career of a successful System&#xD;
        Architect is a long series of sub-optimal (but not regularly &lt;i>badly&lt;/i> sub-optimal) decisions made in conditions&#xD;
        of uncertainty and under pressure. Only those who can focus on doing what needs to be done are successful in this&#xD;
        environment.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The System Architect role encompasses the skills of the System Designer, albeit with a strategic, not a detailed focus.&#xD;
&lt;/p></skills>
  <assignmentApproaches>&lt;p>&#xD;
    If the project is large enough to warrant a system architecture team, the goal is to have a good mix of talents,&#xD;
    covering a wide spectrum of experience and sharing a common understanding of the systems engineering process. Ideally&#xD;
    in such a team there is an individual, almost certainly the lead, who owns the overall vision for the project.&amp;nbsp;The&#xD;
    system architecture team should not be a committee of representatives from various teams, domains, or contractors.&#xD;
    System architecture is a full-time function, with staff permanently dedicated to it.&#xD;
&lt;/p></assignmentApproaches>
</org.eclipse.epf.uma:RoleDescription>
