<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2IaD4NnmEdmO6L4XMImrsA" name="analyze_test_results,{449954B7-E120-43B5-B9F3-B9673E4EF590}" guid="_2IaD4NnmEdmO6L4XMImrsA" changeDate="2005-10-06T10:31:20.155-0700" changeDescription="  Was attached to Implementation\Developer Test &amp; Debug\Guidance" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor describes how to analyze the results of test execution from Rational Test RealTime. The value of&#xD;
    testing early and often cannot be realized if the results of the testing activity cannot be quickly and easily&#xD;
    interpreted and subsequently acted upon.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Using both a source code insertion technology as well as source code analysis, Rational Test RealTime is able to focus&#xD;
    its component testing and runtime analysis functionality directly at the source code level. A variety of features have&#xD;
    been added to ensure that fault isolation is quick and that it is easy and efficient to work on the associated source&#xD;
    code:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        source code can be opened and modified in the Test RealTime Text Editor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        version control programs (e.g. Rational ClearCase) can be manipulated to check-in/check-out versioned code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        change management programs (e.g. ClearQuest) can be directly accessed for defect submissions and enhancement&#xD;
        requests&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These features are used in conjunction with the analysis reports produced by the test tools. Each key function of Test&#xD;
    RealTime-component testing, system testing, memory profiling, performance profiling, code coverage analysis, runtime&#xD;
    tracing, static metric generation-has a dedicated report. These reports contain information extracted from a number of&#xD;
    log files generated by source code parsers, source code instrumentors, test script generators, test script compilers,&#xD;
    target deployment ports and report generators. These files can be opened automatically by Test RealTime at the&#xD;
    conclusion of a run, or can be opened manually.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each report is designed to be immediately interpretable to ensure problem diagnosis and resolution is quick and&#xD;
    efficient.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Types of Reports&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Report analysis for each Test RealTime feature will be discussed. Where relevant, report differences due to programming&#xD;
    language used will be discussed:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ComponentAndSystemTesting&quot;>Component Testing and System Testing&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#MemoryProfiling&quot;>Memory Profiling&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#PerformanceProfiling&quot;>Application Performance Profiling&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#CodeCoverageAnalysis&quot;>Code Coverage Analysis&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#RuntimeTracing&quot;>Runtime Tracing&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#StaticMetrics&quot;>Static Metrics&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;ComponentAndSystemTesting&quot; name=&quot;ComponentAndSystemTesting&quot;>Component Testing and System Testing&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Test. To open these reports using the Test RealTime&#xD;
    menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Report&lt;/b> from the Files of Type dropdown list&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the .xrd files corresponding to the reports you would like to view&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat each .xrd file as a parameter to the command line&#xD;
    &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The report is organized into two main sections, a summary section followed by a details section.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Summary -&lt;/i> The summary section contains information such as the report file locations, time of test execution&#xD;
        and a summary count of passed and failed tests.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Component Test Details -&lt;/i> For component tests, this section provides information about the&#xD;
        drivers/services/functions/methods/procedures under test. For each item, the report contains some or all of the&#xD;
        following information, depending on the source language and the options selected: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                a test section which provides an overview and summarizes whether or not the test passed&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                a variable value section, specifying the acquired value for each variable.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                if code coverage analysis was performed, a code coverage section&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                additional information regarding contract (i.e. assertion) validation and verify queries for C++ and Java&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>System Test Details -&lt;/i> For system tests, the following subsections are provided: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                an Initialization section, which details the steps involved in opening a connection to the component under&#xD;
                test.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                one or more Scenario sections, which details the actual tests that were performed. Scenario blocks can be&#xD;
                nested.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                a Termination section, which details the steps involved in terminating connection to the component under&#xD;
                test.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Report Explorer of the Test RealTime user interface can be used to maneuver through the test report (double-click&#xD;
    on any node of interest); the Test Report menu item and the toolbar let you filter the report in order to only view&#xD;
    failures. Multiple sections of the test report are hyperlinked to the test script; simply right-click those sections in&#xD;
    which the mouse icon resembles a hand.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing test reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter Automated&#xD;
    Testing-&amp;gt;Component Testing, in the sections discussing the test report.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;MemoryProfiling&quot; name=&quot;MemoryProfiling&quot;>Memory Profiling&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Memory profiling reports for all supported languages-C, C++ and Java-are stored in XML-based files within the Project&#xD;
    folder or the TDP folder, depending on the language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Memory Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Test RealTime menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Memory Profiling&lt;/b> from the Files of Type dropdown list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the files you are interested in viewing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2-4 as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button in the Report Browser window.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat the one or more files you are interested in viewing as&#xD;
    parameters to the command line &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The report is organized into two main sections, a summary section followed by a details section.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Summary -&lt;/i> A Histogram and textual report section giving the total number of blocks and bytes allocated and&#xD;
        freed, as well as the maximum number of blocks/bytes allocated at any given time.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>C and C++ Details -&lt;/i> Each error and warning is listed, with its associated call stack. The call stack is&#xD;
        listed with the last called function/method mentioned first; all functions/methods in the call stack are&#xD;
        hyperlinked to source code&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Java Details -&lt;/i> A listing is presented of every method that has allocated objects since the last snapshot.&#xD;
        The basic table lists the number of objects and associated bytes allocated since the last snapshot for each method,&#xD;
        as well as the total number of objects and bytes allocated by each method and its descendants (i.e. child methods&#xD;
        of the parent).&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Report Explorer of the Test RealTime user interface can be used to maneuver through the test report (double-click&#xD;
    on any node of interest); the Test Report menu item and the toolbar let you filter the report in order to only view&#xD;
    failures. Multiple sections of the test report are hyperlinked to the test script; simply right-click those sections in&#xD;
    which the mouse icon resembles a hand.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing memory profiling reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter Runtime&#xD;
    Analysis-&amp;gt;Memory Profiling.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;PerformanceProfiling&quot; name=&quot;PerformanceProfiling&quot;>Application Performance Profiling&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Performance profiling reports for all supported languages-C, C++ and Java-are stored in XML-based files within the&#xD;
    Project folder or the TDP folder, depending on the language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Memory Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Test RealTime menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Performance Profiling&lt;/b> from the Files of Type dropdown list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the files you are interested in viewing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2-4 as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button in the Report Browser window.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat the one or more files you are interested in viewing as&#xD;
    parameters to the command line &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The report is organized as follows: at the top of each report is a pie chart detailing each function/method (up to six)&#xD;
    that monopolize 5 or more percent of total execution time. Beneath the pie chart is a sortable table listing each&#xD;
    function/method and various associated statistics. A mouse click on a column header will sort the overall list by the&#xD;
    contents of that column; a mouse click on any function/method named opens the corresponding source code. No value is&#xD;
    necessarily good or bad - large function execution times, or target function + descendant execution times, simply&#xD;
    highlights potentially inefficient algorithms and thus candidates for optimization.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing performance profiling reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter&#xD;
    Runtime Analysis-&amp;gt;Performance Profiling.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;CodeCoverageAnalysis&quot; name=&quot;CodeCoverageAnalysis&quot;>Code Coverage Analysis&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Code coverage analysis reports for all supported languages-C, C++, Ada and Java-are stored in XML-based files within&#xD;
    the Project folder or the TDP folder, depending on the language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Memory Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Test RealTime menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Code Coverage&lt;/b> from the Files of Type dropdown list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the files you are interested in viewing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2-4 as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button in the Report Browser window.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat the one or more files you are interested in viewing as&#xD;
    parameters to the command line &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The report is organized into two main components, a Source component and a Rates component.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>Source -&lt;/i> The Source tab reflects two levels of code coverage information: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                When the Root folder is selected, the Source tab summarizes overall code coverage using a bar chart.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                When any other node in the Report Window is selected, the Source tab uses a color-coded display to reflect&#xD;
                which code has and has not been covered. The Source tab displays information related to whichever node has&#xD;
                been selected.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Rates -&lt;/i> The Rates tab breaks down the level of coverage for each function/method/procedure into&#xD;
        percentages.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing Code Coverage reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter Runtime&#xD;
    Analysis-&amp;gt;Code Coverage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;RuntimeTracing&quot; name=&quot;RuntimeTracing&quot;>Runtime Tracing&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Runtime tracing reports for all supported languages-C, C++ and Java-are stored in XML-based files within the Project&#xD;
    folder or the TDP folder, depending on the language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Memory Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Test RealTime menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Trace Files&lt;/b> from the Files of Type dropdown list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the files you are interested in viewing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2-4 as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button in the Report Browser window.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat the one or more files you are interested in viewing as&#xD;
    parameters to the command line &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The runtime tracing report is a sequence diagram of all events that occurred during the execution of application or&#xD;
    test code. This sequence diagram uses a notation taken from the Unified Modeling Language, thus it can be correctly&#xD;
    referred to as a UML-based sequence diagram. Vertical lines are lifelines; each lifeline represents a Java object&#xD;
    instance. The very first lifeline, represented by a stick figure, is considered the &quot;world&quot; - that is, the operating&#xD;
    system. Horizontal lines connect one lifeline to another. Green lines are constructor calls, black lines are method&#xD;
    calls, red lines are method returns, blue lines are destructor calls, orange lines are exceptions. Hovering the mouse&#xD;
    over any method call to see the full text. Every call and call return is time stamped. Every vertical and horizontal&#xD;
    line is hyperlinked to the monitored source code. The menu item Runtime Trace-&amp;gt;Filters can be used to create filters&#xD;
    that make the runtime tracing report more manageable.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing runtime tracing reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter Runtime&#xD;
    Analysis-&amp;gt;Runtime Tracing .&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;StaticMetrics&quot; name=&quot;StaticMetrics&quot;>Static Metrics&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Memory profiling reports for all supported languages-C, C++ and Java-are stored in XML-based files within the Project&#xD;
    folder or the TDP folder, depending on the language.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime&#xD;
    user interface, right-click a test node and select View Report-&amp;gt;Memory Profile.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To open these reports using the Test RealTime menu:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item File-&amp;gt;Browse Reports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select the Add toolbar button.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Select &lt;b>Metric&lt;/b> from the Files of Type dropdown list.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Browse to and then select the files you are interested in viewing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2-4 as needed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Click the Open button in the Report Browser window.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    To open these reports from the command line, simply treat the one or more files you are interested in viewing as&#xD;
    parameters to the command line &lt;code>&lt;b>studio&lt;/b>&lt;/code>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The report is organized into two levels, the File view and the Object view:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;i>File view -&lt;/i> When the Root folder is selected, a bar graph of one of seven Halstead metrics is presented for&#xD;
        every file that was selected. The particular metric that is displayed can be changed using the menu. When any other&#xD;
        node is selected, static metrics specific to that node are presented.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;i>Object View -&lt;/i> When the Root folder is selected, a graph is presented. This graph compares certain static&#xD;
        metrics for each function/method - this can be changed using the menu. When any other node is selected, static&#xD;
        metrics specific to that node are presented.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information about&#xD;
    viewing static metrics reports see the &lt;i>Rational Test RealTime User Guide&lt;/i>, and refer to the chapter Runtime&#xD;
    Analysis-&amp;gt;Static Metrics.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; />&lt;/b> For detailed technical&#xD;
    information on working with report files, refer to the &lt;i>Rational Test RealTime Reference Guide&lt;/i>, focusing on the&#xD;
    sections discussing the various test report generators. In particular, see the page Appendices-&amp;gt;File Types.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
