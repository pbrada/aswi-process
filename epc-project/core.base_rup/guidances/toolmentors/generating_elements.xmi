<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2avKAtnmEdmO6L4XMImrsA" name="generating_elements,{EE8B53A9-8501-459E-90CC-990B25068DFA}" guid="_2avKAtnmEdmO6L4XMImrsA" changeDate="2005-10-06T10:16:51.886-0700" changeDescription="  Was attached to Implementation\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Through its language add-ins, Rational Rose enables developers to generate code directly from a design model. As design&#xD;
    evolves, implementers can round-trip code in an iterative process of generating code from a model, updating the source,&#xD;
    and reverse engineering the changes back to the design model. &amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following Rational Rose add-ins provide code generation features:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Visual%20C&quot;>Visual C++&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Visual%20Basic&quot;>Visual Basic&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ANSI%20C&quot;>ANSI C++&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Rose%20J%20(Java)&quot;>Rose J (Java)&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#CORBA&quot;>CORBA&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#XML%20DTD&quot;>XML DTD&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Visual C++&quot; name=&quot;Visual C++&quot;>Visual C++&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose Visual C++ enables you to generate Visual C++ source code from classes and components in your Rose model.&#xD;
    Its features include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Round-trip engineering Visual C++ models and code&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Full generation of common Visual C++ language constructs, such as relationships, typedefs, enums,&#xD;
        message/object/COM maps, constructors and destructors&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dialog-based support for modeling and generating code for Visual C++ elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Syntax checking&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Autosynchronization mode for automatically updating code or model when either is changed&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to extend and customize code generation through the COM, ATL and MFC interface libraries&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with Microsoft's Visual Studio, including IDL files&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for Visual C++ template classes and user-specified code patterns&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &amp;nbsp;&lt;a id=&quot;Visual Basic&quot; name=&quot;Visual Basic&quot;>Visual Basic&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Being tightly integrated with the Microsoft Visual Basic 6.0 environment, the Rational Rose Visual Basic Language&#xD;
    Support Add-in enables you to generate Visual Basic source code from components and classes and to visualize existing&#xD;
    code in UML in your Rose model. The extensible and customizable dialog-based tools guide you smoothly through the&#xD;
    process of generating code from a Rose model and updating the source code when the model is changed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Features include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Creation and specification of new Visual Basic classes in the Rose model with help of the Class Wizard&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Creation of members in the class and specification of implementation details about the class and its members in the&#xD;
        Model Assistant tool&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Preview of code to be generated for each members of each class&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Deployment of classes to components with the help of the Component Assignment tool&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Full generation of common Visual Basic language constructs, such as constants, Declare and Event statements, Enum&#xD;
        and Type declarations, Get, Let, and Set procedures, and user-defined collection classes from the components in&#xD;
        your model into corresponding source projects with help of the Code Update tool&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Synchronization mode for updating source code project items when model elements are deleted&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to customize and extend code generation by using Visual Studio code templates and VBScript&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to automate and extend round-trip engineering and templates by using the VSRTE SDK&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;ANSI C++&quot; name=&quot;ANSI C++&quot;>ANSI C++&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rose ANSI C+ is the C++ add-in for Rational Rose. It provides:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Support for Model evolution from analysis to design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for C++ language without being restricted to a single vendor's C++ compiler&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Generation of C++ source code from a model&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Round trip engineering that synchronizes models and generated C++ code across multiple iterations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Changes made to the code are carried back to the model during reverse engineering&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Design, modeling and visualization of all C++ constructs including classes, templates, namespaces, inheritance and&#xD;
        class members functions&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Support for large frameworks&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User controlled code generation via patterns of default constructors, destructors and class members&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Style sheet mechanism to allow for custom formatting of generated code&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Rose J (Java)&quot; name=&quot;Rose J (Java)&quot;>Rose J (Java)&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose J enables you to generate Java source code from classes and components in your Rose model. Its features&#xD;
    include:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Full generation of common Java language constructs, such as imports, extends, implements and throws relationships,&#xD;
        constructors and initializers&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Syntax checking&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Javadoc tag generation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Dialog-based support for modeling and generating code for Enterprise JavaBeans and Servlets, including the JAR and&#xD;
        WAR archive files for deploying Java 2 Enterprise Edition (J2EE) elements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Autosynchronization mode for automatically updating code when a model is changed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ability to extend and customize code generation through the Java XFE interface&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Integration with IBM's VisualAge for Java&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Built-in editor support for browsing and editing Java source code&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Java Frameworks for adding Java API classes to a model&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;CORBA&quot; name=&quot;CORBA&quot;>CORBA&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational Rose CORBA allows you to generate CORBA-compliant IDL code from classes and components in your Rose model. Its&#xD;
    features include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Full generation of common CORBA IDL constructs, such as const, enum, struct, union, typedef, exception, value,&#xD;
        fixed, and interface, as defined in the CORBA 2.3 specification&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Generation of native types, similar to CORBA fundamental types, to allow users to specify programming&#xD;
        language-dependent types for use by object adapters&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Syntax checking&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Built-in editor support for browsing and editing IDL source code&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Round-trip engineering capability that synchronizes models and generated IDL source across multiple iterations&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XML DTD&quot; name=&quot;XML DTD&quot;>XML DTD&lt;/a>&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Rational Rose XML DTD add-in provides visualization, modeling, and tools for XML documents that use document type&#xD;
    definitions (DTD).&amp;nbsp; From the valid XML DTD model, you can use the forward engineering feature to create new XML&#xD;
    DTDs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By modeling your XML DTD, you can visualize the structure of the document to see which element definitions to change or&#xD;
    remove. Since you probably don't work in isolation, you can share your XML DTD model with members of your development&#xD;
    team to verify that you have captured the XML document requirements.&amp;nbsp;&lt;br />&#xD;
    &lt;br />&#xD;
     The Rational Rose XML DTD syntax checker finds errors in the XML DTD model allowing you to make corrections before the&#xD;
    DTD before is implemented.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To support mapping XML to UML, Rational Rose extends UML with stereotypes for XML elements, element attribute lists,&#xD;
    entities, and notations. Stereotypes or tagged values represent XML operator symbols, sequence lists, choice lists, and&#xD;
    element and element attribute multiplicity.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
