<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2IQ58tnmEdmO6L4XMImrsA" name="implement_developer_tests,{FD49B4B3-FA09-4475-A99A-DA8EBBEA220E}" guid="_2IQ58tnmEdmO6L4XMImrsA" changeDate="2005-10-06T10:32:59.598-0700" changeDescription="  Was attached to Implementation\Developer Test &amp; Debug\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Test RealTime integrates three testing tools:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Unit Testing automates C and Ada software component testing.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Object Testing is an object-oriented approach to behavior testing of C++ code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        System Testing is a powerful environment for testing message-based applications.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The choice of which testing tool you should use with your application depends on the development environment and the&#xD;
    nature of the application. For each testing tool, you need to develop a dedicated test script.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Before writing the actual tests for your application, Test RealTime requires that you create the test project and link&#xD;
    the project to the application under test.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Tool Steps&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To create a test script in Test RealTime, perform the following actions:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ComponentTestingWizard&quot;>Run the Component Testing Wizard&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#SetupTestData&quot;>Enter test data and expected results&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ModifyStubBehavior&quot;>Modify stub behavior&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;ComponentTestingWizard&quot; name=&quot;ComponentTestingWizard&quot;>Run the Component Testing Wizard&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Test RealTime provides a component testing wizard which, when executed, analyzes specified source code and generates a&#xD;
    fully executable test harness. All that remains for the developer to ensure the target code is tested as intended is to&#xD;
    define stub behavior (see second Tool Step) and enter test data and expected results (see third Tool Step).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    NOTE: It is not required that the component testing wizard be used - all files and code necessary to support a test can&#xD;
    be generated by hand. The wizard, however, can save a significant amount of effort. Either way, test execution and test&#xD;
    reporting are automated.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The component testing wizard can be accessed in one of two ways. Either method assumes that a Test RealTime project has&#xD;
    already been opened&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Select the Activities link located on the left-hand side of the Test RealTime Start Page. Selection of this link&#xD;
        brings up a list of the three primary activities that can be chosen by the developer. To perform component testing,&#xD;
        the developer should now select the Component Testing link.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Right-click any source file/class/method/function/procedure in the Asset Browser of the Project Window located on&#xD;
        the right-hand side of Test RealTime. Selection of the Test... option in the popup menu opens the component testing&#xD;
        wizard.&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The primary difference between these two methods of initiating the component testing wizard is that the first option&#xD;
    requires the user to select the source file(s) containing the functions/methods/procedures to be tested - the second&#xD;
    option already knows what source file will be used and thus skips the initial steps of the component testing wizard.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In either case, the developer will be asked to select a Test Mode - either Typical or Expert. The difference is related&#xD;
    to desired stubbing behavior. As a reminder, a stub is &quot;a component containing functionality for testing purposes&quot; -&#xD;
    that is, a component designed to act in a predefined way to facilitate the testing of some other system component. In&#xD;
    Typical Mode, Test RealTime will automatically generate a stub template for any function/method/procedure explicitly&#xD;
    referenced in the selected source file(s). Expert Mode allows you to additionally select components not explicitly&#xD;
    referenced in the chosen source file(s). Either way, the actual functionality of these stubs are defined later - see&#xD;
    the second Tool Step below.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once the wizard has been executed to its conclusion, Test RealTime creates a node within the active project. This node&#xD;
    contains a reference to the selected source file(s) as well as to the files required for test harness creation. These&#xD;
    additional files need to be modified in order to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        define stub behavior&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        specify date used to drive the functions/methods/procedures under test&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        specify expected results for each input data set&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For C, C++ and Ada, the test harness, test stubs and test script languages were built by Rational Software to&#xD;
    accommodate the specific intricacies of those languages. For Java, Test RealTime uses Java as the test script language&#xD;
    and bases its test harness and test stub frameworks on the JUnit framework (http://www.junit.org).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information refer&#xD;
    to the &lt;i>Rational Test RealTime User Guide&lt;/i>, the chapter Graphical User Interface-&amp;gt;Activity&#xD;
    Wizards-&amp;gt;Component Testing Wizard.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;SetupTestData&quot; name=&quot;SetupTestData&quot;>Enter test data and expected results&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The test scripts generated by the component testing wizard can execute immediately. However, until the developer&#xD;
    specifies the actual data with which to drive the component under test - as well as the expected output values -the&#xD;
    test will not be very useful nor informative.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each language supported by Test RealTime facilitates test creation in a different manner; each approach has been&#xD;
    optimized for the unique characteristics of each language. C++ is further unique in that not only can standard tests be&#xD;
    generated and executed, but optional contract checks can be made as well. Contract checks act like assertions - they&#xD;
    are used to verify items such as pre/post-conditions and invariants.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to C and Ada, refer to the following chapter in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for C and Ada-&amp;gt;C and Ada Test Script-&amp;gt;Overview-&amp;gt;Test Script&#xD;
        Structure&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for C and Ada-&amp;gt;C and Ada Test Script-&amp;gt;Ada&lt;br />&#xD;
         &#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> and refer to the&#xD;
            following chapters in the &lt;i>Rational Test RealTime Reference Guide&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;C Test Script Language-&amp;gt;C Test Script Language&#xD;
        Keywords-&amp;gt;ELEMENT...END ELEMENT&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;C Test Script Language-&amp;gt;C Test Script Language&#xD;
        Keywords-&amp;gt;ENVIRONMENT...END ENVIRONMENT&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;Ada Test Script Language-&amp;gt;Ada Test Script Language&#xD;
        Keywords-&amp;gt;ELEMENT...END ELEMENT&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;Ada Test Script Language-&amp;gt;Ada Test Script Language&#xD;
        Keywords-&amp;gt;ENVIRONMENT...END ENVIRONMENT&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to C++, refer to following chapters in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for C++-&amp;gt;C++ Testing Overview&lt;br />&#xD;
         &#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> and refer to the&#xD;
            following chapters in the &lt;i>Rational Test RealTime Reference Guide&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;C++ Test Script Language-&amp;gt;C++ Test Driver Scripts&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to Java, refer to following chapters in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for Java-&amp;gt;Java Testing Overview-&amp;gt;About JUnit&lt;br />&#xD;
         &#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> and refer to the&#xD;
            following chapters in the &lt;i>Rational Test RealTime Reference Guide&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;Java Test Primitives&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    3. &lt;a id=&quot;ModifyStubBehavior&quot; name=&quot;ModifyStubBehavior&quot;>Modify stub behavior&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Components are designed to act in a particular manner. These components, regardless of their level of granularity,&#xD;
    should respond to a given set of inputs with a particular, predefinable set of outputs. &quot;Predefinable&quot; means the&#xD;
    results can be specified, either explicitly or algorithmically, prior to test execution.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Very often, components require the assistance of other components within the system in order to perform their&#xD;
    functionality. These other components can be as simple as an additional function or as grandiose as an entire subsystem&#xD;
    located somewhere else in the system. Either way, it is not uncommon for a developer to discover that their efforts at&#xD;
    component testing are hampered by the fact that the components upon which their code relies do not yet exist, or at&#xD;
    least are not yet reliably functioning. The act of stubbing compensates for this difficulty. (In fact, stubbing can be&#xD;
    used to guarantee proper functioning by eliminating all reliance on third-party code.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is the responsibility of the developer to properly simulate components upon which the component under test relies.&#xD;
    Proper simulation means that the stubbed functionality must be sufficiently accurate to ensure that the success or&#xD;
    failure of the component under test can always be traced to the component itself, rather than to incorrect information&#xD;
    produced by the stubs.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rational Test RealTime facilitates the creation of stubs via the supported test scripting languages. In particular, for&#xD;
    information about the creation of test stubs:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to C and Ada, refer to the following chapter in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for C and Ada-&amp;gt;C and Ada Test Script-&amp;gt;Simulations-&amp;gt;Stub Simulation&#xD;
        Overview&lt;br />&#xD;
         &#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> and refer to the&#xD;
            following chapters in the &lt;i>Rational Test RealTime Reference Guide&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;C Test Script Language-&amp;gt;C Test Script Language Keywords-&amp;gt;STUB&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;Ada Test Script Language-&amp;gt;Ada Test Script Language Keywords-&amp;gt;STUB&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to C++, refer to following chapters in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for C++-&amp;gt;C++ Testing Overview-&amp;gt;C++ Test Driver Script&lt;br />&#xD;
         &#xD;
        &lt;p>&#xD;
            &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> and refer to the&#xD;
            following chapters in the &lt;i>Rational Test RealTime Reference Guide&lt;/i>&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Component Testing Scripting Languages-&amp;gt;C++ Test Script Language-&amp;gt;C++ Test Script Keywords-&amp;gt;STUB&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information&#xD;
    related to Java, refer to following chapters in the &lt;i>Rational Test RealTime User Guide&lt;/i>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Automated Testing-&amp;gt;Component Testing for Java-&amp;gt;Java Testing Overview-&amp;gt;Java Stub Harness&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    For More Information&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For detailed information on how to run the test campaign, refer to the Tool Mentor titled &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/execute_developer_tests_A3E7DD57.html&quot;&#xD;
    guid=&quot;{CA0B65DC-D96A-4CCB-A7A5-8FCE9F24B617}&quot;>Executing Tests Using Rational Test RealTime&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
