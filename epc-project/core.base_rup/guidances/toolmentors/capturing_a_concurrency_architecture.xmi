<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1lY2YtnmEdmO6L4XMImrsA" name="capturing_a_concurrency_architecture,{693A3653-B92C-4342-B427-2BEA239BA15F}" guid="_1lY2YtnmEdmO6L4XMImrsA" changeDate="2005-08-29T21:39:58.832-0700" changeDescription="  Was attached to Requirements\Requirements Management\Guidance  Was attached to Architecturet\Guidance" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor is applicable when running Microsoft Windows 98/NT 4.0.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Tool Steps&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To distribute capsules across threads in Rose RealTime:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20processes%20and%20threads&quot;>Identify processes and threads&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Design%20the%20structure&quot;>Design the structure&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;Identify processes and threads&quot; name=&quot;Identify processes and threads&quot;>Identify processes and threads&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rose RealTime uses three mechanisms to deal with concurrency:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Processes, which are heavyweight active objects with a high context switching overhead&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Threads and tasks, which are lightweight context switching mechanisms&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Capsules, which are very lightweight active objects with very low context switching overhead&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    With Rose RealTime, capsules are active objects that can be allocated to operating system threads. These active objects&#xD;
    are scheduled using an active object scheduling mechanism, which minimizes context switching overhead. In some cases,&#xD;
    it may be necessary to distribute capsules across threads and processes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For additional information on how to design with active objects, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/designing_with_active_objects_E041AB4C.html&quot;&#xD;
    guid=&quot;{8A0A5BB3-5CBC-4A38-BFD2-4A21CA5FF833}&quot;>Tool Mentor: Designing with Active Objects in Rational Rose RealTime&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;Design the structure&quot; name=&quot;Design the structure&quot;>Design the structure&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The steps for designing the physical and logical structure vary, depending upon which language you are using (C, C++,&#xD;
    or Java).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Designing the structure using C or C++&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Add the frame service port to the container capsule.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define the sub-capsule.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make the sub-capsule optional.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Determine the logical thread.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define the physical thread.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Map the logical thread to the physical thread.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Incarnate the capsule on a logical thread.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; /> For additional information on designing&#xD;
    the structure with C or C++, refer to the &lt;i>Rational Rose RealTime C Reference or C++ Reference&lt;/i> guide.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Designing the structure using Java&#xD;
&lt;/h4>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Add the frame service port to the container capsule.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make the sub-capsule optional.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Create a new controller and thread.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Incarnate the capsule on a new controller.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; /> For additional information on designing&#xD;
    the structure with Java, refer to &lt;i>Rational Rose RealTime Java Reference&lt;/i> guide.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
