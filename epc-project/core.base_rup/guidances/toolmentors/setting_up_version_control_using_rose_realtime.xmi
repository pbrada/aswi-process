<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_3u781NnmEdmO6L4XMImrsA" name="setting_up_version_control_using_rose_realtime,{67B13F47-BD65-4ABD-9F68-E8953008441E}" guid="_3u781NnmEdmO6L4XMImrsA" changeDate="2005-08-29T21:10:01.648-0700" changeDescription=" Was attached to Config &amp; Change Mgmt\Detailed CCM\Guidance" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Rational ClearCase uses a view model combined with a virtual file system that allows you to specify the lineup of file&#xD;
    versions with which you want to work. Rational Rose RealTime then sees the files in the current view just as if they&#xD;
    were stored on a regular (non-ClearCase) file system. Rose RealTime specifies the set of files that make up the model,&#xD;
    and ClearCase provides the versions of these files determined by the view's configuration specification.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; />&amp;nbsp;For detailed information on using&#xD;
    Rose RealTime with ClearCase, see the document titled &lt;i>Guide to Team Development, Rational Rose RealTime&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Before using ClearCase, you need to set up your workstation and any workstations on which ClearCase will be used.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Prerequisite: Setting up ClearCase&#xD;
&lt;/h4>&#xD;
&lt;h5>&#xD;
    General Recommendations&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    If you are a Microsoft Windows NT user, do not access views through the MVFS mount point or M: drive. Instead, use the&#xD;
    views through explicit drive mountings, such as X:, Y:, or Z:. This improves wink-in and eliminates dependencies on&#xD;
    view names.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    UCM Integration&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The UCM Integration lets you assign activities to revisions from within the tool sets, if you are working in a UCM VOB.&#xD;
    Additionally, you can Rebase, Deliver, and launch the Project Explorer from within Rose RealTime.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Snapshot Views&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    With ClearCase, you can initiate a snapshot view update from within Rose RealTime. The snapshot view contains the&#xD;
    directory tree of source files.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You will want to use snapshot views if any of the following conditions apply:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Your computer does not support dynamic views.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to optimize build performance to achieve native build speeds.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want to work with source files under ClearCase control when you are either disconnected from the network that&#xD;
        hosts the VOBs, or connected to the network intermittently.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You want access to a view from a computer that is not a ClearCase host.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Your project does not use ClearCase build auditing and build avoidance.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Rational ClearCase Workstation Setup&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    All workstations that will be accessing a VOB or view, must be set up to use ClearCase. For Windows NT/2000, this&#xD;
    includes all workstations used for development. For UNIX, this includes all machines that are view servers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additionally, all machines that act as view servers for the ClearCase views used by Rose RealTime, must be set up for&#xD;
    ClearCase. If you use ClearCase MultiSite, you will need to do this at all the sites where the VOBs containing the Rose&#xD;
    elements are replicated. You can determine which machines are view servers by typing the following in a command window:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
&lt;pre>&#xD;
 cleartool lsview&#xD;
&lt;/pre>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The second item on each output line indicates the machine name where the view server is running. For example, if you&#xD;
    see the following line in the output of the lsview command:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
&lt;pre>&#xD;
 myview mymachinevwsmyview.vws&#xD;
&lt;/pre>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    then &quot;mymachine&quot; is the name of the machine where the view server for myview exists.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; />&amp;nbsp;For further details, see your&#xD;
    ClearCase administrator or see the information on source control tools in the &lt;i>Guide to Team Development, Rational&#xD;
    Rose RealTime&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Initial Setup&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The following steps apply if you will be working on a model that is already under source control in a VOB. For&#xD;
    additional information, see the information on source control administration in the &lt;i>Guide to Team Development,&#xD;
    Rational Rose RealTime&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create the integrator view so that the configuration specification appears as follows:&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;blockquote>&#xD;
    &lt;blockquote>&#xD;
&lt;pre>&#xD;
 &lt;b>&#xD;
element * CHECKEDOUT&lt;/b>&lt;br />&#xD;
&#xD;
 &lt;b>&#xD;
element * /main/LATEST&lt;/b>&#xD;
&lt;/pre>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;ol start=&quot;2&quot;>&#xD;
    &lt;li>&#xD;
        Create project labels to define various lineups. Examples of significant labels are:&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            TC_BASELINE_0 - to represent the initial state of the project&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            TC_BUILDFILES - to indicate which element versions should be included in the next automated build&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            TC_LATEST_STABLE - to identify the most recent stable lineup on the integration branch&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;ol start=&quot;3&quot;>&#xD;
    &lt;li>&#xD;
        Create the initial lineup and apply the label to the VOB. An example of an initial lineup is:&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;blockquote>&#xD;
    &lt;blockquote>&#xD;
&lt;pre>&#xD;
 &lt;b>&#xD;
[x:dev]cleartool mklabel -recurse TC_BASELINE_0 dev&lt;/b>&#xD;
&lt;/pre>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;ol start=&quot;4&quot;>&#xD;
    &lt;li>&#xD;
        Create the developer view template to ensure that all config specs are derived from a common base. This provides&#xD;
        consistent and controlled access to the model, and eases the usage of lineups and private branches.&lt;br />&#xD;
        &lt;br />&#xD;
         There are two primary functions that developers will be performing; browsing and development. Each requires a&#xD;
        different config spec.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; />&amp;nbsp;For information on the template&#xD;
    rules, see the initial setup information in the &lt;i>Guide to Team Development, Rational Rose RealTime&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Tool Steps&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To use ClearCase from Rose RealTime, follow these steps:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Control%20appropriate%20model%20elements%20as%20units&quot;>Control appropriate model elements as units&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Create%20a%20local%20work%20area&quot;>Create a local work area&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Save%20a%20model%20to%20the%20work%20area&quot;>Save a model to the work area&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Configure%20the%20workspace%20source%20control%20options&quot;>Configure the workspace source control&#xD;
        options&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Add%20the%20model%20to%20source%20control&quot;>Add the model to source control&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Make%20the%20default%20workspace%20available%20to%20project%20members&quot;>Make the default workspace&#xD;
        available to all project members&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Use%20view%20templates&quot;>Use view templates&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ClearCase%20entities&quot;>ClearCase entities&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Automate%20builds&quot;>Automate builds&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Developer%20process&quot;>Developer process&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Integration%20Process&quot;>Integration process&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;Control appropriate model elements as units&quot; name=&quot;Control appropriate model elements as units&quot;>Control&#xD;
    appropriate model elements as units&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Determine the granularity you require for your project and team environment at the current stage in development. Do&#xD;
    this in collaboration with the architect for the project.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;Create a local work area&quot; name=&quot;Create a local work area&quot;>Create a local work area&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You will want to establish a local work area to save models in ClearCase. Each developer accessing Rose RealTime files&#xD;
    in a VOB should use their own dedicated view.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    3. &lt;a id=&quot;Save a model to the work area&quot; name=&quot;Save a model to the work area&quot;>Save a model to the work area&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Before placing the model under source control, it must be saved to the local work area. Save the model to the directory&#xD;
    you have associated with your source control repository.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    4. &lt;a id=&quot;Configure the workspace source control options&quot;&#xD;
    name=&quot;Configure the workspace source control options&quot;>Configure the workspace source control options&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To enable source control, fill in the appropriate settings described in the source control fundamentals in the &lt;i>Guide&#xD;
    to Team Development, Rational Rose RealTime&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    5. &lt;a id=&quot;Add the model to source control&quot; name=&quot;Add the model to source control&quot;>Add the model to source control&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The simplest way to add all applicable units to source control is to use the &lt;b>Submit All Changes to Source&#xD;
    Control&lt;/b> tool. See the source control administration information in the &lt;i>Guide to Team Development, Rational Rose&#xD;
    RealTime&lt;/i> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    6. &lt;a id=&quot;Make the default workspace available to project members&quot;&#xD;
    name=&quot;Make the default workspace available to project members&quot;>Make the default workspace available to project&#xD;
    members&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The workspace (.rtwks) file contains information that is common to all users working on the project. Settings in the&#xD;
    workspace will rarely, if ever, change after it is initially set up. All developers on a project should use identical&#xD;
    copies of the workspace file. For this reason, you may want to place this file under source control so that a fixed&#xD;
    version is available to all project users. Rational Rose RealTime does not provide explicit support for checking in or&#xD;
    checking out this file.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    After the source control manager adds the model to source control, the workspace should be manually added using your&#xD;
    source control tool. Other users should then retrieve the workspace as part of their initial update of their local work&#xD;
    area. This ensures that all team members use the same source control settings for the project.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    7. &lt;a id=&quot;Use view templates&quot; name=&quot;Use view templates&quot;>Use view templates&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    View templates are used to ensure that developers use a common base for their view's config spec and to make it easier&#xD;
    to work on private branches. A view template specifies the integration branch to work from, lists labeled checkpoints&#xD;
    that can be used to base a private branch on, and includes a config spec template that can be filled in with additional&#xD;
    config spec rules.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; />&amp;nbsp;See the Rational ClearCase parallel&#xD;
    development information in the &lt;i>Guide to Team Development, Rational Rose RealTime&lt;/i> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    8. &lt;a id=&quot;ClearCase entities&quot; name=&quot;ClearCase entities&quot;>ClearCase entities&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Views, view templates, and labels can be created to help facilitate Rational ClearCase features. See the ClearCase&#xD;
    parallel development information in the &lt;i>Guide to Team Development, Rational Rose RealTime&lt;/i> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    9. &lt;a id=&quot;Automate builds&quot; name=&quot;Automate builds&quot;>Automate builds&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To provide the ability to selectively choose the versions of files that go into the build, the builder selects all&#xD;
    versions that are labeled with the build label TC_BUILDFILES. This allows flexibility in changing the exact versions&#xD;
    that go into the build if needed. For example, if the most recent version of a file contains code that does not&#xD;
    compile, then the previous version can be labeled instead.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following steps are involved in the build:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Label the build files.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Perform the build.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When the build completes successfully:&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Create a new lineup label and apply to build file versions.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Apply TC_LATEST_STABLE to build file versions.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Make the new lineup available to developers.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    10. &lt;a id=&quot;Developer process&quot; name=&quot;Developer process&quot;>Developer process&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Each development activity is completed by a single developer and is performed on a private branch specific to that&#xD;
    activity. Again, each developer requires his or her own view. The view is based on a branching point on the integration&#xD;
    branch identified by a build label.&lt;br />&#xD;
    &lt;br />&#xD;
     A unique branch name must be chosen that identifies the work being performed, such as:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
&lt;pre>&#xD;
 paulz_timing&#xD;
&lt;/pre>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    The view's config spec rules are set up to automatically check out and branch files from the branching point to the&#xD;
    private branch. As well, new elements created during the development activity are immediately branched to the private&#xD;
    branch.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Because the branch is hidden from other developers, the user may check in incremental changes to the branch. When the&#xD;
    developer is satisfied that his or her changes are completed and ready to be integrated, the developer informs the&#xD;
    integrator that all changes on the private branch are ready for integration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By basing developer private branches off of labels that correspond to the versions used by automated builds, each&#xD;
    developer will be able to reuse most of the build results in the form of winked-in derived objects. This significantly&#xD;
    reduces the amount of building that is required by each developer when changes are made.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    11. &lt;a id=&quot;Integration Process&quot; name=&quot;Integration Process&quot;>Integration Process&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Each development activity must eventually be merged into the integration branch. ClearCase has several tools available&#xD;
    for performing such a merge. The &lt;b>cleartool findmerge&lt;/b> command can be used to merge all changes from a branch onto&#xD;
    another branch. From the integrator view, the following command syntax can be used:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
&lt;pre>&#xD;
 cleartool findmerge dev -all -fversion .../paulz_timing/LATEST -merge&#xD;
&lt;/pre>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Alternately, Windows NT users can use the ClearCase Merge Manager to perform the same merge.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Both of these methods will merge directory versions and also use Rose RealTime Model Integrator to merge changes in&#xD;
    model files. After performing the merge, the integrator should load the model into Rose RealTime and verify that no&#xD;
    merge errors have occurred. If the model loads correctly, the changes should be checked in using the &lt;b>Tools -&amp;gt;&#xD;
    Source Control -&amp;gt; Submit All Changes to Source Control&lt;/b> menu item.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To integrate a series of development activities:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Load the model from the integrator's view.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Perform the merge as detailed above.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use &lt;b>Tools -&amp;gt; Source Control -&amp;gt; Synchronize Entire Model&lt;/b>. This will reload all files that have changed&#xD;
        in the merge.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Make sure that the merged differences are valid.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Use &lt;b>Tools -&amp;gt; Source Control -&amp;gt; Submit All Changes to Source Control&lt;/b> to accept the changes and check&#xD;
        them into source control.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Repeat steps 2 through 5 for each activity that needs integration.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
