<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2IQ59NnmEdmO6L4XMImrsA" name="execute_developer_tests,{CA0B65DC-D96A-4CCB-A7A5-8FCE9F24B617}" guid="_2IQ59NnmEdmO6L4XMImrsA" changeDate="2005-11-08T13:21:43.649-0800" changeDescription="  Was attached to Implementation\Developer Test &amp; Debug\Guidance" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor describes how to execute a test campaign created with Rational Test RealTime. This task consists in&#xD;
    building and executing the test campaign. Test RealTime automatically compiles and runs the test application from the&#xD;
    implemented test components.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Every organizational entity (referred to as a &quot;node&quot;) supported by Test RealTime can be built and executed as if it&#xD;
    were a single test.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At the highest level, Rational Test RealTime supports the notion of a project. A project is not wedded to any&#xD;
    particular notion - that is, the project can be put to use at the user's discretion. Projects can be linked to other&#xD;
    projects, forming logically nested sub-projects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At the next level of detail is the Group node. This is an optional type of node that can be used to group related child&#xD;
    nodes (discussed in a moment). The Group node, when built and executed, causes each associated child node to be&#xD;
    sequentially built and executed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Within Project or Group nodes, a developer creates Application and Test nodes. These are the nodes that perform the&#xD;
    actual work. An Application node is a node designed simply for the acquisition of runtime analysis information - that&#xD;
    is, no Test RealTime tests are executed as part of an Application node. A Test node can be a component test for C, C++,&#xD;
    Ada or Java or a system test for C.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The code harness - that is, the code required to enable execution of an Application or Test node on the intended&#xD;
    embedded target - is the responsibility of the selected Target Deployment Port (TDP) and is independent of the Test&#xD;
    node. However, the Configuration Settings for an Application or Test node can be used to modify certain settings&#xD;
    pertaining to the TDP. For more information, see the Tool Mentor &quot;Configuring the Test Environment in Rational Test&#xD;
    RealTime&quot;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It should be noted that a third type of node does exist - referred to as an External Command. This node is used to&#xD;
    launch executable programs that might be required for your test or runtime analysis efforts. Uses might include running&#xD;
    external tests or running simulators&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information refer&#xD;
    to the &lt;i>Rational Test RealTime User Guide&lt;/i>, the chapter Graphical User Interface-&amp;gt;Activity&#xD;
    Wizards-&amp;gt;Component Testing Wizard.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    For information on implementing test components, refer to the Tool Mentor titled &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/implement_developer_tests_23B4C147.html&quot;&#xD;
    guid=&quot;{FD49B4B3-FA09-4475-A99A-DA8EBBEA220E}&quot;>Implementing Test Components Using Rational Test RealTime&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Types of Reports&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To execute any node within Rational Test RealTime, the developer can use one of two methods:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ExecutionViaGUI&quot;>Executing a Rational Test RealTime node using the GUI&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#ExecutionViaCMD&quot;>Executing a Rational Test RealTime node using the Command Line&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    1. &lt;a id=&quot;ExecutionViaGUI&quot; name=&quot;ExecutionViaGUI&quot;>Executing a Rational Test RealTime node using the GUI&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    All nodes are located on the Project Browser tab of the Project Window located, by default, on the right-hand side of&#xD;
    the GUI.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The right-click menu of a Project, Group, Application and Test node lets the user Build, Rebuild, Clean and Execute&#xD;
    that node. Each has a default definition:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Build: Recompile only those files who time stamp is later than preexisting object code, link all code, execute the&#xD;
        resulting executable and then generate the applicable runtime analysis/test reports&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Rebuild: Recompile all source files, link all code, execute the resulting executable and then generate the&#xD;
        applicable runtime analysis/test reports&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Clean: Remove all object code and executable programs&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Execute: Run the preexisting executable:&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Various methods exist for altering the default behavior of Build, Rebuild, Clean and Execute.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Select the menu item Build-&amp;gt;Options.&lt;br />&#xD;
         The user can select or deselect those phases of the Build process that should and should not occur. This also&#xD;
        gives the user a quick method for shutting off some or all of the runtime analysis features.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Right-clicking a node and select Properties.&lt;br />&#xD;
         This brings up a window that can be used to exclude that node from the build process. Thus, if one of ten child&#xD;
        Test nodes of a Group node is excluded from the build process, then Building the Group node would result in the&#xD;
        build and execution of nine Test nodes.&lt;br />&#xD;
         This right-click menu also enables the execution of a node in the background. This setting is typically used with&#xD;
        External Commands that may precede other nodes in the build chain. Since the build process also works sequentially,&#xD;
        from the top to the bottom of the Project Browser, running an External Command in the background prevents&#xD;
        subsequent Test, Application and External Command nodes from having to wait for its completion&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Once a node has been built and run, all resulting reports can then be reviewed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For information on implementing test components, refer to the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/analyze_test_results_B5F84209.html&quot;&#xD;
    guid=&quot;{449954B7-E120-43B5-B9F3-B9673E4EF590}&quot;>Tool Mentor: Analyzing Test Results Using Rational Test&#xD;
    RealTime&lt;/a>.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information refer&#xD;
    to the &lt;i>Rational Test RealTime User Guide&lt;/i>, the chapter Graphical User Interface-&amp;gt;Working with Projects.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    2. &lt;a id=&quot;ExecutionViaCMD&quot; name=&quot;ExecutionViaCMD&quot;>Executing a Rational Test RealTime node using the Command Line&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The simplest approach to executing a Rational Test RealTime node from the command line assumes that all configuration&#xD;
    settings are set using the GUI, ensuring that the only phase left to perform is executing the node of interest. Under&#xD;
    these circumstances, the syntax for running a node from the command line is:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;code>studio -r [node.node.node.&amp;lt;....&amp;gt;node] &amp;lt;project file&amp;gt;&lt;/code>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    In this case, each child node of the project, include sub-projects., can be specified using a &quot;dot&quot; notation - that is,&#xD;
    separating the name of each child node from its parent using a period. The project file must always be listed; if&#xD;
    listed by itself, without any child node listed, then the entire project is built.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When not using the &lt;code>&lt;b>studio&lt;/b>&lt;/code> command to execute a node, the user must create source files that can&#xD;
    execute Test RealTime tests or acquire runtime analysis data without conflicting with the user's native compiler and&#xD;
    linker. In both cases - that is, regardless of whether the user is attempting to execute a Test or Application node -&#xD;
    the user's native compiler and linker do the true work. (In fact, all build activities performed by Test RealTime are&#xD;
    simply command line activities triggered from the GUI.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For Test nodes, the following commands convert Test RealTime test scripts into source files supported by the user's&#xD;
    native compiler and linker for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the C language: &lt;code>attolpreproC&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the C++ language: &lt;code>atoprepro&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Ada language: &lt;code>attolpreproADA&lt;/code>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Java does not require a special command because the test scripts are already .java files&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For runtime analysis, the primary choice is whether or not the user wishes to perform source code insertion as an&#xD;
    independent activity or as part of the compilation and linkage process. (Of course, if no runtime analysis is required,&#xD;
    source code insertion is unnecessary and should not be performed.) To simply perform source code insertion, use the&#xD;
    binaries with the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the C language: &lt;code>attolcc1&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the C++ language: &lt;code>attolccp&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Ada language: &lt;code>attolada&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Java language: &lt;code>javi&lt;/code>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    However, if the user would like compilation and linkage to immediately follow source code insertion, use the binaries&#xD;
    for the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the C and C++ languages: &lt;code>attolcc&lt;/code>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the Java language for standard compilation: &lt;code>javi&lt;/code>&lt;br />&#xD;
         inclusion of the javic.jar library, and calls to javic.jar classes, as part of an ant-facilitated build process&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;16&quot; alt=&quot;book icon&quot; src=&quot;../../resources/book.gif&quot; width=&quot;16&quot; border=&quot;0&quot; /> For detailed information refer&#xD;
    to the &lt;i>Rational Test RealTime User Guide&lt;/i>, the chapter Command Line Reference, and in the &lt;i>Rational Test&#xD;
    RealTime Reference Guide&lt;/i>, the chapters Command Line Reference-&amp;gt;Component Testing and Command Line&#xD;
    Reference-&amp;gt;Runtime Analysis.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
