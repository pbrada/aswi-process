<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1yNKY9nmEdmO6L4XMImrsA" name="database_design,{A7B13419-14D8-4C55-B98C-497B2E17CC73}" guid="_1yNKY9nmEdmO6L4XMImrsA" changeDate="2005-10-06T10:53:23.658-0700" changeDescription="  Was attached to Design\Database Design\Guidance" version="7.1.0">
  <copyrightStatement href="uma://{1F4FEA6F-AF12-40BF-94BE-D316CE25314B}#_egIacP1mEdm9-ZPZADkvIg"/>
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This tool mentor describes how to build a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot; guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data&#xD;
    Model&lt;/a> with the Data Modeler.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The steps in this tool mentor match those in the corresponding task.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The following steps are performed in this tool mentor:&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Develop%20Logical%20Data%20Model&quot;>Develop Logical Data Model&lt;/a> &amp;lt;optional&amp;gt;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Develop%20Physical%20Data%20Model&quot;>Develop Physical Data Model&lt;/a> &#xD;
                &lt;ul>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Define%20Domains&quot;>Define Domains&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Transform%20Logical%20Database%20Design%20into%20Physical%20Database%20Design&quot;>Create&#xD;
                        Initial Physical Database Design Elements&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Define%20Reference%20Tables&quot;>Define Reference Tables&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Create%20Primary%20Key%20and%20Unique%20Key%20Constraints&quot;>Create Primary Key and Unique&#xD;
                        Key Constraints&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Define%20Data%20and%20Referential%20Integrity%20Enforecment%20Rules&quot;>Define Data and&#xD;
                        Referential Integrity Enforcement Rules&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#De-Normalize%20the%20Database%20Design%20to%20Optimize%20for%20Performance&quot;>De-Normalize&#xD;
                        Database Design to Optimize for Performance&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Optimize%20Data%20Access&quot;>Optimize Data Access&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Define%20Storage%20Characteristics&quot;>Define Storage Characteristics&lt;/a>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;a href=&quot;#Distribute%20Class%20Behavior%20to%20the%20Database&quot;>Design Stored Procedures to&#xD;
                        Distribute Class Behavior to the Database&lt;/a>&#xD;
                    &lt;/li>&#xD;
                &lt;/ul>&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;a href=&quot;#Review%20the%20Results&quot;>Review the Results&lt;/a>&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The Rational XDE (TM) software tool includes features that allow the application designers and database designers to&#xD;
    develop the application and the database using the same tool. As a &lt;u>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Database&#xD;
    Designer&lt;/a>&lt;/u> or &lt;u>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/roles/rup_designer_BA8DE74E.html&quot;&#xD;
    guid=&quot;{DB21F5EF-810B-4994-B120-79FA8774FA9D}&quot;>Designer&lt;/a>&lt;/u>, you can use XDE to model and design databases, as well&#xD;
    as to integrate your application and database.&amp;nbsp;The XDE Data Modeler uses the Unified Modeling Language (UML)&#xD;
    Profile for Database Modeling as the standard notation for constructing Data Models.&amp;nbsp;The following XDE online Help&#xD;
    topics provide key background information on specific details related to database modeling and development using&#xD;
    Rational XDE:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Databases Supported in Rational XDE&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_r_db_support&quot;); -->: Lists the&#xD;
        databases supported in Rational XDE.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Supported OLE DB Providers and JDBC Drivers&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_r_support_ole_db_jdbc&quot;); -->: Lists&#xD;
        data access providers and drivers supported in Rational XDE.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Setting Options for Data Models&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_data_pref&quot;); -->: Summarizes&#xD;
        setting the default database assignment and database target.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Setting the Default Database Assignment&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_set_default_db_assign&quot;); -->:&#xD;
        Provides guidance for configuring XDE Data Models to point toward a specifically named database.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>UML Data Modeling Profile&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_r_uml_dm_profile&quot;); -->: Summarizes&#xD;
        the Unified Modeling Language (UML) modeling elements used in the Data Model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Data Modeling Visibility Icons&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_r_visible_icon&quot;); -->: Lists&#xD;
        notational elements for defining primary/foreign keys and database triggers specific to a Data Model.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    There are three ways to begin a &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot;&#xD;
    guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data Model&lt;/a> in XDE:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Build the Data Model directly in XDE using the Data Modeler tools.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Transform persistent classes in the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
        guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a> to create tables in the Data Model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reverse engineer an existing database schema or DDL script to create a Data Model.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information about the different methods for creating the Data Model, refer to the following XDE Help topics:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Designing Data Models&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_bld_dm&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Class to Table Transformation&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_clss_tbl_transf&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Building Data Models by Reverse Engineering&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_gen_dm_re&quot;); -->&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The remaining sections of this tool mentor provide instructions on how to build a Data Model by transforming persistent&#xD;
    classes in the Design Model to develop it. The Data Model package structure that is discussed here is described in more&#xD;
    detail in the Data Model section of &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/whitepapers/model_structure_guidelines_for_rational_xde_developer_6D2FD64A.html&quot;&#xD;
    guid=&quot;2.67081400527339E-306&quot;>XDE Model Structure Guidelines&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/toolmentors/reverse_engineering_db_31C775E7.html&quot;&#xD;
    guid=&quot;{8F40AECA-8AAA-4409-81F0-BFB7B6BECDBC}&quot;>Tool Mentor: Reverse Engineering Databases Using Rational XDE&lt;/a>&#xD;
    provides more information on how to create a Data Model by reverse engineering the physical database design.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Develop Logical Data Model&quot; name=&quot;Develop Logical Data Model&quot;>Develop Logical Data Model &amp;lt;optional&amp;gt;&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Some projects might need to create a idealized &quot;logical&quot; model of the database design that captures an&#xD;
    application-independent view of the key logical data entities and their relationships. This Logical Data Model can be&#xD;
    thought of as an &quot;analysis&quot; type of model similar to the optional &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_analysis_model_76C3B70C.html&quot;&#xD;
    guid=&quot;{98EA224C-36F6-46E6-AB36-2999382B58B3}&quot;>Artifact: Analysis Model&lt;/a> that might be used in the development of the&#xD;
    application design.&amp;nbsp;&amp;nbsp;It should be noted that the Logical Data Model is included in the &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot;&#xD;
    guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Artifact: Data Model&lt;/a> and is not considered to be a separate RUP work&#xD;
    product.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Logical Data Model can be created directly using XDE Data Modeler tools.&amp;nbsp;See the &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/whitepapers/model_structure_guidelines_for_rational_xde_developer_6D2FD64A.html&quot;&#xD;
    guid=&quot;2.67081400527339E-306&quot;>XDE Model Structure Guidelines&lt;/a> for information on creating a Logical Data Model within&#xD;
    the overall Data Model work product.&amp;nbsp;Reference: &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Logical Data Models&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_logical_dm&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Develop Physical Data Model&quot; name=&quot;Develop Physical Data Model&quot;>Develop Physical Database Design&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You can refine the Logical Data Model to create a detailed model of the physical database design using Rational&#xD;
    XDE.&lt;br />&#xD;
     (See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Physical Data Models&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_phys_dm&quot;); -->.) This detailed Physical&#xD;
    Data Model might then be forward engineered to create a database. (See &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/toolmentors/forward_engineering_db_14F5AD0B.html&quot;&#xD;
    guid=&quot;{F55D370E-F820-4646-A0B8-C2242A07A83F}&quot;>Tool Mentor: Forward Engineering Databases in Rational XDE&lt;/a>.)&amp;nbsp;&#xD;
    The major steps in developing a Physical Data Model are described below.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Define Domains&quot; name=&quot;Define Domains&quot;>Define Domains&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Create domains to implement user-defined data types that can be used throughout the Data Model to enforce database&#xD;
    design standards. (See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Domains&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_dom&quot;); -->.)&amp;nbsp; Domains can also be&#xD;
    used to embed business rules in columns.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In order to use the data types defined by the domains in the Data Model, you must follow these guidelines:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Domains should be defined in a separate package within the Data Model. For larger teams, a separate XDE model is&#xD;
        often warranted. (See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Domains&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_dom&quot;); -->.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The package containing the domains must be assigned to the database component that realizes the tables in the&#xD;
        database. (See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Assigning Domain Packages to&#xD;
        Databases&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_assign_dom_pkg_db&quot;); -->.)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For information on how to apply a domain to a column in the Data Model, see &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Assigning Domains to Columns&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_assign_dom_col&quot;); -->.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Transform Logical Database Design into Physical Database Design&quot;&#xD;
    name=&quot;Transform Logical Database Design into Physical Database Design&quot;>Create Initial Physical Database Design&#xD;
    Elements&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Transform persistent classes in the Design Model into tables within it. (See &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Class to Table Transformation&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_clss_tbl_transf&quot;); -->.)&amp;nbsp; The&#xD;
    attributes of the classes become columns in the tables.&amp;nbsp;Rational XDE provides the option of defining attributes of&#xD;
    the classes as candidate keys. (See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Assigning&#xD;
    Candidate Keys&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_assign_cand_key&quot;); -->.) Rational XDE&#xD;
    also converts specific associations between the classes to relationships between the tables. The following Rational XDE&#xD;
    online Help topics provide more information on how the classes are transformed into tables:&#xD;
&lt;/p>&#xD;
&lt;ul type=&quot;square&quot;>&#xD;
    &lt;li>&#xD;
        General Mapping Information - &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Class to Table&#xD;
        Transformation Mapping&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_r_clsstbl_transf_map&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        DBMS Specific Mapping Information - &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Class to Table&#xD;
        Transformation Data Type Mapping&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_clss_tbltransf_dtmap&quot;); -->&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Define Reference Tables&quot; name=&quot;Define Reference Tables&quot;>Define Reference Tables&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Create reference tables as needed for managing any static data items in the database.&amp;nbsp;You can create reference&#xD;
    tables directly in the Data Model using the XDE Data Modeler features. Reference: &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling Tables and Columns&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_tables_col&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Create Primary Key and Unique Key Constraints&quot; name=&quot;Create Primary Key and Unique Key Constraints&quot;>Create&#xD;
    Primary Key and Unique Key Constraints&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Define primary key constraints and unique key constraints to identify rows of information in a table. See the online&#xD;
    Help topic &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Primary Key Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_pk_cnstrnt&quot;); -->The online Help&#xD;
    topic&amp;nbsp; &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Primary Key Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_pk_cnstrnt&quot;); -->describes the&#xD;
    steps used to create a primary key constraint on one or more columns of a table.&amp;nbsp; Information on defining unique&#xD;
    key constraints is contained in &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Unique Key&#xD;
    Constraints&lt;/i> &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_uk_cnstrnt&quot;); -->Steps&#xD;
    to create a unique key constraint in the model: &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Unique Key Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_uk_cnstrnt&quot;); -->.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Refer to Rational XDE online Help: &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating&#xD;
    Constraints&lt;/i> &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_create_cnstrnt&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Define Data and Referential Integrity Enforecment Rules&quot;&#xD;
    name=&quot;Define Data and Referential Integrity Enforecment Rules&quot;>Define Data and Referential Integrity Enforcement&#xD;
    Rules&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Check constraints can be used to control updates to data elements in tables.&amp;nbsp;Rational XDE provides the ability to&#xD;
    define check constraints for tables, columns, and domains. See the topic &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Check Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_ck_cnstrnt&quot;); -->The following XDE&#xD;
    online Help topics describe how to create the three types of check constraints in the Data Model:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Column Check Constraints - &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Column Check&#xD;
        Constraints&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_ckcnstrnt_col&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Table Check Constraints - &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Table Check&#xD;
        Constraints&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_ckcnstrnt_tbl&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Domain Check Constraints - &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Domain Check&#xD;
        Constraints&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_ckcnstrnt_dom&quot;); -->&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Another type of constraint used to assure referential integrity is the foreign key constraint. (See &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Foreign Key Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_fk_cnstrnt&quot;); -->.)&amp;nbsp; Foreign key&#xD;
    constraints can be produced only by creating a relationship between tables. (See &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Foreign Key Constraints&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_fk_cnstrnt&quot;); -->.)&amp;nbsp; The&#xD;
    exception to this is the process of reverse engineering a database or DDL script into a Data Model, in which case the&#xD;
    relationships, and therefore the foreign keys, are generated automatically.&amp;nbsp;Key migration depends on the type of&#xD;
    relationship identifying versus non-identifying added between two tables.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reference: &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Key Migration&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_key_mig&quot;); -->Reference: &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Changing the Migrated Key&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_chng_mig_key&quot;); -->.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;De-Normalize the Database Design to Optimize for Performance&quot;&#xD;
    name=&quot;De-Normalize the Database Design to Optimize for Performance&quot;>De-Normalize the Database Design to Optimize for&#xD;
    Performance&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Depending on the specific project situation, you might need to adjust the normalized physical database design to meet&#xD;
    performance requirements.&amp;nbsp;Optimize the Data Model for performance improvement by designing the tables to store&#xD;
    objects that are retrieved together in the same table.&amp;nbsp;This technique is called de-normalization.&amp;nbsp;To&#xD;
    de-normalize, combine the unique columns from the two tables into one, and remove the second table.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Optimize Data Access&quot; name=&quot;Optimize Data Access&quot;>Optimize Data Access&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An additional optimization technique is to use column indexing to access data in tables more efficiently. See &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Indexes&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_index&quot;); -->Description of how to&#xD;
    create indexes in the Data Model: &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Indexes&lt;/i>&#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_index&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another aspect of data access is in the use of database views.&amp;nbsp;Views can be used to control or restrict access to&#xD;
    data in one or more tables.&amp;nbsp;See &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating&#xD;
    Views&lt;/i> &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_view&quot;); -->&amp;nbsp;for a&#xD;
    description of how to create a view in the Data Model. Reference: &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling Views&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_view&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Define Storage Characteristics&quot; name=&quot;Define Storage Characteristics&quot;>Define Storage Characteristics&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Create a model storage design for the database by defining the tablespaces and tablespace containers. (See &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Tablespaces&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_ts_overview&quot;); -->.) Map the physical&#xD;
    database design elements to the storage elements through realization relationships. The XDE online Help topic &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Adding Tablespaces to Databases&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_add_ts_db&quot;); -->describes how to create&#xD;
    tablespaces for a specific database. The XDE online Help topic &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Assigning Tables to Tablespaces&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_assign_tbl_ts&quot;); -->describes how to&#xD;
    assign the tables in the model to the tablespaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Rational XDE currently supports modeling tablespaces for Oracle, DB2, and SQL Server.&amp;nbsp; The following XDE online&#xD;
    Help topics provide guidance on how to model tablespaces for these DBMS products:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling Oracle Tablespaces&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_oracle_ts&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling DB2 Tablespaces&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_db2_ts&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling SQL Server Tablespaces&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_sqlsrv_ts&quot;); -->&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Refer to the following topics in the Rational XDE online Help for more information about tablespace and database model&#xD;
    elements:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling Databases and Tablespaces&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_ts&quot;); -->&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Databases&lt;/i> &#xD;
        &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_db&quot;); -->&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Distribute Class Behavior to the Database&quot; name=&quot;Distribute Class Behavior to the Database&quot;>Design Stored&#xD;
    Procedures to Distribute Class Behavior to the Database&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Define stored procedures as needed to support efficient storage and retrieval of information in the database. Examine&#xD;
    the operations of the design classes that were used to create the tables for candidate stored procedures.&amp;nbsp;Stored&#xD;
    procedures can be implemented as procedures or functions.&amp;nbsp;See &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Stored Procedures&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_sp&quot;); -->Stored procedures must reside&#xD;
    in a Stored Procedure Container, as described in &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Stored Procedure Containers&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_c_sp_cont&quot;); -->. Stored procedures are&#xD;
    created as operations of the Stored Procedure Container class in which they reside. See &lt;img alt=&quot;helpbook icon&quot;&#xD;
    src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Stored Procedures&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_sp&quot;); -->, &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Stored Procedure Containers&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_sp_cont&quot;); -->, &lt;img&#xD;
    alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Creating Stored Procedure Parameters&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_t_create_sp_prmtr&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Refer to Rational XDE online help topic: &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling&#xD;
    Stored Procedures&lt;/i> &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_sp&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Define triggers as needed to further control and manage modifications to the information in the tables. Reference:&#xD;
    topic &lt;img alt=&quot;helpbook icon&quot; src=&quot;../../resources/helpbook.gif&quot; />&lt;i>Modeling Triggers&lt;/i> &#xD;
    &lt;!--  Temporarily removed Javascript - ReferenceHelpTopic(topicTitle,&quot;dm&quot;,&quot;dm_o_mdl_trig&quot;); -->&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Review the Results&quot; name=&quot;Review the Results&quot;>Review the Results&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Review the results of the database design in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot; guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data&#xD;
    Model&lt;/a> for consistency with the application design in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot; guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design&#xD;
    Model&lt;/a> and with the overall application architecture structure. Refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/checklists/data_model_D22985A5.html&quot; guid=&quot;2.800761632096845E-305&quot;>Checklist: Data&#xD;
    Model&lt;/a> for specific items to review.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
