<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_zZ6dVtnmEdmO6L4XMImrsA" name="use_component_architectures,1.2991947604188333E-306" guid="_zZ6dVtnmEdmO6L4XMImrsA" changeDate="2005-11-15T18:56:00.551-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;187&quot; alt=&quot;Component Architectures image&quot; src=&quot;resources/softarch.gif&quot; width=&quot;312&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/component-based_development_cbd_1E319741.html&quot;&#xD;
    guid=&quot;_yCcUGdnmEdmO6L4XMImrsA&quot;>Component-based&lt;/a> &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/architecture_122F321F.html&quot;&#xD;
    guid=&quot;_x7SjMNnmEdmO6L4XMImrsA&quot;>architecture&lt;/a> with &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/layer_F3814B38.html&quot; guid=&quot;_yMbWgNnmEdmO6L4XMImrsA&quot;>layers&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;What are Component Architectures&quot; name=&quot;What are Component Architectures&quot;>What Does Component Architecture&#xD;
    Mean&lt;/a>?&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    A Component Architecture is an architecture based on replaceable components as described in &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/component_A2E2B3B1.html&quot;&#xD;
    guid=&quot;3.524150980437479E-305&quot;>Concept: Component&lt;/a>. Because Component Architectures are based on independent,&#xD;
    replaceable, modular components, they help to manage complexity and encourage re-use.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Architectural Emphasis&quot; name=&quot;Architectural Emphasis&quot;>Architectural Emphasis&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Use cases drive the Rational Unified Process (RUP) end-to-end over the whole lifecycle, but the design activities are&#xD;
    centered around the notion of system &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/architecture_122F321F.html&quot;&#xD;
    guid=&quot;_x7SjMNnmEdmO6L4XMImrsA&quot;>architecture&lt;/a> and, for software-intensive systems, software architecture. The main&#xD;
    focus of the early iterations of the process-mostly in the elaboration phase-is to produce and validate a &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/termdefinitions/software_architecture_2B63D9D.html&quot;&#xD;
    guid=&quot;_yV0jFdnmEdmO6L4XMImrsA&quot;>software architecture&lt;/a>&lt;i>,&lt;/i> which in the initial development cycle takes the form&#xD;
    of an executable architectural prototype that gradually evolves to become the final system in later iterations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By executable architecture, we mean a partial implementation of the system built to demonstrate selected system&#xD;
    functions and properties, in particular those satisfying non-functional requirements. The purpose of executable&#xD;
    architecture is to mitigate risks related to performance, throughput, capacity, reliability, and other &quot;abilities&quot;, so&#xD;
    that the complete functional capability of the system may be added in the &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/construction_2AA70F9.html&quot; guid=&quot;_yEPD3dnmEdmO6L4XMImrsA&quot;>construction&#xD;
    phase&lt;/a> on a solid foundation, without fear of breakage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For an introduction to the notion of architecture-most specifically software architecture-and an explanation of why&#xD;
    this notion is crucial, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/software_architecture_4269A354.html&quot; guid=&quot;3.066252221588648E-305&quot;>Concept:&#xD;
    Software Architecture&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The RUP provides a methodical, systematic way to design, develop, and validate an architecture. We offer templates for&#xD;
    architectural description around the concepts of multiple architectural views, and for the capture of architectural&#xD;
    style, design rules, and constraints. The &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/capabilitypatterns/analysis_design_49725AC4.html&quot;&#xD;
    guid=&quot;{002674F9-6511-4D15-8623-B761D8C48986}&quot;>Analysis and Design&lt;/a> discipline contains specific activities aimed at&#xD;
    identifying architectural constraints and architecturally significant elements, as well as guidelines on how to make&#xD;
    architectural choices. The management process shows how the planning of the early iterations takes into account the&#xD;
    design of an architecture and the resolution of the major technical risks. See the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/capabilitypatterns/project_management_FC6669AF.html&quot;&#xD;
    guid=&quot;{EA0C1D32-E39A-4D96-B956-E178DB776A96}&quot;>Project Management&lt;/a> discipline and all activities associated with the&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/roles/rup_software_architect_DB0BF177.html&quot;&#xD;
    guid=&quot;{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}&quot;>Role: Software Architect&lt;/a> for further information.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Architecture is important for several reasons:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It lets you gain and retain intellectual control over the project, to manage its complexity and to maintain system&#xD;
        integrity.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        A complex system is more than the sum of its parts; more than a succession of small independent tactical decisions.&#xD;
        It must have some unifying, coherent structure to organize those parts systematically and it must provide precise&#xD;
        rules on how to grow the system without having its complexity &quot;explode&quot; beyond human understanding.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        The architecture establishes the means for improved communication and understanding throughout the project by&#xD;
        establishing a common set of references, a common vocabulary with which to discuss design issues.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It is an effective basis for large-scale reuse.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        By clearly articulating the major components and the critical interfaces between them, an architecture lets you&#xD;
        reason about reuse-both internal reuse, which is the identification of common parts, and external reuse, which is&#xD;
        the incorporation of ready-made, off-the-shelf components. However, it also allows reuse on a larger scale: the&#xD;
        reuse of the architecture itself in the context of a line of products that addresses different functionality in a&#xD;
        common domain.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It provides a basis for project management.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        Planning and staffing are organized along the lines of major components. Fundamental structural decisions are taken&#xD;
        by a small, cohesive architecture team; they are not distributed. Development is partitioned across a set of small&#xD;
        teams, each responsible for one or several parts of the system.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Component-Based Development (CBD)&quot; name=&quot;Component-Based Development (CBD)&quot;>Component-Based Development&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Component-based development is a variation on general application development in which:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            The application is &lt;b>built from discrete executable components&lt;/b> which are &lt;b>developed relatively&#xD;
            independently of one another&lt;/b>, potentially by different teams. These are referred to in RUP as &quot;assembly&#xD;
            components&quot;. See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
            href=&quot;./../../../core.base_rup/guidances/concepts/component_A2E2B3B1.html&quot; guid=&quot;3.524150980437479E-305&quot;>Concept:&#xD;
            Component&lt;/a> for a more detailed definition.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            The application may be &lt;b>upgraded in smaller increments&lt;/b> by upgrading only some of the assembly components&#xD;
            that comprise the application.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Assembly components may be shared between applications, creating opportunities for &lt;b>reuse&lt;/b>, but also&#xD;
            creating &lt;b>inter-project dependencies&lt;/b>.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Though not strictly related to being component-based, component-based applications tend to be&#xD;
            &lt;b>distributed&lt;/b>.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Assembly components result from the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        In defining a very modular architecture, you identify, isolate, design, develop, and test well-formed components.&#xD;
        These components can be individually tested and gradually integrated to form the whole system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Furthermore, some of these components can be developed to be reusable, especially the components that provide&#xD;
        common solutions to a wide range of common problems. These reusable components, which may be larger than just&#xD;
        collections of utilities or class libraries, form the basis of reuse within an organization, increasing overall&#xD;
        software productivity and quality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        More recently, the advent of commercially successful, component infrastructures-such as CORBA, the Internet,&#xD;
        ActiveX, JavaBeans, .NET and J2EE - trigger a whole industry of off-the-shelf components for various domains,&#xD;
        allowing you to buy and integrate components rather than developing them all in-house.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The first point in the preceding list exploits the old concepts of modularity and encapsulation, bringing those&#xD;
    concepts underlying object-oriented technology a step further. The last two points in the list shift software&#xD;
    development from programming software one line at a time, to composing software by assembling components.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;XE_component-based_development_(CBD)__as_a_feature_in_the_Unified_Process&quot;&#xD;
    name=&quot;XE_component-based_development_(CBD)__as_a_feature_in_the_Unified_Process&quot;>&lt;/a>The RUP supports component-based&#xD;
    development in these ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The iterative approach allows you to progressively identify components, and decide which ones to develop, which&#xD;
        ones to reuse, and which ones to buy.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The focus on software architecture allows you to articulate the structure-the components and the ways in which they&#xD;
        integrate-which include the fundamental mechanisms and patterns by which they interact. This in turn supports the&#xD;
        planning aspects of project management, in that the component dependencies can help determine which components can&#xD;
        be developed concurrently, and which sequentially.&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Concepts, such as packages, subsystems, and layers, are used during Analysis &amp;amp; Design to organize components&#xD;
        and to specify interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Testing is first organized around components, then gradually around larger sets of integrated components.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more on components, refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/component_A2E2B3B1.html&quot; guid=&quot;3.524150980437479E-305&quot;>Concept: Component&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
