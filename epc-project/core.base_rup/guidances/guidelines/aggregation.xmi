<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_12E9wNnmEdmO6L4XMImrsA" name="aggregation,1.1538495077622037E-304" guid="_12E9wNnmEdmO6L4XMImrsA" changeDate="2005-06-16T20:23:52.946-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;XE_aggregation__guidelines_for&quot; name=&quot;XE_aggregation__guidelines_for&quot;>&lt;/a>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Aggregation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Aggregation is used to model a compositional relationship between model elements. There are many examples of&#xD;
    compositional relationships: a &lt;b>Library&lt;/b> contains &lt;b>Books&lt;/b>, within a company &lt;b>Departments&lt;/b> are made-up of&#xD;
    &lt;b>Employees&lt;/b>, a &lt;b>Computer&lt;/b> is composed of a number of &lt;b>Devices&lt;/b>. To model this, the aggregate&#xD;
    (&lt;b>Department&lt;/b>) has an &lt;b>aggregation&lt;/b> association to the its constituent parts (&lt;b>Employee&lt;/b>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A hollow diamond is attached to the end of an association path on the side of the aggregate (the whole) to indicate&#xD;
    aggregation.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In this example an &lt;b>Customer&lt;/b> has an &lt;b>Address&lt;/b>. We use aggregation because the two classes represent part of&#xD;
    a larger whole. We have also chosen to model &lt;b>Address&lt;/b> as a separate class, since many other kinds of things have&#xD;
    addresses as well.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;115&quot; alt=&quot;example of aggregation&quot; src=&quot;resources/aggr0.gif&quot; width=&quot;395&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    An aggregate object can hold other objects together.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Shared Aggregation&quot; name=&quot;Shared Aggregation&quot;>Shared Aggregation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An aggregation relationship that has a multiplicity greater than one established for the aggregate is called&#xD;
    &lt;b>shared&lt;/b>, and destroying the aggregate does not necessarily destroy the parts. By implication, a shared&#xD;
    aggregation forms a graph, or a tree with many roots. Shared aggregations are used in cases where there is a strong&#xD;
    relationship between two classes, so that the same instance can participate in two different aggregations.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the case where a person has a home-based business. Both the Person and the Business have an address; in fact&#xD;
    it is the &lt;u>same&lt;/u> address. The Address is an integral part of both the Person and the Business. Yet the Business&#xD;
    may cease to exist, leaving the Person hopefully at the same address.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Note also that it is possible in this case to start off with shared aggregation, then convert to non-shared aggregation&#xD;
    at a later date. The home-based business may grow and prosper, eventually moving into separate quarters. At this point,&#xD;
    the Person and the Business no longer share the same address. As a result, the aggregation is no longer shared.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;185&quot; alt=&quot;example of aggregation&quot; src=&quot;resources/aggr5.gif&quot; width=&quot;387&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    An example of shared aggregation.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Composition&quot; name=&quot;Composition&quot;>Composition&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;b>Composition&lt;/b> is a form of aggregation with strong ownership and coincident lifetime of the part with the&#xD;
    aggregate. The multiplicity of the aggregate end (in the example, the &lt;b>Order&lt;/b>) may not exceed one (i.e. it cannot&#xD;
    be shared). The aggregation is also unchangeable, that is once established, its links cannot be changed. By&#xD;
    implication, a composite aggregation forms a &quot;tree&quot; of parts, with the root being the aggregate, and the &quot;branches&quot; the&#xD;
    parts.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A compositional aggregation should be used over &quot;plain&quot; aggregation when there is strong inter-dependency relationship&#xD;
    between the aggregate and the parts; where the definition of the aggregate is incomplete without the parts. In the&#xD;
    example presented below, it does make sense to even have an &lt;b>Order&lt;/b> if there is nothing being ordered (i.e.&#xD;
    &lt;b>Line Items&lt;/b>). In some cases, this inter-dependency can be identified as early as analysis (as in the case with&#xD;
    this example), but more often it is not until design that such decisions can be made confidently.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A solid filled diamond is attached to the end of an association path to indicate composition, as shown below:&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;61&quot; alt=&quot;compositional aggregation&quot; src=&quot;resources/aggr4.gif&quot; width=&quot;304&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    An example of compositional aggregation&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In this example, the &lt;b>Customer Interface&lt;/b> is composed of several other classes. In this example the multiplicities&#xD;
    of the aggregations are not yet specified.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;161&quot; alt=&quot;an example of compositional aggregation&quot; src=&quot;resources/aggr1.gif&quot; width=&quot;377&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A &lt;b>Customer Interface&lt;/b> object knows which &lt;b>Display, Receipt Printer&lt;/b>, &lt;b>KeyPad,&lt;/b> and &lt;b>Speaker&lt;/b>&#xD;
    objects belong to it.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Using Composition to Model Attributes&quot; name=&quot;Using Composition to Model Attributes&quot;>Using Composition to Model&#xD;
    Class Properties&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A property of a class is something that the class knows about. As in the case of the &lt;b>Customer&lt;/b> class shown above,&#xD;
    one could choose to model the &lt;b>Address&lt;/b> of the Customer as either a class, as we have shown it, or as a set of&#xD;
    attributes of the class. The decision whether to use a class and the aggregation relation, or a set of attributes,&#xD;
    depends on the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Do the 'properties' need to have independent identity, such that they can be referenced from a number of objects?&#xD;
        If so, use a class and aggregation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Do a number of classes need to have the same 'properties'? If so, use a class and aggregation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Do the 'properties' have a complex structure and properties of their own? If so, use a class (or classes) and&#xD;
        aggregation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Otherwise, use attributes.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In an &lt;b>Automated Teller Machine&lt;/b>, the system must keep track of the current customer and their PIN, let us assume&#xD;
    that the &lt;b>Customer Interface&lt;/b> is responsible for this. This information may be thought of as &quot;properties&quot; of the&#xD;
    class. This may done using a separate class, shown as follows:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;220&quot; alt=&quot;properties modeled using aggregation&quot; src=&quot;resources/aggr2.gif&quot; width=&quot;173&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    Object properties modeled using Aggregation&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The alternative, having the &lt;b>Customer Interface&lt;/b> keep track of the current Customer and their PIN using&#xD;
    attributes, is modeled as follows:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;87&quot; alt=&quot;properties modeled using attributes&quot; src=&quot;resources/aggr3.gif&quot; width=&quot;186&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Object properties modeled using Attributes&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The decision of whether to use attributes or an aggregation association to a separate class is determined based the&#xD;
    degree of coupling between the concepts being represented: when the concepts being modeled are tightly connected, use&#xD;
    attributes. When the concepts are likely to change independently, use aggregation.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_aggregation__association_vs._aggregation&quot; name=&quot;XE_aggregation__association_vs._aggregation&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_association__aggregation_vs._association&quot; name=&quot;XE_association__aggregation_vs._association&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Aggregation or Association?&quot; name=&quot;Aggregation or Association?&quot;>Aggregation or Association?&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Aggregation should be used only in cases where there is a compositional relationship between classes, where one class&#xD;
    is composed of other classes, where the &quot;parts&quot; are incomplete outside the context of the whole. Consider the case of&#xD;
    an &lt;b>Order&lt;/b>: it makes no sense to have an order which is &quot;empty&quot; and consists of &quot;nothing&quot;. The same is true for&#xD;
    all aggregates: Departments must have Employees, Families must have Family Members, and so on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the classes can have independent identity outside the context provided by other classes, if they are not parts of&#xD;
    some greater whole, then the association relationship should be used. In addition, when in doubt, an association more&#xD;
    appropriate; aggregations are generally obvious, and choosing aggregation is only done to help clarify. It is not&#xD;
    something that is crucial to the success of the modeling effort.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Self-Aggregations&quot; name=&quot;Self-Aggregations&quot;>Self-Aggregations&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Sometimes, a class may be aggregated with itself. This does not mean that an instance of that class is composed of&#xD;
    itself (this would be silly), it means that one instance of the class is an aggregate composed of other instances of&#xD;
    the same class. In the case of self-aggregations, role names are essential to distinguish the purpose for the&#xD;
    association.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the following self-aggregation involving the class &lt;b>Product&lt;/b>:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;119&quot; alt=&quot;example of self-aggregation&quot; src=&quot;resources/assoc3.gif&quot; width=&quot;152&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In this case, a product may be composed of other products; if they are, the aggregated products are called&#xD;
    sub-products. The association is navigable only from the aggregate to the sub-product; i.e. sub-products would not know&#xD;
    what products they are part of (since they may be part of many products).&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
