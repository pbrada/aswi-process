<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1e_TdNnmEdmO6L4XMImrsA" name="layering,4.458864982057142E-306" guid="_1e_TdNnmEdmO6L4XMImrsA" changeDate="2005-08-20T21:42:09.238-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_layering__guidelines&quot; name=&quot;XE_layering__guidelines&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;LayeringGuidelines&quot; name=&quot;LayeringGuidelines&quot;>Layering Guidelines&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Layering provides a logical partitioning of subsystems into a number of sets, with certain rules as to how&#xD;
    relationships can be formed between layers. The layering provides a way to restrict inter-subsystem dependencies, with&#xD;
    the result that the system is more loosely coupled and therefore more easily maintained.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The criteria for grouping subsystems follow a few patterns:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Visibility&lt;/b>. Subsystems may only depend on subsystems in the same layer and the next lower layer.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Volatility&lt;/b>. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;b>In the highest layers&lt;/b>, put elements which vary when user requirements change.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>In the lowest layers&lt;/b>, put elements that vary when the implementation platform (hardware, language,&#xD;
                operating system, database, etc.) changes.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Sandwiched in the middle, put elements which are generally applicable across wide ranges of systems and&#xD;
                implementation environments.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Add layers when additional partitions within these broad categories helps to organize the model.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Generality&lt;/b>. Abstract model elements tend to be placed lower in the model. If not implementation-specific,&#xD;
        they tend to gravitate toward the middle layers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Number of Layers.&lt;/b> For a small system, three layers are sufficient. For a complex system, 5-7 layers are&#xD;
        usually sufficient. For any degree of complexity, more than 10 layers should be viewed with suspicion that&#xD;
        increases with the number of layers. Some rules of thumb are presented below:&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th width=&quot;40%&quot;>&#xD;
                    &lt;p align=&quot;center&quot; scope=&quot;col&quot;>&#xD;
                        &lt;b># Classes&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
                &lt;th width=&quot;60%&quot;>&#xD;
                    &lt;p align=&quot;center&quot; scope=&quot;col&quot;>&#xD;
                        &lt;b># Layers&lt;/b>&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p align=&quot;center&quot;>&#xD;
                        0 - 10&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;60%&quot;>&#xD;
                    No layering needed&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p align=&quot;center&quot;>&#xD;
                        10 - 50&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;60%&quot;>&#xD;
                    2 layers&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p align=&quot;center&quot;>&#xD;
                        25 - 150&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;60%&quot;>&#xD;
                    3 layers&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;40%&quot;>&#xD;
                    &lt;p align=&quot;center&quot;>&#xD;
                        100 - 1000&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;60%&quot;>&#xD;
                    4 layers&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    Subsystems and packages within a particular layer should only depend upon subsystems within the same layer, and at the&#xD;
    next lower layer. Failure to restrict dependencies in this way causes architectural degradation and makes the system&#xD;
    brittle and difficult to maintain.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Exceptions include cases where subsystems need direct access to lower layer services: a conscious decision should be&#xD;
    made on how to handle primitive services needed throughout the system, such as printing, sending messages, etc. There&#xD;
    is little value in restricting messages to lower layers if the solution is to effectively implement call pass-throughs&#xD;
    in the intermediate layers.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;PartitioningPatterns&quot; name=&quot;PartitioningPatterns&quot;>Partitioning Patterns&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Within the top-layers of the system, additional partitioning may help organize the model. The following guidelines for&#xD;
    partitioning present different issues to consider:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>User organization&lt;/b>. Subsystems may be organized along lines that mirror the organization of functionality in&#xD;
        the business organization (e.g. partitioning occurs along departmental lines). This partitioning often occurs early&#xD;
        in the design because an existing enterprise model has a strongly organizationally partitioned structure. This&#xD;
        organization pattern usually affects only the top few layers of application-specific services, and often disappears&#xD;
        as the design evolves. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Partitioning along user organization lines can be a good starting point for the model.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                The structure of the user organization is not stable over a long period of time (due to business&#xD;
                reorganization), and is not a good long-term basis for system partitioning. The internal organization of&#xD;
                the system should enable the system to evolve and be maintained independently of the organization of the&#xD;
                business it supports.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Areas of competence and/or skills&lt;/b>. Subsystems may be organized to partition responsibilities for parts of&#xD;
        the model among different groups within the development organization. Typically, this occurs in the middle and&#xD;
        lower layers of the system, and reflects the need for specialization in skills during the development and support&#xD;
        of complex infrastructural technology. Examples of such technologies include network and distribution management,&#xD;
        database management, communication management, and process control, among others. Partitioning along competence&#xD;
        lines may also occur in upper layers, where special competency in the problem domain is required to understand and&#xD;
        support key business functionality; examples include telecommunication call management, securities trading,&#xD;
        insurance claims processing, and air traffic control, to name a few.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>System distribution&lt;/b>. Within any of the layers of the system, the layers may be further partitioned&#xD;
        &quot;horizontally&quot; to reflect the physical distribution of functionality. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Partitioning to reflect distribution can help to visualize the network communication which will occur as&#xD;
                the system executes.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Partitioning to reflect distribution can, however, make the system more difficult to change if the&#xD;
                Deployment Model changes significantly.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Secrecy areas&lt;/b>. Some applications, especially those requiring special security clearance to develop and/or&#xD;
        support, require additional partitioning along security access privilege lines. Software that control access to&#xD;
        secrecy areas must be developed and maintained by personnel with appropriate clearance. If the number of persons&#xD;
        with this background on the project is limited, the functionality requiring special clearance must be partitioning&#xD;
        into subsystems that will be developed independently of other subsystems, with the interfaces to the secrecy areas&#xD;
        the only visible aspect of these subsystems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Variability areas&lt;/b>. Functionality that is likely to be optional, and thereby delivered only in some variants&#xD;
        of the system, should be organized into independent subsystems which are developed and delivered independently of&#xD;
        the mandatory functionality of the system.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
