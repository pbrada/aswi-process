<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2QUCtNnmEdmO6L4XMImrsA" name="import_dependency_in_implementation,2.390918925290993E-305" guid="_2QUCtNnmEdmO6L4XMImrsA" changeDate="2005-06-21T11:06:46.040-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_layering__guidelines_for_layering_in_implementation&quot;&#xD;
name=&quot;XE_layering__guidelines_for_layering_in_implementation&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_import-dependency_in_implementation__guidelines_for&quot;&#xD;
name=&quot;XE_import-dependency_in_implementation__guidelines_for&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_implementation_subsystem__handling_import_dependencies_between&quot;&#xD;
name=&quot;XE_implementation_subsystem__handling_import_dependencies_between&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>&lt;/a>Explanation&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Handling dependencies between subsystems is an important aspect of structuring the implementation model. A element in a&#xD;
    client subsystem can only compile against elements in a supplier subsystem, if the client subsystem imports the&#xD;
    supplier subsystem. To express such dependencies use the import dependency from one subsystem to another, to point out&#xD;
    the subsystem on which there is a dependence.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The following component diagram illustrates the import dependencies between implementation subsystems.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;203&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_impi2.gif&quot; width=&quot;217&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The subsystem Telephone Banking has an import dependency to the subsystem Trading Services, allowing elements in&#xD;
    Telephone Banking to compile against public (visible) elements in Trading Services.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Use&quot; name=&quot;Use&quot;>&lt;/a>Use&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_architectural_control__guidelines_for_import-dependency_in_implementation&quot;&#xD;
    name=&quot;XE_architectural_control__guidelines_for_import-dependency_in_implementation&quot;>Architectural Control&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An important usage of the import dependency is to control the visibility between subsystems, and to enforce an&#xD;
    architecture on the implementers. When the import dependency is defined by the software architect early in the&#xD;
    development, the implementers are only allowed to let their implementation elements reference (compile against) public&#xD;
    elements in the imported subsystems. Controlling the imports helps maintain the software architecture and avoids&#xD;
    unwanted dependencies.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Subsystems Can Be Organized in Layers&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The implementation model is normally organized in layers. The number of layers is not fixed, but vary from situation to&#xD;
    situation. The following is a typical architecture with four layers:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The top layer, &lt;b>application layer&lt;/b>, contains the application specific services.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The next layer, &lt;b>business-specific layer&lt;/b>, contains business specific components, used in several&#xD;
        applications.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>middleware layer&lt;/b> contains components such as GUI-builders, interfaces to database management systems,&#xD;
        platform-independent operating system services, and OLE-components such as spreadsheets and diagram editors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The bottom layer, &lt;b>system software layer&lt;/b>, contains components such as operating systems, interfaces to&#xD;
        specific hardware, and so on.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;367&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_impi3.gif&quot; width=&quot;454&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    An example of a layered implementation model for a banking system. The arrows shows import dependencies between&#xD;
    subsystems.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
