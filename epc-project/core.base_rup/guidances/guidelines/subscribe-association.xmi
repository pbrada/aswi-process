<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_12E9xNnmEdmO6L4XMImrsA" name="subscribe-association,1.401846671640991E-305" guid="_12E9xNnmEdmO6L4XMImrsA" changeDate="2005-06-16T20:29:03.280-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_subscribe-association__guidelines_for&quot;&#xD;
name=&quot;XE_subscribe-association__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Explanation&quot; name=&quot;Explanation&quot;>Explanation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In some cases, an object is dependent upon a specific event occurring in another object. If the event is taking place&#xD;
    within a boundary or control object, this object simply informs the other object about what has happened. But if the&#xD;
    event is taking place within an entity object, the situation is somewhat different. An entity object may not be able to&#xD;
    inform other objects about anything if it is not specifically asked to do so.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Assume that a system has been modeled with the possibility of withdrawing money from a bank account via transferals. If&#xD;
    an attempted withdrawal causes a negative balance in the account, a notice must immediately be written and sent to the&#xD;
    customer. The account, which is modeled as an entity object, should not be concerned with whether the customer is&#xD;
    notified or not. Instead, a boundary object should notify the customer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the example above, the boundary object would have to pose the question &quot;has the event I am waiting for happened?&quot;&#xD;
    repeatedly to the entity object. To make the situation clearer, and to postpone the implementation details until the&#xD;
    design phase, there is a special association used to express this, namely the subscribe-association.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The subscribe-association, which associates an object of any type with an entity object, expresses that the associating&#xD;
    object will be informed when a particular event takes place in the entity object. We recommend that you use the&#xD;
    association only to associate entity objects, since it is the passive nature of the entity objects that causes the need&#xD;
    for the association. Interface- and control objects, on the other hand, are both allowed to initiate communication.&#xD;
    Therefore, they do not need to be &quot;subscribed to&quot;, but can perform their responsibilities in other ways.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;162&quot; alt=&quot;UML diagram described below.&quot; src=&quot;resources/sbscr001.gif&quot; width=&quot;208&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The subscribe-association associates an object of any type with an entity object. The associating object will be&#xD;
    informed when a particular event takes place in the associated entity object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that the direction of the association shows that only the subscribing object is aware of the relation between the&#xD;
    two objects. The description of the subscription is entirely within the subscribing object. The associated entity&#xD;
    object, in turn, is defined in the usual way without considering that other objects might be interested in its task.&#xD;
    This also implies that a subscribing object can be added to, or removed from, the model without changing the object it&#xD;
    subscribes to.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The subscribe-association is assigned a multiplicity that indicates how many instances of the targeted object the&#xD;
    associating object can associate simultaneously. Then one or more conditions are described on the association, which&#xD;
    indicate what must occur in order for the associating object to be informed. The event might be a change in an&#xD;
    association's or attribute's value, or (some part of) the evaluation of an operation. When the event takes place, the&#xD;
    subscribing object will be informed that something has happened. Note that no information concerning any result of the&#xD;
    event is transmitted, only the fact that the event has happened. If the associating object is interested in the&#xD;
    resulting state of the entity object after the event, it will have to interact with the entity object in the ordinary&#xD;
    way. This means that it will need a link to it as well.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the Depot-Handling System, spot checks must be made on pallets, to gauge their life expectancy. Therefore, upon&#xD;
    every hundredth move of a pallet from one place in the depot to another, the pallet is checked at a special testing&#xD;
    station. This is modeled by a subscribe-association from the control class Pallet Spot Checker to the entity class&#xD;
    Pallet. Each instance of Pallet counts the number of times it is moved, using a counter attribute. When it has been&#xD;
    moved a hundred times the Pallet Spot Checker is informed due to the condition of the subscribe-association. The Pallet&#xD;
    Spot Checker then creates a special Task, which transports the pallet to the testing station. The Pallet Spot Checker&#xD;
    does not need any link to Pallet, but must have one to Task in order to initiate it.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;160&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/sbscr002.gif&quot; width=&quot;279&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    After a pallet has been moved a hundred times, the Pallet Spot Checker creates a new Task.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The conditions of the subscribe-association should be expressed in terms of abstract characteristics, rather than in&#xD;
    terms of its specific attributes or operations. In this way, the associating object is kept independent of the contents&#xD;
    of the associated entity object, which may well change.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The subscribe-association does not always associate two object instances. It is also valid from a class to an instance,&#xD;
    a meta relation. This is described in subsections below. There are also cases where the class of an object is&#xD;
    associated by a subscribe-association, for example if the particular event happens to be the instantiation of the&#xD;
    class.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Usage&quot; name=&quot;Usage&quot;>Usage&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Subscribe-associations from Boundary Classes&quot;&#xD;
    name=&quot;Subscribe-associations from Boundary Classes&quot;>Subscribe-associations from Boundary Classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Sometimes, it is necessary for a boundary object to be informed if an event takes place in an entity object. This calls&#xD;
    for a &lt;b>subscribe-association&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider a withdrawal from a bank account by means of transferals. Here, it is the control object Transferal Handler&#xD;
    that performs operations on the entity object Account. If the balance of Account turns negative, the customer will be&#xD;
    sent a notice prepared by the boundary object Notice Writer. This object has, therefore, a &lt;b>subscribe-association&lt;/b>&#xD;
    to Account. The stated condition is that the balance goes below zero. As soon as that event takes place, Notice Writer&#xD;
    is informed. This particular &lt;b>subscribe-association&lt;/b> is an instance association, inasmuch as an instance of Notice&#xD;
    Writer is constantly on the look-out for overdrafts in instances of Account.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the customer is not to receive any more information than that his balance is low, then this is sufficient. But if he&#xD;
    should also be told &lt;b>how&lt;/b> low, then Notice Writer must perform an operation on Account to learn the exact amount.&#xD;
    To do this, Notice Writer must have a link to Account.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;137&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/sbscr005.gif&quot; width=&quot;367&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The boundary class Notice Writer subscribe to the event of the balance falling below a certain level in the entity&#xD;
    object Account. If Notice Writer also needs to know the exact sum of the deficit, it must have a link to Account.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of a meta-association from a boundary class is when an event in an entity object causes a new window to be&#xD;
    presented to the user. Then an interface-object class subscribes to instances of the entity object.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Subscribe-associations from Entity Classes&quot;&#xD;
    name=&quot;Subscribe-associations from Entity Classes&quot;>Subscribe-associations from Entity Classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In a system handling a network there are stations that function as nodes in the network, and there are lines&#xD;
    interconnecting them. Each station is connected to other stations via a number of lines. The capacity of a station is&#xD;
    determined by how many of its lines are functioning. If over 80% of them are functioning the capacity of the station is&#xD;
    high, if less than 20 % are functioning it is low, and anything in between is medium. In our model of the system, we&#xD;
    have two entity objects, Station and Line, where Station has a &lt;b>subscribe-association&lt;/b> to Line. The condition of&#xD;
    the association is that Station should be informed when the status of Line, which may be enabled or disabled, is&#xD;
    changed.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Furthermore, a control object that subscribes to Station will be informed if the capacity of the station becomes low.&#xD;
    This is described below, where this example is continued.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;56&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/sbscr003.gif&quot; width=&quot;246&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A Station instance is informed as soon as the status of one of its instances of Line is changed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A &lt;b>subscribe-association&lt;/b> between entity classes is almost always an instance association, since what is involved,&#xD;
    usually, is already-existing instances. However, there may be cases where an instance of the subscribing entity object&#xD;
    is created when the specified event takes place in the associated entity object. In such cases, the association goes&#xD;
    from a class to an instance, i.e., it is a meta association. One can also imagine that an instance of a particular&#xD;
    entity object would like to know when a new instance of another entity object is created.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Subscribe-associations from Control Classes&quot;&#xD;
    name=&quot;Subscribe-associations from Control Classes&quot;>Subscribe-associations from Control Classes&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the example above, the entity object Station has a &lt;b>subscribe-association&lt;/b> to the entity object Line. Thus,&#xD;
    Station will be informed each time the status of a Line instance is changed. Such a change of status will change the&#xD;
    capacity of the Station. If the capacity becomes low, i.e., less than 20% of its lines are functioning, the system must&#xD;
    find suitable new ways through the network so that this station is avoided. This, of course, is no task for Station,&#xD;
    but must be performed by the control object Station Supervisor, which has a subscribe-association to each instance of&#xD;
    Station.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;65&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/sbscr004.gif&quot; width=&quot;406&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The control object Station Supervisor subscribes to the entity object Station, which in turn subscribes to the entity&#xD;
    object Line.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Most often, a &lt;b>subscribe-association&lt;/b> from a control object will be from a class to an instance, or vice versa,&#xD;
    i.e., a meta association. Usually, the instance of the control object that will deal with the event in the entity&#xD;
    object is not created until the event actually takes place. But one can also imagine, for example, that an instance of&#xD;
    a control object would like to know when a new instance of a certain entity object is created. Thus, in some few cases&#xD;
    the &lt;b>subscribe-association&lt;/b> may be an instance association.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the example above, the &lt;b>subscribe-association&lt;/b> from Station Supervisor to Station has the characteristics of a&#xD;
    meta association, i.e., it is the class Station Supervisor that is informed when the capacity of the Station has run&#xD;
    low. When Station Supervisor receives this message, it creates an instance which deals with the event.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
