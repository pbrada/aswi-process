<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1cv3wtnmEdmO6L4XMImrsA" name="software_architecture_document,2.9494785550310917E-305" guid="_1cv3wtnmEdmO6L4XMImrsA" changeDate="2005-11-15T20:10:23.929-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_logical_view__guidelines_for&quot; name=&quot;XE_logical_view__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;References&quot; name=&quot;References&quot;>References&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The references section presents external documents which provide background information important to an understanding&#xD;
    of the architecture of the system. If there are a larger number of references, structure the section in subsections:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        external documents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        internal documents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        government documents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        non-government documents&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        etc.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Goals and Constraints&quot; name=&quot;Architectural Goals and Constraints&quot;>Architectural Goals and&#xD;
    Constraints&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The architecture will be formed by considering:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        functional requirements, captured in the Use-Case Model&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        non-functional requirements, captured in the Supplementary Specifications&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    However, these are not the only influences that will shape the architecture: there will be constraints imposed by the&#xD;
    environment in which the software must operate; by the need to reuse existing assets; by the imposition of various&#xD;
    standards; by the need for compatibility with existing systems, and so on.&amp;nbsp; There may also be a preexisting set of&#xD;
    &lt;b>architectural principles and policies&lt;/b> which will guide the development, and which need to be elaborated&#xD;
    and&amp;nbsp;verified for the project.&amp;nbsp; This section of the Software Architecture document is the place to describe&#xD;
    these goals and constraints, and any &lt;b>architectural decisions&lt;/b> flowing from them which do not find a ready home&#xD;
    (as requirements) elsewhere.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When this document is created, an important input is a specification of the implementation environment. Examples of&#xD;
    things that should be specified are target platform (hardware, operating system), window system, development tools&#xD;
    (language, GUI builder), database management system, and component libraries.&amp;nbsp; It is also valuable to specify&#xD;
    which user interface technologies are allowed and which are not.&amp;nbsp; Many systems choose to not use certain&#xD;
    presentation technologies (JavaScript, Applets, Frames, XML, etc.) so that more client systems are capable of using the&#xD;
    application, or to make the application easier to develop.&amp;nbsp;&amp;nbsp;The decisions are captured here in the Software&#xD;
    Architecture Document, while the details for how to use and apply the chosen technologies is documented in the &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Artifact: Project-Specific Guidelines&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The enforcement of these decisions is achieved by framing a set of &lt;b>architecture evaluation criteria&lt;/b> which will&#xD;
    be used as part of the iteration assessment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Evaluation criteria are also derived from &lt;b>Change Cases&lt;/b> which document likely future changes to:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the system's capabilities and properties&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the way the system is used&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the system's operating and support environments&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Change Cases clarify those properties of the system described by subjective phrases such as, &quot;easy to extend&quot;, &quot;easy to&#xD;
    port&quot;, &quot;easy to maintain&quot;, &quot;robust in the face of change&quot;, and &quot;quick to develop&quot;. Change Cases focus on what is&#xD;
    important and likely rather than just what is possible.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Change Cases try to predict changes: such predictions rarely turn out to be exactly true.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The properties of a system are determined by users, sponsors, suppliers, developers, and other stakeholders. Changes&#xD;
    can arise from many sources, for example:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Business drivers: new and modified business processes and goals&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Technology drivers: adaptation of the system to new platforms, integration with new components&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Changes in the profiles of the average user&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Changes in the integration needs with other systems&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Scope changes arising from the migration of functionality from external systems&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Use-Case View&quot; name=&quot;The Use-Case View&quot;>The Use-Case View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Use-Case View presents a subset of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_usecase_model_EF15E534.html&quot;&#xD;
    guid=&quot;{9C66F2EC-EDEB-4369-9AFB-04B9E7CBCB8E}&quot;>Artifact: Use-Case Model&lt;/a>, presenting the architecturally significant&#xD;
    use-cases of the system. It describes the set of scenarios and/or use cases that represent some significant, central&#xD;
    functionality. It also describes the set of scenarios and/or use cases that have a substantial architectural coverage&#xD;
    (that exercise many architectural elements) or that stress or illustrate a specific, delicate point of the&#xD;
    architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If the model is larger, it will typically be organized in packages; for ease of understanding the use-case view should&#xD;
    similarly organized by package, if they are packaged. For each significant use case, include a subsection with the&#xD;
    following information:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        The name of the use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A brief description of the use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Significant descriptions of the &lt;b>Flow of Events&lt;/b> of the use case. This can be the whole &lt;b>Flow of Events&lt;/b>&#xD;
        description, or subsections of it that describe significant flows or scenarios of the use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Significant descriptions of relationships involving the use case, such as include- and extend-relationships, or&#xD;
        communicates-associations.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An enumeration of the significant use-case diagrams related to the use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Significant descriptions of &lt;b>Special Requirements&lt;/b> of the use case. This can be the whole &lt;b>Special&#xD;
        Requirements&lt;/b> description, or subsections of it that describe significant requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Significant &lt;b>Pictures of the User Interface,&lt;/b> clarifying the use case.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The realizations of these use cases should be found in the logical view.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    The &lt;a id=&quot;Contents&quot; name=&quot;Contents&quot;>Logical View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Logical View is a subset of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Artifact: Design Model&lt;/a> which presents architecturally significant&#xD;
    design elements. It describes the most important classes, their organization in packages and subsystems, and the&#xD;
    organization of these packages and subsystems into layers. It also describes the most important use-case realizations,&#xD;
    for example, the dynamic aspects of the architecture.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A complex system may require a number of sections to describe the Logical View:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;b>Overview&lt;/b> &#xD;
        &lt;p>&#xD;
            This subsection describes the overall decomposition of the design model in terms of its package hierarchy and&#xD;
            layers. If the system has several levels of packages, you should first describe those that are significant at&#xD;
            the top level. Include any diagrams showing significant top-level packages, as well as their interdependencies&#xD;
            and layering. Next present any significant packages within these, and so on all the way down to the significant&#xD;
            packages at the bottom of the hierarchy.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Architecturally Significant Design Packages&lt;/b> &#xD;
        &lt;p>&#xD;
            For each significant package, include a subsection with the following information&#xD;
        &lt;/p>&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                Its name.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A brief description.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A diagram with all significant classes and packages contained within the package. For a better&#xD;
                understanding this diagram may show some classes from other packages if necessary.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                For each significant class in the package, include its name, brief description, and, optionally a&#xD;
                description of some of its major responsibilities, operations and attributes. Also describe its important&#xD;
                relationships if necessary to understand the included diagrams.&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Use-Case Realizations&lt;/b> &#xD;
        &lt;p>&#xD;
            This section illustrates how the software works by giving a few selected use-case (or scenario) realizations,&#xD;
            and explains how the various design model elements contribute to their functionality. The realizations given&#xD;
            here are chosen because they represent some significant, central functionality of the final system; or for&#xD;
            their architectural coverage - they exercise many architectural elements - or stress or illustrate a specific,&#xD;
            delicate point of the architecture. The corresponding use cases and scenarios of these realizations should be&#xD;
            found in the use-case view.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            For each significant use-case realization, include a subsection with the following information&#xD;
        &lt;/p>&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                The name of the realized use case.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A brief description of the realized use case.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Significant descriptions of the &lt;b>Flow of Events - Design&lt;/b> of the use-case realization. This can be the&#xD;
                whole &lt;b>Flow of Events - Design&lt;/b> description, or subsections of it that describe the realization of&#xD;
                significant flows or scenarios of the use case.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                An enumeration of the significant interaction or class diagrams related to the use-case realization.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Significant descriptions of &lt;b>Derived Requirements&lt;/b> of the use-case realization. This can be the whole&#xD;
                &lt;b>Derived Requirements&lt;/b> description, or subsections of it that describe significant requirements.&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    Architecturally Significant Design Elements&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    To assist in deciding what is architecturally significant, some examples of qualifying elements and their&#xD;
    characteristics are presented:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A model element that encapsulates a major abstraction of the problem domain, such as: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                A flight plan in an air-traffic control system.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                An employee in a payroll system.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A subscriber in a telephone system.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
    &lt;p>&#xD;
        Sub-types of these should not necessarily be included, e.g. Distinguishing an &lt;b>ICAO Standard Flight Plan&lt;/b> from&#xD;
        a &lt;b>US Domestic Flight Plan&lt;/b> is not important; they are all flight plans and share a substantial amount of&#xD;
        attributes and operations.&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        Distinguishing a subscriber with a data line, or with a voice line, does not matter as long as the call handling&#xD;
        proceeds in roughly the same way.&#xD;
    &lt;/p>&#xD;
&lt;/div>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A model element that is used by many other model elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A model element that encapsulates a major mechanism (service) of the system&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Design Mechanisms &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Persistency mechanism (repository, database, memory management).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Communication mechanism (RPC, broadcast, broker service).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Error handling or recovery mechanism.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Display mechanism, and other common interfaces (windowing, data capture, signal conditioning, and so on).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Parameterization mechanisms.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In general, any mechanism likely to be used in many different packages (as opposed to completely internal to a&#xD;
    package), and for which it is wise to have one single common implementation throughout the system, or at least a single&#xD;
    interface that hides several alternative implementations.&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A model element that participates in a major interface in the system with, for example: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                An operating system.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                An off-the-shelf product (windowing system, RDBMS, geographic information system).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A class that implements or supports an architectural pattern (such as patterns for de-coupling model&#xD;
                elements, including the model-view-controller pattern, or the broker pattern).&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A model element that is of localized visibility, but may have some huge impact on the overall performance of the&#xD;
        system, for example: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                A polling mechanism to scan sensors at a very high rate.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A tracing mechanism for troubleshooting.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A check-pointing mechanism for high-availability system (check-point and restart).&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A start-up sequence.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                An online update of code.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A class that encapsulates a novel and technically risky algorithm, or some algorithm that is&#xD;
                safety-critical or security-critical, for example: computation of irradiation level; airplane&#xD;
                collision-avoidance criteria for congested airspace; Password encryption.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The criteria as to what is architecturally significant will evolve in the early iterations of the project, as you&#xD;
    discover technical difficulties and begin to better understand the system. As a rule however, you should label at most&#xD;
    10% of the model elements as &quot;&lt;b>architecturally significant&lt;/b>.&quot; Otherwise you risk diluting the concept of&#xD;
    architecture, and &quot;everything is architecture.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When you define and include the architecturally significant model elements in the logical view, you should also take&#xD;
    the following aspects into consideration&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identify potential for commonality and reuse. Which classes could be subclasses of a common class, or instances of&#xD;
        the same parameterized class?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Identify potential for parameterization. What part of the design can be made more reusable or flexible by using&#xD;
        static and run-time parameters (such as table-driven behavior, or resource data loaded at start-up time)?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Identify potential for using off-the-shelf products.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Process View&quot; name=&quot;The Process View&quot;>The Process View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The process view describes the process structure of the system. Since the process structure has great architectural&#xD;
    impact, all processes should be presented. Within processes, only architecturally significant lightweight threads need&#xD;
    be presented. The process view describes the tasks (processes and threads) involved in the system's execution, their&#xD;
    interactions and configurations, as well as the allocation of objects and classes to tasks.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For each network of processes, include a subsection with the following information:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Its name.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The processes involved.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The interactions between processes in the form of communication diagrams, in which the objects are actual processes&#xD;
        that encompass their own threads of control. For each process, briefly describe its behavior, lifetime and&#xD;
        communication characteristics.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Deployment View&quot; name=&quot;The Deployment View&quot;>The Deployment View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This section describes one or more physical network (hardware) configurations on which the software is deployed and&#xD;
    run. It also describes the allocation of tasks (from the &lt;b>Process View&lt;/b>) to the physical nodes. For each physical&#xD;
    network configuration, include a subsection with the following information:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Its name.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A deployment diagram illustrating the configuration, followed by a mapping of processes to each processor.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If there are many possible physical configurations, just describe a typical one and then explain the general&#xD;
        mapping rules to follow in defining others. You should also include, in most cases, descriptions of network&#xD;
        configurations for performing software tests and simulations.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    This view is generated from the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_deployment_model_57DF1DF5.html&quot;&#xD;
    guid=&quot;{5981B6BE-2FD1-4984-AA94-2F7428439BA6}&quot;>Artifact: Deployment Model&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Implementation View&quot; name=&quot;The Implementation View&quot;>The Implementation View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This section describes the decomposition of the software into layers and implementation subsystems in the&#xD;
    implementation model. It also provides an overview of the allocation of design elements (from the Logical View) to the&#xD;
    implementation. It contains two subsections:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;b>Overview&lt;/b> &#xD;
        &lt;p>&#xD;
            This subsection names and defines the various layers and their contents, the rules that govern the inclusion to&#xD;
            a given layer, and the boundaries between layers. Include a component diagram that shows the relations between&#xD;
            layers.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Layers&lt;/b> &#xD;
        &lt;p>&#xD;
            For each layer, include a subsection with the following information:&#xD;
        &lt;/p>&#xD;
        &lt;ol>&#xD;
            &lt;li>&#xD;
                Its name.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                A component diagram showing the implementation subsystems and their import dependencies.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                If appropriate, an outline of the layer's relationship to elements in the logical or process view.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                An enumeration of the implementation subsystems located in the layer. For each implementation subsystem:&#xD;
            &lt;/li>&#xD;
            &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
                &lt;ul>&#xD;
                    &lt;li>&#xD;
                        Give its name, abbreviation or nickname, a brief description, and a rationale for its existence;&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        If appropriate, indicate the implementation subsystem's relationship to elements in the logical or&#xD;
                        process view. In many cases, an implementation subsystem will implement one or more design&#xD;
                        subsystems from the logical view.&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        If an implementation subsystem contains architecturally significant implementation subsystems&#xD;
                        and/or&lt;br />&#xD;
                         directories, consider reflecting this in the subsection hierarchy.&lt;br />&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        If an implementation subsystem doesn't map one-to-one with an implementation directory, then&#xD;
                        include an explanation of how the implementation subsystem is defined in terms of implementation&#xD;
                        directories and/or files.&#xD;
                    &lt;/li>&#xD;
                &lt;/ul>&#xD;
            &lt;/li>&#xD;
        &lt;/ol>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Data View&quot; name=&quot;The Data View&quot;>The Data View&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This view is only relevant for systems involving database supported persistence. It describes the architecturally&#xD;
    significant persistent elements in the data model. It describes an overview of the data model and its organization in&#xD;
    terms of the tables, views, indexes, triggers and stored procedures used to provide persistence to the system. It also&#xD;
    describes the mapping of persistent classes (from the Logical View) to the data structure of the database&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It typically includes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The mapping from key persistent design classes, especially where the mapping is non-trivial.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The architecturally significant parts of the system which have been implemented in the database, in the form of&#xD;
        stored procedures and triggers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Important decisions in other views which have data implications, such as choice of transaction strategy,&#xD;
        distribution, concurrency, fault tolerance. For example, the choice to use database-based transaction management&#xD;
        (relying on the database to commit or abort transactions) requires that the error handling mechanism used in the&#xD;
        architecture include a strategy for recovering from a failed transaction by refreshing the state of persistence&#xD;
        objects cached in memory in the application.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    You should present architecturally significant data model elements, describe their responsibilities, as well as a few&#xD;
    very important relationships and behaviors (triggers, stored procedures, etc.).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Size and Performance&quot; name=&quot;Size and Performance&quot;>Size and Performance&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This section describes architecturally-defining volumetric and responsiveness characteristics of the system. The&#xD;
    information presented may include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The number of key elements the system will have to handle (such as the number of concurrent flights for an air&#xD;
        traffic control system, the number of concurrent phone calls for a telecom switch, the number of concurrent online&#xD;
        users for an airline reservation system, etc.).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The key performance measures of the system, such as average response time for key events; average, maximum and&#xD;
        minimum throughput rates, etc.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The footprint (in terms of disk and memory) of the executable programs - essential if the system is an embedded&#xD;
        system which must live within extremely confining constraints.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Most of these qualities are captured as requirements; they are presented here because they shape the architecture in&#xD;
    significant ways and warrant special focus. For each requirement, discuss how the architecture supports this&#xD;
    requirement.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Quality&quot; name=&quot;Quality&quot;>Quality&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In this section, list the key quality dimensions of the system that shape the architecture. The information presented&#xD;
    may include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Operating performance requirements, such as &lt;b>mean-time between failure&lt;/b> (MTBF).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Quality targets, such as &quot;no unscheduled down-time&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Extensibility targets, such as &quot;the software will be upgradeable while the system is running&quot;.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Portability targets, such as hardware platforms, operating systems, languages.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For each dimension, discuss how the architecture supports this requirement. You can organize the section by the&#xD;
    different views (logical, implementation, and so on), or by quality. When particular characteristics are important in&#xD;
    the system, for example, safety, security or privacy, the architectural support for these should be carefully&#xD;
    delineated in this section.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
