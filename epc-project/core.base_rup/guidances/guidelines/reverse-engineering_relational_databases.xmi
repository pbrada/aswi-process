<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1vra09nmEdmO6L4XMImrsA" name="reverse-engineering_relational_databases,1.338740134620651E-305" guid="_1vra09nmEdmO6L4XMImrsA" changeDate="2005-06-21T09:51:18.222-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_relational_databases__reverse_engineering&quot;&#xD;
name=&quot;XE_relational_databases__reverse_engineering&quot;>&lt;/a>&lt;a id=&quot;XE_design_model__reverse-engineering_relational_databases&quot;&#xD;
name=&quot;XE_design_model__reverse-engineering_relational_databases&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_data_model__reverse-engineering_relational_databases&quot;&#xD;
name=&quot;XE_data_model__reverse-engineering_relational_databases&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This guideline describes the steps involved in reverse engineering a database and mapping the resulting &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot;&#xD;
    guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data Model&lt;/a> tables to &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot; guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>Design&#xD;
    Classes&lt;/a> in the &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a>.&amp;nbsp;This process may be used by the &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot;&#xD;
    guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Database Designer&lt;/a> to seed the development of modifications to the&#xD;
    database as part of an evolution development cycle. The Database Designer will need to manage the reverse engineering&#xD;
    process throughout the development lifecycle of the project.&amp;nbsp;In many cases, the reverse engineering process is&#xD;
    performed early in the project lifecycle and then changes to the data design are managed incrementally without the need&#xD;
    to perform subsequent reverse engineering of the database.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The major steps in the process for reverse engineering a database and transforming the resulting Data Model elements&#xD;
    into Design Model elements are as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Create a physical Data Model containing tables to represent the physical layout of persistent data in the&#xD;
        database.&amp;nbsp;This step may be performed automatically using tools supplied with the Relational Database&#xD;
        Management System (RDBMS) or through most modern visual modeling tools.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Transform the tables in the physical Data Model into Design Classes in the Design Model.&amp;nbsp;This step can be&#xD;
        performed through a combination of automated tool support for the initial transformation followed by manual&#xD;
        adjustments.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define associations between the classes in the Design Model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define appropriate operations on the classes in the Design Model based on the actions performed on the&#xD;
        corresponding Data Model elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Group the classes in the Design Model into subsystems and packages as needed.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Reverse Engineering RDBMS Database or DDL script to Generate a Data Model&quot;&#xD;
    name=&quot;Reverse Engineering RDBMS Database or DDL script to Generate a Data Model&quot;>Reverse Engineering RDBMS Database or&#xD;
    DDL script to Generate a Data Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The database or Data Definition Language (DDL) script reverse engineering process typically yields a set of model&#xD;
    elements (tables, views, stored procedures, etc.). Depending on the complexity of the database, the database designer&#xD;
    may need to partition the reverse engineered model elements into subject area packages that contain logically related&#xD;
    sets of tables.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Transforming Data Model to Design Model&quot; name=&quot;Transforming Data Model to Design Model&quot;>Transforming Data Model&#xD;
    to Design Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following procedure can be followed to produce Design Classes from model elements in the Data Model. Replicating&#xD;
    the structure of the database in a class model is relatively straight-forward. The process listed below describes the&#xD;
    algorithm for transforming Data Model elements to Design Model elements.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The table below shows a summary of the general mapping between Design Model elements and Data Model elements.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;b>Data Model Element&lt;/b>&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;b>Corresponding Design Model Element&lt;/b>&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Table&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
                    guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>Class&lt;/a>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Column&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Attribute&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Non-Identifying Relationship&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/association_98710829.html&quot;&#xD;
                        guid=&quot;5.540135518285335E-305&quot;>Association&lt;/a>&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Intersection Table&#xD;
                    &lt;/p>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Association Class&#xD;
                    &lt;/p>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Many-to-Many Association&#xD;
                    &lt;/p>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Qualified Association&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Identifying Relationship&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/aggregation_A53E33AB.html&quot;&#xD;
                        guid=&quot;1.1538495077622037E-304&quot;>Aggregation&lt;/a>&amp;nbsp;&#xD;
                    &lt;/p>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Cardinality&amp;nbsp;&#xD;
                    &lt;/p>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;p class=&quot;Text&quot;>&#xD;
                        Multiplicity&amp;nbsp;&#xD;
                    &lt;/p>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Check Constraint with an enumerated clause&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &amp;lt;&amp;lt;ENUM&amp;gt;&amp;gt; Class&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Schema&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_package_8376BC8E.html&quot;&#xD;
                    guid=&quot;{80CC5437-F481-487B-A69B-957D9D236D8D}&quot;>Package&lt;/a>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    There are some model elements in the Data Model that have no direct correlation in the Design Model. These elements&#xD;
    include the Tablespaces and the Database itself, which model the physical storage characteristics of the database and&#xD;
    are represented as components. Another item is database views, which are &quot;virtual&quot; tables and have no meaning in the&#xD;
    Design Model.&amp;nbsp; Finally, indexes on primary keys of tables and database trigger functions, which are used to&#xD;
    optimize the operation of the database have meaning only in the context of the database and the Data Model.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Transform a Table to a Class&quot; name=&quot;Transform a Table to a Class&quot;>Transform a Table to a Class&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    For each table you wish to transform, create a class to represent the table. For each column, create an attribute on&#xD;
    the class with the appropriate data type. Try to match the data type of the attribute and the data type of the&#xD;
    associated column as closely as possible.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the database table &lt;b>Customer&lt;/b>, with the following structure, shown in the following figure:&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;40%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th headers=&quot;col&quot; width=&quot;55%&quot;>&#xD;
                    &lt;u>&lt;b>Column Name&lt;/b>&lt;/u>&#xD;
                &lt;/th>&#xD;
                &lt;th headers=&quot;col&quot; width=&quot;45%&quot;>&#xD;
                    &lt;u>&lt;b>Data Type&lt;/b>&lt;/u>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    Customer_ID&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Number&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    Name&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Varchar&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    Street&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Varchar&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    City&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Varchar&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    State/Province&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Char(2)&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    Zip/Postal Code&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Varchar&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;55%&quot;>&#xD;
                    Country&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;45%&quot;>&#xD;
                    Varchar&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Table definition for &lt;b>Customer&lt;/b> table&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Starting from this point, we create a class, &lt;b>Customer,&lt;/b> with the structure shown in the following figure:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;154&quot; alt=&quot;Customer class definition&quot; src=&quot;resources/rdb-oo1.gif&quot; width=&quot;147&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Initial &lt;b>Customer&lt;/b> class&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In this initial &lt;b>Customer&lt;/b> class, there is an attribute for each column in the &lt;b>Customer&lt;/b> table. Each&#xD;
    attribute has &lt;b>public&lt;/b> visibility, since any of the columns in the originating table may be queried.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Note, the &quot;+&quot; icon listed to the left of the attribute indicates that the attribute is 'public'; by default, all&#xD;
    attributes derived from RDBMS tables should be public, since the RDBMS generally allows any column to be queried&#xD;
    without restriction.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify Embedded or Implicit Classes&quot; name=&quot;Identify Embedded or Implicit Classes&quot;>Identify Embedded or&#xD;
    Implicit Classes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The class that results from the direct table-class mapping will often contain attributes that can be separated into a&#xD;
    separate class, especially in cases where the attributes appear in a number of translated classes. These 'repeated&#xD;
    attributes' may have resulted from denormalization of tables for performance reasons, or may have been the result of an&#xD;
    oversimplified Data Model. In these cases, split the corresponding class into two or more classes to represent a&#xD;
    normalized view of the tables.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    After defining the &lt;b>Customer&lt;/b> class above, we can define an &lt;b>Address&lt;/b> class which contains all address&#xD;
    information (assuming that there will be other things with addresses in our system), leaving us with the following&#xD;
    classes:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;150&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/rdb-oo2.gif&quot; width=&quot;433&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    revised &lt;b>Customer&lt;/b> class, with extracted &lt;b>Address&lt;/b> class&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The association drawn between these two is an &lt;b>aggregation&lt;/b>, since the customer's address can be thought of as&#xD;
    being &lt;b>part-of&lt;/b> the customer.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Handle Foreign-Key Relationships&quot; name=&quot;Handle Foreign-Key Relationships&quot;>Handle Foreign-Key Relationships&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    For each foreign-key relationship in the table, create an association between the associated classes, removing the&#xD;
    attribute from the class which mapped to the foreign-key column. If the foreign-key column was represented initially as&#xD;
    an attribute, remove it from the class.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Assume the structure for the &lt;b>Order&lt;/b> table listed below:&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;35%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;u>&lt;b>Column Name&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                &lt;/th>&#xD;
                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                    &lt;u>&lt;b>Data Type&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Number&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Number&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Customer_ID&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;50%&quot;>&#xD;
                    Varchar&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Structure for the &lt;b>Order&lt;/b> table&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the &lt;b>Order&lt;/b> table listed above, the &lt;b>Customer_ID&lt;/b> column is a &lt;b>foreign-key reference&lt;/b>; this column&#xD;
    contains the primary key value of the Customer associated with the Order. We would represent this in the Design Model&#xD;
    as shown below:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;209&quot; alt=&quot;UML diagram described below.&quot; src=&quot;resources/rdb-oo3.gif&quot; width=&quot;156&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Representation of foreign-key Relationships in the Design Model&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The foreign-key is represented as an association between the classes &lt;b>Order&lt;/b> and &lt;b>Item&lt;/b>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Handle Many-to-Many Relationships&quot; name=&quot;Handle Many-to-Many Relationships&quot;>Handle Many-to-Many&#xD;
    Relationships&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    RDBMS data models represent many-to-many relationships with what has been called a &lt;b>join table&lt;/b>, or an&#xD;
    &lt;b>association table&lt;/b>. These tables enable many-to-many relationships to be represented using an intermediate table&#xD;
    which contains the primary keys of two different tables which may be joined together. The reason join tables are needed&#xD;
    is because a foreign key reference can only contain a reference to a single foreign key value; when a single row may&#xD;
    relate to many other rows in another table, a join table is needed to associate them.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the case of &lt;b>Products&lt;/b>, which may be provided by any one of a number of &lt;b>Suppliers&lt;/b>, and any&#xD;
    &lt;b>Supplier&lt;/b> may provide any number of &lt;b>Products&lt;/b>. The &lt;b>Product&lt;/b> and &lt;b>Supplier&lt;/b> tables have the&#xD;
    structure defined below:&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;85%&quot; border=&quot;0&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;td valign=&quot;top&quot; align=&quot;middle&quot;>&#xD;
                    &lt;table&#xD;
                    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
                     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;300&quot; bordercolorlight=&quot;#808080&quot;&#xD;
                    border=&quot;1&quot;>&#xD;
                        &lt;caption>&#xD;
                            Product Table&#xD;
                        &lt;/caption>&#xD;
                        &lt;tbody>&#xD;
                            &lt;tr>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                                    &lt;u>&lt;b>Column Name&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                                    &lt;u>&lt;b>Data Type&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Product_ID&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Number&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Name&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Description&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Price&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Number&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                        &lt;/tbody>&#xD;
                    &lt;/table>&#xD;
                &lt;/td>&#xD;
                &lt;td valign=&quot;top&quot; align=&quot;middle&quot;>&#xD;
                    &lt;table&#xD;
                    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
                     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;300&quot; bordercolorlight=&quot;#808080&quot;&#xD;
                    border=&quot;1&quot;>&#xD;
                        &lt;caption>&#xD;
                            Supplier Table&#xD;
                        &lt;/caption>&#xD;
                        &lt;tbody>&#xD;
                            &lt;tr>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                                    &lt;u>&lt;b>Column Name&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;50%&quot;>&#xD;
                                    &lt;u>&lt;b>Data Type&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Supplier_ID&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Number&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Name&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Street&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    City&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    State/Province&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Char(2)&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Zip/Postal Code&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Country&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Varchar&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                        &lt;/tbody>&#xD;
                    &lt;/table>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Product and Supplier Table Definitions&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;left&quot;>&#xD;
    In order to link these two tables together to find the products offered by a particular supplier, we need a&#xD;
    &lt;b>Product-Supplier&lt;/b> table, which is defined in the table below.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;45%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;col1&quot; align=&quot;middle&quot; width=&quot;100%&quot; colspan=&quot;2&quot;>&#xD;
                    &lt;b>Product-Supplier Table&lt;/b>&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;60%&quot;>&#xD;
                    &lt;u>&lt;b>Column Name&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                &lt;/td>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;40%&quot;>&#xD;
                    &lt;u>&lt;b>Data Type&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;60%&quot;>&#xD;
                    Product_ID&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;40%&quot;>&#xD;
                    Number&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;60%&quot;>&#xD;
                    Supplier_ID&amp;nbsp;&#xD;
                &lt;/td>&#xD;
                &lt;td headers=&quot;col1&quot; width=&quot;40%&quot;>&#xD;
                    Number&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Product-Supplier Table Definition&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    This &lt;b>join table&lt;/b> contains the primary keys of products and suppliers, linking them together. A row in the table&#xD;
    would indicate that a particular supplier offers a particular product. All rows whose Supplier_ID column matches a&#xD;
    particular supplier ID would provide a listing of all products offered by that supplier.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the Design Model, this intermediate table is redundant, since an object model can represent many-to-many&#xD;
    associations directly. The &lt;b>Supplier&lt;/b> and &lt;b>Product&lt;/b> classes and their relationships are shown in the figure&#xD;
    below, along with the &lt;b>Address&lt;/b> class, which is extracted from the &lt;b>Supplier&lt;/b>, according to the previous&#xD;
    discussion.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;301&quot; alt=&quot;UML diagram described in caption.&quot; src=&quot;resources/rdb-oo4.gif&quot; width=&quot;409&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Product and Supplier Class Representation&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduce Generalization&quot; name=&quot;Introduce Generalization&quot;>Introduce Generalization&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Often, you will find tables which have some similar structure. In the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_data_model_65B46980.html&quot; guid=&quot;{9DCF1723-1A21-4F48-BEDE-DBC543489682}&quot;>Data&#xD;
    Model&lt;/a>, there is no concept of generalization, so there is no way to represent that two or more tables have some&#xD;
    structure in common. Sometimes common structure results from denormalization for performance, such as was the case&#xD;
    above with the 'implicit' &lt;b>Address&lt;/b> table which we extracted into a separate class. In other cases, tables share&#xD;
    more fundamental characteristics which we can extract into a generalized parent class with two or more sub-classes. To&#xD;
    find generalization opportunities, look for repeated columns in several tables, where the tables are more similar than&#xD;
    they are different.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Consider the following tables, &lt;b>SoftwareProduct&lt;/b> and &lt;b>HardwareProduct&lt;/b>, as shown below:&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;85%&quot; border=&quot;0&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;td align=&quot;middle&quot;>&#xD;
                    &lt;table&#xD;
                    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
                     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;300&quot; bordercolorlight=&quot;#808080&quot;&#xD;
                    border=&quot;1&quot;>&#xD;
                        &lt;caption>&#xD;
                            Software Product Table&#xD;
                        &lt;/caption>&#xD;
                        &lt;tbody>&#xD;
                            &lt;tr>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;20%&quot;>&#xD;
                                    &lt;u>&lt;b>Column Name&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;20%&quot;>&#xD;
                                    &lt;u>&lt;b>Data Type&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Product_ID&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Number&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Name&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Varchar&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Description&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Varchar&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Price&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Number&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Version&amp;nbsp;&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Number&amp;nbsp;&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                        &lt;/tbody>&#xD;
                    &lt;/table>&#xD;
                &lt;/td>&#xD;
                &lt;td align=&quot;middle&quot;>&#xD;
                    &lt;table&#xD;
                    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
                     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;300&quot; bordercolorlight=&quot;#808080&quot;&#xD;
                    border=&quot;1&quot;>&#xD;
                        &lt;caption>&#xD;
                            Hardware Product Table&#xD;
                        &lt;/caption>&#xD;
                        &lt;tbody>&#xD;
                            &lt;tr>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;20%&quot;>&#xD;
                                    &lt;u>&lt;b>Column Name&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                                &lt;th scope=&quot;col&quot; width=&quot;20%&quot;>&#xD;
                                    &lt;u>&lt;b>Data Type&amp;nbsp;&lt;/b>&lt;/u>&#xD;
                                &lt;/th>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Product_ID&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Number&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Name&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Varchar&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Description&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Varchar&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Price&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    &lt;font color=&quot;#0000ff&quot;>Number&amp;nbsp;&lt;/font>&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                            &lt;tr>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Version&amp;nbsp;&#xD;
                                &lt;/td>&#xD;
                                &lt;td width=&quot;20%&quot;>&#xD;
                                    Number&amp;nbsp;&#xD;
                                &lt;/td>&#xD;
                            &lt;/tr>&#xD;
                        &lt;/tbody>&#xD;
                    &lt;/table>&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&#xD;
    &lt;p>&#xD;
        &lt;br />&#xD;
    &lt;/p>&#xD;
&lt;/div>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    SoftwareProduct and HardwareProduct Tables&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Notice that the columns highlighted in blue are identical; these two tables share most of their definition in common,&#xD;
    and only differ slightly. We can represent this by extracting a common &lt;b>Product&lt;/b> class, with&#xD;
    &lt;b>SoftwareProduct&lt;/b> and &lt;b>HardwareProduct&lt;/b> as sub-classes of the &lt;b>Product&lt;/b>, as shown in the following&#xD;
    figure:&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;231&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/rdb-oo5.gif&quot; width=&quot;320&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    SoftwareProduct and HardwareProduct Classes, showing generalization to the Product class&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    Putting all of the class definitions together, the figure below shows a consolidated class diagram for the Order Entry&#xD;
    system (major classes only).&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;588&quot; alt=&quot;Complex UML Diagram described in accompanying text.&quot; src=&quot;resources/rdb-oo6.gif&quot; width=&quot;643&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Consolidated Class diagram for the Order Entry System&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Replicating RDBMS Behavior in the Design Model&quot;&#xD;
    name=&quot;Replicating RDBMS Behavior in the Design Model&quot;>Replicating RDBMS Behavior in the Design Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Replicating behavior is more difficult, since typically relational databases are not object-oriented and do not appear&#xD;
    to have anything analogous to operations on a class in the object model. The following steps can help re-construct the&#xD;
    behavior of the classes identified above:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;b>Create operations to get and set each attribute.&lt;/b> There needs to be a way to set, change and query the values&#xD;
        of the attributes of objects. Since the only way to access the attributes of an object is through operations the&#xD;
        class provides, such operations must be defined on the class. When creating the operations that set the value of an&#xD;
        attribute, be sure to incorporate any validation constraints that may operate on the associated column. If there&#xD;
        are no validation constraints, one may choose to simply represent the fact that the attributes can be &lt;b>get&lt;/b>&#xD;
        and &lt;b>set&lt;/b> by marking them as having &quot;public&quot; visibility, as this has been done in the diagrams above (with the&#xD;
        icon to the left of the attribute name).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Create an operation on the class for each stored procedure which operates upon the associated table.&lt;/b> Stored&#xD;
        procedures are executable subroutines which execute within the DBMS itself. This logic needs to be translated into&#xD;
        the Design Model. If a stored procedure operates only on one class, create an operation on the class with the same&#xD;
        parameters and the same return type as the stored procedure. Document the behavior of the stored procedure in the&#xD;
        operation, making sure to note in the &lt;b>method&lt;/b> description that the operation is implemented by the stored&#xD;
        procedure.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Create operations to manage associations between classes.&lt;/b> When there is an association between two classes,&#xD;
        there must be a way to create, manage and remove associations. Associations between objects are managed through&#xD;
        object references, so to create an association between an &lt;b>Order&lt;/b> and a &lt;b>LineItem&lt;/b> (i.e. to add the&#xD;
        &lt;b>LineItem&lt;/b> to the &lt;b>Order&lt;/b>), an operation on &lt;b>Order&lt;/b> would be invoked, passing the &lt;b>LineItem&lt;/b> as&#xD;
        an argument (i.e. &lt;b>Order.add(aLineItem)&lt;/b>). There must also be ways to remove and update the association as&#xD;
        well (i.e. &lt;b>Order.remove(aLineItem)&lt;/b> and &lt;b>Order.change(aLineItem,aNewLineItem)&lt;/b>).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Handle Object Deletion.&lt;/b> If the target language supports explicit deletion, add behavior to the class's&#xD;
        destructor which implements referential integrity checking. In cases where there are referential integrity&#xD;
        constraints in the database, such as &lt;b>cascade delete&lt;/b>, the behavior needs to be replicated in the appropriate&#xD;
        classes. For example, the database may define a constraint that says that whenever an &lt;b>Order&lt;/b> is deleted, all&#xD;
        associated &lt;b>LineItems&lt;/b> should be deleted as well. If the target language supports garbage collection, create a&#xD;
        mechanism by which rows can be removed from tables when the associated object is garbage-collected. Note that this&#xD;
        is harder than it sounds (and it sounds hard), because you will need to implement a mechanism for ensuring that no&#xD;
        database client has any references to the object which is to be garbage collected; it is not enough to rely upon&#xD;
        the garbage collection capabilities of the execution environment/virtual machine since this is simply one client's&#xD;
        view of the world.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Handle Behavior Implied by Queries.&lt;/b> Examine Select statements which access the table to see how information&#xD;
        is retrieved and manipulated. For each column directly returned by a Select statement, set the &lt;b>public&lt;/b>&#xD;
        property of the associated attribute to &lt;b>true&lt;/b>; all other attributes should be &lt;b>private&lt;/b>. For each&#xD;
        computed column in a Select statement, create an operation on the associated class to compute and return the value.&#xD;
        When considering Select statements, also include the Select statements embedded in View definitions.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Organize Elements in the Design Model&quot; name=&quot;Organize Elements in the Design Model&quot;>Organize Elements in the&#xD;
    Design Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Design Classes created from the table-to-class transformations should be organized into appropriate &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_package_8376BC8E.html&quot;&#xD;
    guid=&quot;{80CC5437-F481-487B-A69B-957D9D236D8D}&quot;>design packages&lt;/a> and/or &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
    guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot;>design subsystems&lt;/a> in the Design Model, as needed, based on the&#xD;
    overall architectural structure of the application.&amp;nbsp;Refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot; guid=&quot;3.801315327549898E-305&quot;>Concept: Layering&lt;/a> and&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/software_architecture_4269A354.html&quot;&#xD;
    guid=&quot;3.066252221588648E-305&quot;>Concept: Software Architecture&lt;/a> for an overview of application architecture.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
