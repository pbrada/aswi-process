<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_375axNnmEdmO6L4XMImrsA" name="process_discriminants,2.746702783003723E-305" guid="_375axNnmEdmO6L4XMImrsA" changeDate="2005-10-27T11:40:11.533-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Overview&quot; name=&quot;Overview&quot;>Overview&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The software-development process is influenced by the following factors:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Domain factors such as application domain, business process to support, user community, and offerings available&#xD;
        from competitors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Lifecycle factors such as time-to-market, expected life span of the software, and planned future releases.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Technical factors such as programming language, development tools, database, components frameworks, and existing&#xD;
        software systems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Organizational factors.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These factors are not equally important. The following sections describe some of the main factors-those most likely to&#xD;
    affect the overall shape of the development process, and how you implement the process and tools in the development&#xD;
    organization.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business_Context&quot; name=&quot;Business_Context&quot;>&lt;/a>&lt;a id=&quot;XE_process_discriminants__business_context&quot;&#xD;
    name=&quot;XE_process_discriminants__business_context&quot;>The Business Context&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The business context describes the context in which the software is developed.&amp;nbsp; There are different types of&#xD;
    business contexts that affect how to best customize the process. Examples of business contexts are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Contract work where the developer produces software to a given customer specification and for this customer only.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Speculative or commercial development where the developer produces and covers the cost of putting the software on&#xD;
        the market.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Internal projects where customer and developer are in the same organization.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    There are many intermediate situations; for example, those where only part of the software development is&#xD;
    subcontracted, those where the geographical dispersion is an additional factor, and so on. The total number of distinct&#xD;
    stakeholders is a good indicator of the business context.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The business context affects the level of ceremony, the level of formality, and the rigidity of the process. The more&#xD;
    stakeholders-buyers, customers, subcontractors, regulatory bodies, and so on-involved, the more likely the project will&#xD;
    need to produce formal evidence, such as documents, reports, and prototypes, at major project milestones.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Size of the Software Development Effort&quot; name=&quot;The Size of the Software Development Effort&quot;>The Size of the&#xD;
    Software Development Effort&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The size of the software development effort as defined by certain metrics such as Source Lines of Code (SLOC),&#xD;
    Delivered Source Instructions or Functions Points, number of person-months or merely the cost.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The effort's size will affect the level of ceremony, the level of formality, and the rigidity of the process. The&#xD;
    larger the project, the larger the development team and, regardless of the business context, the more formality and&#xD;
    visibility the various teams and management need to have in requirements, interfaces, and progress indicators.&#xD;
    Communication issues on large projects are further aggravated by geographically dispersed teams.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Degree_of_Novelty&quot; name=&quot;Degree_of_Novelty&quot;>&lt;/a>&lt;a id=&quot;XE_process_discriminants__degree_of_novelty&quot;&#xD;
    name=&quot;XE_process_discriminants__degree_of_novelty&quot;>The Degree of Novelty&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The degree of novelty is based on what has preceded this software effort &lt;b>relative to the development&#xD;
    organization&lt;/b> and, in particular, whether the development is in a second or subsequent cycle. This includes the&#xD;
    maturity of the organization and its process, its assets, its current skill set, and issues such as assembling and&#xD;
    training a team, acquiring tools, and other resources.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A project's degree of novelty affects the process in a completely different way. A new project-the first of its&#xD;
    kind-significantly affects the dynamic configuration: the inception and elaboration phases will be longer, and may span&#xD;
    several iterations. Also more emphasis will be put on eliciting and capturing requirements, on use-case modeling, on&#xD;
    architecture, and on mitigating risk. For a project that is an &lt;b>evolution cycle&lt;/b> from a previous system, change&#xD;
    management is more crucial and incorporating legacy code poses some technical challenges.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Novelty is not only relative to the system being developed, it's also relative to the maturity of the performing&#xD;
    organizations because introducing new techniques or tools affects the process. In particular, introducing the Rational&#xD;
    Unified Process (RUP) itself to an organization must be phased in careful steps. An organization will present some&#xD;
    inertia to the adoption of a new process and the adoption strategy must take into account a smooth transition from&#xD;
    existing practices to new ones.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Type of Application&quot; name=&quot;Type of Application&quot;>Type of Application&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are different types of applications, for example, embedded real-time systems, distributed information systems,&#xD;
    telecom systems, Computer-Aided Software Engineering (CASE) tools, and so on. The type of application will affect the&#xD;
    process, especially with respect to specific constraints the domain may impose on the development such as safety,&#xD;
    performance, internationalization, memory constraints, and so forth.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The type of application may affect the process if the application is mission-critical; for example, the flight-control&#xD;
    system in an airplane. A mission-critical system requires a higher level of ceremony in general, both to trace&#xD;
    requirements and to assure the quality of the product. A mission-critical application also requires that more resources&#xD;
    are spent on testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The type of development, or the target domain, bring in process issues such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Techniques and tools to support specific tasks; for example, automatic code generation for finite-state machines.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Certification procedures; for example, for medical instrumentation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Compliance to standards; for example, for accounting or fiscal issues, and for telecommunication equipment.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Type of Development&quot; name=&quot;Type of Development&quot;>Type of Development&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There are various types of development, such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Contract work&lt;/b> where you develop a product for a specific customer. You have more stakeholders to manage and&#xD;
        negotiate with when you perform contract work. There is often a need for more formal-external work products because&#xD;
        the customer, or representatives, want to monitor progress and be kept informed. Make sure that the work products&#xD;
        the customer reviews are easy to understand. Sometimes, there's a need to have a milestone where the project can&#xD;
        offer a fixed-price on the rest of the project. In that case, you may need to add a new milestone or adjust the&#xD;
        existing milestones. In other cases, you may have to adjust to the lifecycle model the customer is using with other&#xD;
        milestones and phases.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Speculative development&lt;/b> where you develop a product for a mass-market. In speculative development, a&#xD;
        marketing (product) manager, within the organization itself, acts as the customer. Time-to-market is often more&#xD;
        important than the functionality in speculative development and there is less need for formal reviews.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Internal development&lt;/b> where you develop a product that is delivered to another department within the company.&#xD;
        You may have to adjust to another lifecycle model if you deliver to another project that does not use the RUP. It&#xD;
        may be acceptable to be more technical when describing work products because most work products will be reviewed by&#xD;
        peers.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Pre-studies&lt;/b> where you do not normally develop a product. The purpose of a pre-study project is to find out&#xD;
        whether it's possible to build a product. A pre-study project doesn't have the same milestones as a regular one.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Current Development Process&quot; name=&quot;The Current Development Process&quot;>The Current Development Process&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In most cases, you won't replace the software-development process currently in practice in the organization because, in&#xD;
    most cases, you'll implement the new development process step-by-step, focusing on the more critical and important&#xD;
    areas first. Some of the current software-development process may even continue to exist for some time, perhaps&#xD;
    forever.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Problems and Root Causes&quot; name=&quot;Problems and Root Causes&quot;>Problems and Root Causes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    What problems are identified and prioritized for the project&amp;nbsp;influence those areas of the process you will&#xD;
    concentrate on in the beginning of the process implementation. It's important to note that, if there is no established&#xD;
    way of working in the organization, it may be pointless to find problems. See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/implementing_a_process_in_a_project_3656F98A.html&quot;&#xD;
    guid=&quot;2.870714010568015E-306&quot;>Concept: Implementing a Process in a Project&lt;/a>. Instead, you may need to identify the&#xD;
    root causes of the problems. To eliminate the problems, you will tackle the root causes by improving their process,&#xD;
    introducing tools to automate the process, and training people.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Examples of common problems&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    The following are examples of some common problems:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Inability to manage scope-the organization routinely tries to do more than they actually do in the end.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to capture requirements-they have difficulty specifying requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to manage changing requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to manage requirements-requirements do not make it to the final product.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to estimate-they are routinely too optimistic about their ability to deliver on schedule.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Design deficiency-they are good at meeting requirements, yet poor at designing systems. What kinds of design&#xD;
        problems do they have? Are the systems difficult to maintain and enhance? Do they have performance problems,&#xD;
        usability problems, capacity problems, and so on?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Inability to produce quality products-the product has too many defects which may be due to lack of testing, but&#xD;
        usually is also related to an inability to capture and manage requirements, as well as design deficiency.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Unacceptable software performance.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Low usability.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Colliding developers-there is a lack of control over ownership and configuration management, so that developers&#xD;
        make conflicting changes and work is lost.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Late discovery of problems.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Trouble going from use cases to design.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Examples of root causes&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A problem is often a symptom that something is wrong. You need to identify the root causes of the problems. The&#xD;
    following are examples of some common root causes:&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Insufficient requirements management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Ambiguous and imprecise communications&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Brittle architectures&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Overwhelming complexity&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Undetected inconsistencies among requirements, designs, and implementations&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Insufficient testing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Subjective project status assessment&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Delayed risk reduction due to waterfall development&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Uncontrolled change propagation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Insufficient automation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        No systematic way to build user interfaces&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        No way to go from use cases to a design&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Organizational Factors&quot; name=&quot;Organizational Factors&quot;>Organizational Factors&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    To implement the process in an organization, it depends on organizational factors such as the organization's capacity&#xD;
    for change, organizational structure, culture in the project's organization and management, competencies and skills&#xD;
    available, previous experiences, and current attitudes,&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The organizational factors also affect how the process is configured. For example, if the people in the organization&#xD;
    have previously been using a software-development process description, then it will be easier to start using the RUP.&#xD;
    On the other hand, if the people have not used a software-development process description, then you may decide to limit&#xD;
    the scope of the process description. You could also put extra effort into making the process description easy to&#xD;
    understand and use, making sure that it includes (or references) the information that will provide the greatest value.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If there are some areas that are new to many of the people, then developing the best guidelines possible will make the&#xD;
    transition easier. For example, if the programming language is new to many people, then you'll want to have very good&#xD;
    Programming Guidelines and Design Guidelines to assist their learning.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Attitudes&quot; name=&quot;Attitudes&quot;>Attitudes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Negative attitudes among an organization's personnel toward changing to a new technology, a new process or new tools is&#xD;
    probably the biggest threat toward the successful implementation of process and tools. Over-enthusiasm toward process&#xD;
    can also be a problem, because it can cause people to focus too much on the process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To assess people's attitudes towards the new technology, process, and tools ask questions like:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        What benefits do you see with the new technology? Will the new technology solve any of today's problems? What&#xD;
        problems do you see with the new technology?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What benefits do you see with the new process? Will the new process solve any of today's problems? What problems do&#xD;
        you see with the new process?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What benefits do you see with the new tools? Will the new tools solve any of today's problems? What problems do you&#xD;
        see with the new tools?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    To assess people's motivation, find answers to questions like:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Does everybody in the organization see why change is needed?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is everybody aware of what their competition is doing and how that affects the business?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is everybody aware of technology changes in the industry and how they affect the business?&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Signs of a negative attitude may include statements like these:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &quot;Process doesn't help, it hinders.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;Process means producing a lot of documents.&quot;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &quot;The process is overwhelming.&quot;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Some ways to handle negative attitudes are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Motivate people by pointing at today's problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Explain that a process doesn't dictate what you should do. The process must primarily be looked upon as a &quot;help&#xD;
        system&quot;, where you look for guidance, definitions, and so on.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Explain that you only use small sections of the process. Nobody can master the entire process, and that is not the&#xD;
        purpose. Compare the process to a bookshelf of books you read as you need their information.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Run a successful pilot project where you show that the new process and tools work. Include one or two skeptics in&#xD;
        the pilot project.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Signs of over-enthusiasm include these:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        People rely completely on the process and think it will solve all of their problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Process is the &lt;i>silver bullet&lt;/i> or magic formula that, if followed, will guarantee success.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The project team wants to spend a lot of time and effort tailoring the process without first assessing the&#xD;
        process-related problems that need resolution.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Some ways to handle over-enthusiasm are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Set expectations. The process will help, but it will not solve the problems. People solve problems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Talk people out of spending a lot of time tailoring the process.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Focus people on developing the software products.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Technical_and_Managerial&quot; name=&quot;Technical_and_Managerial&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_process_discriminants__technical_complexity&quot; name=&quot;XE_process_discriminants__technical_complexity&quot;>Technical and&#xD;
    Managerial Complexity&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;XE_process_discriminants__managerial_complexity&quot;&#xD;
    name=&quot;XE_process_discriminants__managerial_complexity&quot;>&lt;/a>Different types of systems, and their projects, can be&#xD;
    classified in terms of the &lt;b>technical complexity&lt;/b> of the system and the &lt;b>managerial complexity&lt;/b>. The&#xD;
    following figure illustrates one concept of how different systems can be classified. For example, a typical small&#xD;
    business spreadsheet application is often of low technical complexity and is easy to manage. The other extreme is a&#xD;
    typical weapon system project, which is often both technically complex, and complex to manage.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usually increasing system size, project duration or business context also increases the managerial complexity.&#xD;
    Increasing the novelty, in either the problem domain or the solution space, increases the technical complexity. There&#xD;
    is an interaction between managerial and technical complexity as well-many large projects are also technically complex.&#xD;
    This results in:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Increased managerial complexity that leads to more ceremony, including more formal reviews and milestones, and more&#xD;
        work products.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Increased technical complexity that leads to the introduction of specific techniques, roles and tools, and,&#xD;
        therefore, more tasks.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;390&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;../supportingmaterials/resources/complex.gif&quot;&#xD;
    width=&quot;467&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    Systems are classified in terms of technical complexity and managerial complexity&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
