<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1e_TctnmEdmO6L4XMImrsA" name="design_model,2.3158107674855575E-306" guid="_1e_TctnmEdmO6L4XMImrsA" changeDate="2005-06-21T09:19:16.590-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identifying Design Elements from Analysis Classes&quot;&#xD;
    name=&quot;Identifying Design Elements from Analysis Classes&quot;>Identifying Design Elements from Analysis Classes&lt;/a> &lt;img&#xD;
    height=&quot;20&quot; alt=&quot;To top of page&quot; src=&quot;./../../../core.base_rup/resources/top.gif&quot; width=&quot;26&quot; border=&quot;0&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_analysis_class_DAF7CE03.html&quot;&#xD;
    guid=&quot;{1E20603F-A5B8-42D5-BDBC-69DCE9C0FCDB}&quot;>Artifact: Analysis Class&lt;/a>es represent roles played by instances of&#xD;
    design elements; these roles may be fulfilled by one or more design model elements. In addition, a single design&#xD;
    element may fulfill multiple roles. The following observations discuss the ways the analysis roles may be fulfilled:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        An analysis class can become a single design class in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become a part of a design class in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become an aggregate design class in the design model. (Meaning that the parts in this&#xD;
        aggregate may not be explicitly modeled as analysis classes.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become a group of design classes that inherits from the same class in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become a group of functionally related design classes in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become a design subsystem in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become part of a design subsystem, such as one or more interfaces and their corresponding&#xD;
        implementation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An analysis class can become a relationship in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A relationship between analysis classes can become a design class in the design model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Analysis classes handle primarily functional requirements, and model objects from the &quot;problem&quot; domain; design&#xD;
        classes handle non-functional requirements, and model objects from the &quot;solution&quot; domain.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Analysis classes can be used to represent &quot;the objects we want the system to support,&quot; without taking a decision on&#xD;
        how much of them to support with hardware and how much with software. Thus, part of an analysis class can be&#xD;
        realized by hardware, and not modeled in the design model at all.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Any combination of the above are also possible.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If a separate Analysis Model is maintained, be sure to maintain the traceability from the identified design element to&#xD;
    the Analysis Classes they correspond to.&amp;nbsp; For more information, see &lt;a&#xD;
    href=&quot;#Mapping%20to%20the%20Analysis%20Model&quot;>Mapping to the Analysis Model&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Mapping to the Analysis Model&quot; name=&quot;Mapping to the Analysis Model&quot;>Mapping to the Analysis Model&lt;/a> &lt;img&#xD;
    height=&quot;20&quot; alt=&quot;To top of page&quot; src=&quot;./../../../core.base_rup/resources/top.gif&quot; width=&quot;26&quot; border=&quot;0&quot; />&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This section only applies if a separate Analysis Model is maintained.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    During design, design elements are identified which support a closer alignment with the architecture and chosen&#xD;
    technologies.&amp;nbsp; Every Analysis Class in the Analysis Model should be associated with at least one design class in&#xD;
    the Design Model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To model this traceability, a &amp;lt;&amp;lt;trace&amp;gt;&amp;gt; dependency should be drawn from the design element to the analysis&#xD;
    class(es) it represents, as shown in the following diagram:&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img height=&quot;85&quot; alt=&quot;Diagram shows trace dependency.&quot; src=&quot;resources/md_des1.gif&quot; width=&quot;437&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note: Traceability links are drawn &lt;i>from&lt;/i> the Design Model elements &lt;i>to&lt;/i> the Analysis Model elements, so that&#xD;
    the Design Model is dependent on the Analysis Model and not the other way around.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_design_model__mapping_to_the_Implementation_Model&quot;&#xD;
    name=&quot;XE_design_model__mapping_to_the_Implementation_Model&quot;>&lt;/a>&lt;a id=&quot;toImplementation&quot;&#xD;
    name=&quot;toImplementation&quot;>Mapping to the Implementation Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You should decide before the design starts how classes in the design model should relate to implementation classes;&#xD;
    this should be described in the Design Guidelines specific to the project.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The design model can be more or less close to the implementation model, depending on how you map its classes, packages&#xD;
    and subsystems to implementation classes, files, packages and subsystems in the implementation model. During&#xD;
    implementation, you will often address small tactical issues related to the implementation environment that shouldn't&#xD;
    have impact on the design model. For example, classes and subsystems can be added during implementation to handle&#xD;
    parallel development, or to adjust import dependencies. For more information, refer to &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/tasks/structure_implementation_model_E0E0DEF9.html&quot;&#xD;
    guid=&quot;{35272424-8A0A-4DDD-BA74-C91B80A8D046}&quot;>Task: Structure the Implementation Model&lt;/a> and &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/concepts/mapping_from_design_to_code_D1454680.html&quot;&#xD;
    guid=&quot;1.424219730601675E-305&quot;>Concept: Mapping from Design to Code&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There should be a consistent mapping from the design model to the implementation model. The &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Artifact: Project-Specific Guidelines&lt;/a> should define this mapping, and&#xD;
    a consistent level of abstraction should be applied across the design model.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;b>&lt;a id=&quot;XE_design_model__mapping_from_the_Analysis_Model&quot; href=&quot;#Characteristics%20of%20a%20Good%20Design%20Model&quot;&#xD;
    name=&quot;XE_design_model__mapping_from_the_Analysis_Model&quot;>&lt;/a>&lt;a id=&quot;Characteristics of a Good Design Model&quot;&#xD;
    name=&quot;Characteristics of a Good Design Model&quot;>Characteristics of a Good Design Model&lt;/a>&lt;/b>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;XE_design_model__characteristics_of_a_good&quot; name=&quot;XE_design_model__characteristics_of_a_good&quot;>&lt;/a>A good design&#xD;
    model has the following characteristics:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        It satisfies the system requirements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is resistant to changes in the implementation environment.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is easy to maintain in relation to other possible object models and to system implementation.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is clear how to implement.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It does not include information that is best documented in program code.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is easily adapted to changes in requirements.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For specific characteristics, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/checklists/design_model_18BE347C.html&quot; guid=&quot;1.4639852935143625E-305&quot;>Checklist: Design&#xD;
    Model&lt;/a>.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
