<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_2GxsMdnmEdmO6L4XMImrsA" name="unit_test,9.315724622037552E-305" guid="_2GxsMdnmEdmO6L4XMImrsA" changeDate="2005-06-16T20:31:47.074-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_test__developer_testing__unit_test__guidelines_for&quot;&#xD;
name=&quot;XE_test__developer_testing__unit_test__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Unit testing is implemented against the smallest testable element (units) of the software, and involves testing the&#xD;
    internal structure such as logic and data flow, and the unit's function and observable behaviors. Designing and&#xD;
    implementing tests focused on a unit's internal structure rely upon the knowledge of the unit's implementation&#xD;
    (white-box approach). The design and implementation of tests to verify the unit's observable behaviors and functions do&#xD;
    not rely upon a knowledge of the implementation and therefore is known as black-box approach.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Both approaches are used to design and implement the different types of tests (see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/types_of_test_8AB94831.html&quot; guid=&quot;1.6037730846300355E-307&quot;>Technique: Type of&#xD;
    Tests&lt;/a>) needed to successfully and completely test units.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See also &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/test_case_81FD1D9F.html&quot;&#xD;
    guid=&quot;1.3981505661923931E-304&quot;>Guideline: Test Case&lt;/a> for additional information on deriving test cases for unit&#xD;
    test.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;WhiteBox_Test&quot; name=&quot;WhiteBox_Test&quot;>White-Box Test Approach&lt;/a>&lt;a id=&quot;XE_unit_test__white-box_test&quot;&#xD;
    name=&quot;XE_unit_test__white-box_test&quot;>&lt;/a>&lt;a id=&quot;XE_test__white-box_test__of_units&quot;&#xD;
    name=&quot;XE_test__white-box_test__of_units&quot;>&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A white-box test approach should be taken to verify a unit's internal structure. Theoretically, you should test every&#xD;
    possible path through the code, but that is possible only in very simple units. At the very least you should exercise&#xD;
    every &lt;b>decision-to-decision path&lt;/b> (DD-path) at least once because you are then executing all statements at least&#xD;
    once. A decision is typically an if-statement, and a DD-path is a path between two decisions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To get this level of test coverage, it is recommended that you choose test data so that every decision is evaluated in&#xD;
    every possible way.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Use code-coverage tools to identify the code not exercised by your white box testing. Reliability testing should be&#xD;
    done simultaneously with your white-box testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/test_case_81FD1D9F.html&quot;&#xD;
    guid=&quot;1.3981505661923931E-304&quot;>Guideline: Test Case&lt;/a> for additional information&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;BlackBox_Test&quot; name=&quot;BlackBox_Test&quot;>Black-Box Test Approach&lt;/a>&lt;a id=&quot;XE_unit_test__black-box_test&quot;&#xD;
    name=&quot;XE_unit_test__black-box_test&quot;>&lt;/a>&lt;a id=&quot;XE_test__black-box_test__of_units&quot;&#xD;
    name=&quot;XE_test__black-box_test__of_units&quot;>&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The purpose of a black-box test is to verify the unit's specified function and observable behavior without knowledge of&#xD;
    &lt;b>how&lt;/b> the unit implements the function and behavior. Black-box tests focus and rely upon the unit's input and&#xD;
    output.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Deriving unit tests based upon the black-box approach utilizes the input and output arguments of the unit's operations,&#xD;
    and / or output state for evaluation. For example, the operation may include an algorithm (requiring two values as&#xD;
    input and return a third as output), or initiate change in an object's or component's state, such as adding or deleting&#xD;
    a database record.&amp;nbsp; Both must be tested completely. To test an operation, you should derive sufficient test cases&#xD;
    to verify the following:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            an appropriate value was returned by the operation for each valid value used as input&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            an appropriate value was returned by the operation for each invalid value used as input&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            an appropriate output state occurs for each valid input state&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            an appropriate output state occurs for each invalid input state&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    Use code-coverage tools to identify the code not exercised by your white box testing. Reliability testing should be&#xD;
    done simultaneously with your black-box testing.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/test_case_81FD1D9F.html&quot;&#xD;
    guid=&quot;1.3981505661923931E-304&quot;>Guideline: Test Case&lt;/a> for additional information&amp;nbsp;&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
