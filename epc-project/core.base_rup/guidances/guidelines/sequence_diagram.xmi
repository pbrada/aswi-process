<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1zGiQNnmEdmO6L4XMImrsA" name="sequence_diagram,3.211008403369512E-306" guid="_1zGiQNnmEdmO6L4XMImrsA" changeDate="2005-06-21T10:01:55.044-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_sequence_diagram__guidelines_for&quot; name=&quot;XE_sequence_diagram__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In most cases, we use a sequence diagram to illustrate use-case realizations (see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_use_case_realization_E4F713BD.html&quot;&#xD;
    guid=&quot;{87EB094F-095B-4981-ACC3-319B3B298641}&quot;>Work Product: Use-Case Realizations&lt;/a>), i.e. to show how objects&#xD;
    interact to perform the behavior of all or part of a use case. One or more sequence diagrams may illustrate the object&#xD;
    interactions which enact a use case. A typical organization is to have one sequence diagram for the main flow of events&#xD;
    and one sequence diagram for each independent sub-flow of the use case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Sequence diagrams are particularly important to designers because they clarify the roles of objects in a flow and thus&#xD;
    provide basic input for determining class responsibilities and interfaces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Unlike a communication diagram, a sequence diagram includes chronological sequences, but does not include object&#xD;
    relationships. Sequence diagrams and communication diagrams express similar information, but show it in different ways.&#xD;
    Sequence diagrams show the explicit sequence of messages and are better when it is important to visualize the time&#xD;
    ordering of messages. When you are interested in the structural relationships among the instances in an interaction,&#xD;
    use a communication diagram. See &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/communication_diagram_FFFEA1B5.html&quot;&#xD;
    guid=&quot;4.5194432001390347E-305&quot;>Guideline: Communication Diagram&lt;/a> for more information.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;b>&lt;a id=&quot;Contents&quot; name=&quot;Contents&quot;>Contents of Sequence Diagrams&lt;/a>&lt;/b>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You can have objects and actor instances in sequence diagrams, together with messages describing how they interact. The&#xD;
    diagram describes what takes place in the participating objects, in terms of activations, and how the objects&#xD;
    communicate by sending messages to one another. You can make a sequence diagram for each variant of a use case's flow&#xD;
    of events.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturelarge&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;417&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/seqdiag1.gif&quot; width=&quot;672&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A sequence diagram that describes part of the flow of events of the use case &lt;b>Place Local Call&lt;/b> in a simple&#xD;
    Telephone Switch.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_sequence_diagram__objects_in&quot; name=&quot;XE_sequence_diagram__objects_in&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_object__in_sequence_diagram&quot; name=&quot;XE_object__in_sequence_diagram&quot;>&lt;/a>&lt;b>&lt;a id=&quot;Objects&quot;&#xD;
    name=&quot;Objects&quot;>Objects&lt;/a>&lt;/b>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An object is shown as a vertical dashed line called the &quot;lifeline&quot;. The lifeline represents the existence of the object&#xD;
    at a particular time. An object symbol is drawn at the head of the lifeline, and shows the name of the object and its&#xD;
    class underlined, and separated by a colon:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    objectname : classname&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You can use objects in sequence diagrams in the following ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A lifeline can represent an object or its class. Thus, you can use a lifeline to model both class and object&#xD;
        behavior. Usually, however, a lifeline represents all the objects of a certain class.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An object's class can be unspecified. Normally you create a sequence diagram with objects first, and specify their&#xD;
        classes later.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The objects can be unnamed, but you should name them if you want to discriminate different objects of the same&#xD;
        class.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Several lifelines in the same diagram can represent different objects of the same class; but, as stated previously,&#xD;
        the objects should be named that so you can discriminate between the two objects.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A lifeline that represents a class can exist in parallel with lifelines that represent objects of that class. The&#xD;
        object name of the lifeline that represents the class can be set to the name of the class.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Actors&quot; name=&quot;Actors&quot;>Actors&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Normally an actor instance is represented by the first (left-most) lifeline in the sequence diagram, as the invoker of&#xD;
    the interaction. If you have several actor instances in the same diagram, try keeping them either at the left-most, or&#xD;
    the right-most lifelines.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_sequence_diagram__messages_in&quot; name=&quot;XE_sequence_diagram__messages_in&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_message__in_sequence_diagram&quot; name=&quot;XE_message__in_sequence_diagram&quot;>&lt;/a>&lt;a id=&quot;Messages&quot;&#xD;
    name=&quot;Messages&quot;>Messages&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A message is a communication between objects that conveys information with the expectation that activity will ensue; in&#xD;
    sequence diagrams, a message is shown as a horizontal solid arrow from the lifeline of one object to the lifeline of&#xD;
    another object. In the case of a message from an object to itself, the arrow may start and finish on the same lifeline.&#xD;
    The arrow is labeled with the name of the message, and its parameters. The arrow may also be labeled with a sequence&#xD;
    number to show the sequence of the message in the overall interaction. Sequence numbers are often omitted in sequence&#xD;
    diagrams, in which the physical location of the arrow shows the relative sequence.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A message can be unassigned, meaning that its name is a temporary string that describes the overall meaning of the&#xD;
    message and is not the name of an operation of the receiving object. You can later assign the message by specifying the&#xD;
    operation of the message's destination object. The specified operation will then replace the name of the message.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_sequence_diagram__script_in&quot; name=&quot;XE_sequence_diagram__script_in&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;XE_script__in_sequence_diagrams&quot; name=&quot;XE_script__in_sequence_diagrams&quot;>&lt;/a>&lt;a id=&quot;Scripts&quot;&#xD;
    name=&quot;Scripts&quot;>Scripts&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Scripts describe the flow of events textually in a sequence diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You should position the scripts to the left of the lifelines so that you can read the complete flow from top to bottom&#xD;
    (see figure above). You can attach scripts to a certain message, thus ensuring that the script moves with the message.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Distributing Control&quot; name=&quot;Distributing Control&quot;>Distributing Control Flow in Sequence Diagrams&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;b>Centralized control&lt;/b> of a flow of events or part of the flow of events means that a few objects steer the flow by&#xD;
    sending messages to, and receiving messages from other objects. These controlling objects decide the order in which&#xD;
    other objects will be activated in the use case. Interaction among the rest of the objects is very minor or does not&#xD;
    exist.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the &lt;b>Recycling-Machine System,&lt;/b> the use case &lt;b>Print Daily Report&lt;/b> keeps track of - among other things -&#xD;
    the number and type of returned objects, and writes the tally on a receipt. The &lt;b>Report Generator&lt;/b> control object&#xD;
    decides the order in which the sums will be extracted and written.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;334&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_seqd3.gif&quot; width=&quot;385&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The behavior structure of the use case &lt;b>Print Daily Report&lt;/b> is centralized in the &lt;b>Report Generator&lt;/b> control&#xD;
    object.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This is an example of centralized behavior. The control structure is centralized primarily because the different&#xD;
    sub-event phases of the flow of events are not dependent on each other. The main advantage of this approach is that&#xD;
    each object does not have to keep track of the next object's tally. To change the order of the sub-event phases, you&#xD;
    merely make the change in the control object. You can also easily add still another sub-event phase if, for example, a&#xD;
    new type of return item is included. Another advantage to this structure is that you can easily reuse the various&#xD;
    sub-event phases in other use cases because the order of behavior is not built into the objects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Decentralized&lt;/b> &lt;b>control&lt;/b> arises when the participating objects communicate directly with one another, not&#xD;
    through one or more controlling objects.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    In the use case &lt;b>Send Letter&lt;/b> someone mails a letter to another country through a post office. The letter is first&#xD;
    sent to the country of the addressee. In the country, the letter is sent to a specific city. The city, in turn, sends&#xD;
    the letter to the home of the addressee.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturelarge&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;310&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_seqd4.gif&quot; width=&quot;499&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    The behavior structure of the use case &lt;b>Send Letter&lt;/b> is decentralized.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;example&quot;>&#xD;
    The use case behavior is a decentralized flow of events. The sub-event phases belong together. The sender of the letter&#xD;
    speaks of &quot;sending a letter to someone.&quot; He neither needs nor wants to know the details of how letters are forwarded in&#xD;
    countries or cities. (Probably, if someone were mailing a letter within the same country, not all these actions would&#xD;
    occur.)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The type of control used depends on the application. In general, you should try to achieve independent objects, that&#xD;
    is, to delegate various tasks to the objects most naturally suited to perform them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A flow of events with centralized control will have a &quot;fork-shaped&quot; sequence diagram. On the other hand, a&#xD;
    &quot;stairway-shaped&quot; sequence diagram illustrates that the control-structure is decentralized for the participating&#xD;
    objects.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturecenter&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;399&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/md_seqd5.gif&quot; width=&quot;326&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot;>&#xD;
    A centralized control structure in a flow of events produces a &quot;fork-shaped&quot; sequence diagram. A decentralized control&#xD;
    structure produces a &quot;stairway-shaped&quot; sequence diagram.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The behavior structure of a use-case realization most often consists of a mix of centralized and decentralized&#xD;
    behavior.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A decentralized structure is appropriate:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If the sub-event phases are tightly coupled. This will be the case if the participating objects: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Form a part-of or consists-of hierarchy, such as Country - State - City;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Form an information hierarchy, such as CEO - Division Manager - Section Manager;&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Represent a fixed chronological progression (the sequence of sub-event phases will always be performed in&#xD;
                the same order), such as Advertisement - Order - Invoice -Delivery - Payment; or&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Form a conceptual inheritance hierarchy, such as Animal - Mammal - Cat.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If you want to encapsulate, and thereby make abstractions of, functionality. This is good for someone who always&#xD;
        wants to use the whole functionality, because the functionality can become unnecessarily hard to grasp if the&#xD;
        behavior structure is centralized.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A centralized structure is appropriate:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        If the order in which the sub-event phases will be performed is likely to change.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If you expect to insert new sub-event phases.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If you want to keep parts of the functionality reusable as separate pieces.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
