<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_13bBkNnmEdmO6L4XMImrsA" name="events_and_signals,1.800598287887014E-305" guid="_13bBkNnmEdmO6L4XMImrsA" changeDate="2005-06-23T11:15:29.570-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In the real world, things happen, often simultaneously and unpredictably. &quot;Things that happen&quot; are called 'events'.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the context of state machines, events model the occurrence of a stimulus that may trigger a state transition. Events&#xD;
    include signals, calls, the passage of time, or a change in state. Events may be synchronous or asynchronous.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A 'signal' is a kind of event that represents the specification of an asynchronous stimulus between two instances.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Kinds of events&quot; name=&quot;Kinds of events&quot;>Kinds of events&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Events may be external or internal. External events are those that pass between the system and its actors. Internal&#xD;
    events are those which pass among the objects that live within the system. There are four kinds of events: signals,&#xD;
    calls, the passing of time, and a change in state.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Signals&quot; name=&quot;Signals&quot;>Signals&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A signal represents an object that is dispatched (thrown) asynchronously by one object and then received (caught) by&#xD;
    another. Exceptions are an example of a kind of signal.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Signals may have instances, although these instances are not typically modeled explicitly. Signals may be involved in&#xD;
    generalization relationships, enabling the modeling of hierarchies of events.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Signals may have attributes and operations. The attributes of a signal serve as its parameters.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A signal may be sent as the action of a state transition in a state machine or the sending of a message in an&#xD;
    interaction. The execution of an operation can also send signals. When modeling a class or an interface, an important&#xD;
    part of specifying the behavior of the element is specifying the signals that can be sent by its operations. The&#xD;
    relationship between an operation and the events which it can send are modeled using a dependency relationship,&#xD;
    stereotyped as &amp;lt;&amp;lt;send&amp;gt;&amp;gt;.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Call events&quot; name=&quot;Call events&quot;>Call events&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Just as a signal event represents the occurrence of a signal, a call event represents the dispatch of an operation. In&#xD;
    both cases, the event may trigger a state transition in a state machine.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Whereas a signal is an asynchronous event, a call event is, in general, synchronous. This means that when an object&#xD;
    invokes an operation on another object, control passes from the sender to the receiver until the operation is&#xD;
    completed, whereupon control returns to the sender. Modeling a call event is visualized in the same way as a signal&#xD;
    event. In both cases, the event is displayed along with its parameters as the trigger for a state transition.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Although there are no visual cues to distinguish a signal event from a call event, the difference will appear in the&#xD;
    receiver class, as it will declare an operation which handles the call event. In the case of a signal, there will be a&#xD;
    transition in the state machine which is triggered by the signal.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Time events&quot; name=&quot;Time events&quot;>Time and change events&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A time event represents the passage of time. Time events are used to synchronize time-dependent parts of the system&#xD;
    using a common clock mechanism. A change event represents a change in the state of the system or the satisfaction of&#xD;
    some condition.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;sending events&quot; name=&quot;sending events&quot;>Sending and receiving events&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Signal and call events involve at least two objects: a sender and a receiver. When the signal is sent, the sender&#xD;
    dispatches the signal and ten continues upon its flow of control without waiting for a return from the receiver. This&#xD;
    is in contrast with the semantics of the operation call in which the sender waits for the receiver to respond before&#xD;
    resuming its flow of control. Because of this, operations are typically used to represent &quot;blocking&quot; behavior (behavior&#xD;
    which blocks or prevents other things from happening), while signals are used to represent non-blocking behavior.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The act of one object sending a signal to a set of objects is called 'multi-casting', and is represented by sending a&#xD;
    signal to a container which holds a set of receivers. Broadcasting is the act of sending a signal to all objects in a&#xD;
    system, and is represented by sending a signal to an object which represents the system as a whole; this 'system&#xD;
    object' in turn realizes message distribution mechanism which ensure that the signal is sent to all appropriate objects&#xD;
    in the system.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
