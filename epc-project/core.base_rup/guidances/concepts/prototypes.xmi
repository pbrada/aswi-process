<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1NQDNNnmEdmO6L4XMImrsA" name="prototypes,6.334848481235948E-305" guid="_1NQDNNnmEdmO6L4XMImrsA" changeDate="2005-06-29T10:52:18.292-0700" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_prototype__introduction_to&quot; name=&quot;XE_prototype__introduction_to&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;How to Use&quot; name=&quot;How to Use&quot;>How to Use&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Prototypes are used in a directed way to reduce risk. Prototypes can reduce uncertainty surrounding:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The business viability of a product being developed&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The stability or performance of key technology&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Project commitment or funding: building a small proof-of-concept prototype&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The understanding of requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The look and feel of the product, its usability.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A prototype can help to build support for the product by showing something concrete and executable to users, customers&#xD;
    and managers.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The nature and goal of the prototype must remain clear, however, throughout its lifetime. If you don't intend to evolve&#xD;
    the prototype into the real product, don't suddenly assume that because the prototype works it should become the final&#xD;
    product. An exploratory, behavioral prototype, intended to very rapidly try out some user-interface, rarely evolves&#xD;
    into a strong, resilient product.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Types of Prototypes&quot; name=&quot;Types of Prototypes&quot;>Types of Prototypes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You can view prototypes in two ways: what they explore; and how they evolve or what is their outcome.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the context of the first view - what they explore - there are two main kinds of prototypes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A &lt;b>behavioral&lt;/b> prototype, which focuses on exploring specific behavior of the system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A &lt;b>structural&lt;/b> prototype, which explores some architectural or technological concerns.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In the context of the second view - their outcome - there are also two kinds of prototypes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        An &lt;b>exploratory&lt;/b> prototype, which is thrown away when done, also called a throw-away prototype.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An &lt;b>evolutionary&lt;/b> prototype, which gradually evolves to become the real system.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_exploratory_prototype&quot; name=&quot;XE_exploratory_prototype&quot;>&lt;/a>&lt;a id=&quot;XE_prototype__exploratory_prototype&quot;&#xD;
    name=&quot;XE_prototype__exploratory_prototype&quot;>&lt;/a>&lt;a id=&quot;Exploratory Prototypes&quot; name=&quot;Exploratory Prototypes&quot;>Exploratory&#xD;
    Prototypes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An exploratory prototype is designed to be like a small &quot;experiment&quot; to test some key assumption about the project,&#xD;
    either functionality or technology or both. It might be something as small as a few hundred lines of code, created to&#xD;
    test the performance of a key software or hardware component. Or it may be a way of clarifying requirements, a small&#xD;
    prototype developed to see if the developer understands a particular behavioral or technical requirement.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Exploratory prototypes tend to be intentionally &quot;throw-away&quot;, and testing of them tends to be informal. The design of&#xD;
    exploratory prototypes tends to be very informal, and also tends to be the work of one or two developers at most.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_evolutionary_prototype&quot; name=&quot;XE_evolutionary_prototype&quot;>&lt;/a>&lt;a id=&quot;XE_prototype__evolutionary_prototype&quot;&#xD;
    name=&quot;XE_prototype__evolutionary_prototype&quot;>&lt;/a>&lt;a id=&quot;Evolutionary Prototypes&quot;&#xD;
    name=&quot;Evolutionary Prototypes&quot;>Evolutionary Prototypes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Evolutionary prototypes, as their name implies, evolve from one iteration to the next. While not initially production&#xD;
    quality, their code tends to be reworked as the product evolves. In order to keep rework manageable, they tend to be&#xD;
    more formally designed and somewhat formally tested even in the early stages. As the product evolves, testing becomes&#xD;
    formalized, as usually does design.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_behavioral_prototype&quot; name=&quot;XE_behavioral_prototype&quot;>&lt;/a>&lt;a id=&quot;XE_prototype__behavioral_prototype&quot;&#xD;
    name=&quot;XE_prototype__behavioral_prototype&quot;>&lt;/a>&lt;a id=&quot;Behavioral Prototypes&quot; name=&quot;Behavioral Prototypes&quot;>Behavioral&#xD;
    Prototypes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Behavioral prototypes tend to be exploratory prototypes; they do not try to reproduce the architecture of the system to&#xD;
    be developed but instead focus on what the system will do as seen by the users (the &quot;skin&quot;). Frequently, this kind of&#xD;
    prototype is &quot;&lt;b>quick and dirty&lt;/b>,&quot; not built to project standards. For example, Visual Basic may be used as the&#xD;
    prototyping language, while C++ is intended for the development project. Exploratory prototypes are temporary, are done&#xD;
    with minimal effort, and are thrown away once they have served their purpose.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_prototype__structural_prototype&quot; name=&quot;XE_prototype__structural_prototype&quot;>&lt;/a>&lt;a id=&quot;Structural Prototypes&quot;&#xD;
    name=&quot;Structural Prototypes&quot;>Structural Prototypes&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Structural prototypes tend to be evolutionary prototypes; they are more likely to use the infrastructure of the&#xD;
    ultimate system, (the &quot;bones&quot;), and are more likely to evolve into becoming the real system. If the prototype is done&#xD;
    using the &quot;production&quot; language and tool set, there is the added advantage of being able to test the development&#xD;
    environment and let some of the personnel get familiar with new tools and procedures.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
