<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1cmt0tnmEdmO6L4XMImrsA" name="analysis_mechanisms,9.76539014099254E-305" guid="_1cmt0tnmEdmO6L4XMImrsA" changeDate="2005-11-15T22:09:01.415-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a> to Analysis Mechanisms&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An analysis mechanism represents a pattern that constitutes a common solution to a common problem. Analysis mechanisms&#xD;
    may show patterns of structure, patterns of behavior, or both. They are used during analysis to reduce the complexity&#xD;
    of analysis, and to improve consistency by providing designers with a short-hand representation for complex behavior.&#xD;
    Mechanisms allow the analysis effort to focus on translating the functional requirements into software concepts without&#xD;
    bogging-down in the specification of relatively complex behavior needed to support the functionality but not central to&#xD;
    it. Analysis mechanisms often result from the instantiation of one or more &lt;b>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/architectural_pattern_E2E8EB79.html&quot;&#xD;
    guid=&quot;_x7JZRtnmEdmO6L4XMImrsA&quot;>architectural&lt;/a>&lt;/b> or &lt;b>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/analysis_pattern_86D515F0.html&quot; guid=&quot;_x613Q9nmEdmO6L4XMImrsA&quot;>analysis&#xD;
    patterns&lt;/a>.&lt;/b>&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Analysis mechanisms are primarily used to represent 'placeholders' for complex technology in the middle and lower&#xD;
    layers of the architecture. By using the mechanisms as 'placeholders' in the architecture, the architecting effort is&#xD;
    less likely to become distracted by the details of mechanism behavior. As an example, the need to have object lifetimes&#xD;
    span use cases, process lifetimes, or system shutdown and start-up defines the need for object persistence. Persistence&#xD;
    is a particularly complex mechanism, and during analysis we do not want to be distracted by the details of how we are&#xD;
    going to achieve persistence. This gives rise to a 'persistence' analysis mechanism which allows us to speak of&#xD;
    persistent objects and capture the requirements we will have on the persistence mechanism without worrying about what&#xD;
    exactly the persistence mechanism will do or how it will work.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Analysis mechanisms are typically, but not necessarily, unrelated to the problem domain, but instead are &quot;computer&#xD;
    science&quot; concepts; as a result they typically occupy the middle and lower layers of the architecture. They provide&#xD;
    specific behaviors to a domain-related class or subsystem, or correspond to the implementation of cooperation between&#xD;
    classes and/or subsystems. They may be implemented as a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/framework_96F80772.html&quot; guid=&quot;_yJmE89nmEdmO6L4XMImrsA&quot;>framework&lt;/a>,&#xD;
    Examples include mechanisms to handle persistence, inter-process communication, error or fault handling, notification,&#xD;
    and messaging, to name a few.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, as more &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/termdefinitions/analysis_pattern_86D515F0.html&quot;&#xD;
    guid=&quot;_x613Q9nmEdmO6L4XMImrsA&quot;>&lt;b>analysis patterns&lt;/b>&lt;/a> are established in various domains, the partial or complete&#xD;
    instantiation of these in analysis mechanisms will lead to these mechanisms appearing in the upper layers of the&#xD;
    architecture.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_analysis_mechanisms__examples_of&quot; name=&quot;XE_analysis_mechanisms__examples_of&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Examples of Analysis Mechanisms&quot; name=&quot;Examples of Analysis Mechanisms&quot;>Examples of Analysis Mechanisms&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Persistency&lt;/b>&lt;br />&#xD;
        &lt;br />&#xD;
         For all classes whose instances may become persistent, we need to identify: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;b>Granularity&lt;/b>: Range of size of the objects to keep persistent&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Volume&lt;/b>: Number of objects to keep persistent&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Duration&lt;/b>: How long does the object typically need to be kept?&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Retrieval mechanism&lt;/b>: How is a given object uniquely identified and retrieved?&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Update frequency&lt;/b>: Are the objects more or less constant; are they permanently updated?&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Reliability&lt;/b>: Shall the objects survive a crash of the process; the processor; or the whole system?&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Inter-process Communication&lt;/b>&lt;br />&#xD;
        &lt;br />&#xD;
         For all model elements which need to communicate with components or services executing in other processes or&#xD;
        threads, we need to identify: &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                &lt;b>Latency&lt;/b>: How fast must processes communicate with another?&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Synchronicity&lt;/b>: Asynchronous communication&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                &lt;b>Size of message&lt;/b>: A spectrum might be more appropriate than a single number.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Protocol, flow control, buffering, and so on.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Other typical mechanisms include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Message routing&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Process control and synchronization&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Transaction management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Information Exchange&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Security&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Redundancy&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Error reporting&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Format conversion&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;XE_analysis_mechanisms__describing&quot; name=&quot;XE_analysis_mechanisms__describing&quot;>&lt;/a>&lt;a&#xD;
    id=&quot;Describing Analysis Mechanisms&quot; name=&quot;Describing Analysis Mechanisms&quot;>Describing Analysis Mechanisms&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The process for describing analysis mechanisms is:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;b>Collect all analysis mechanisms in a list&lt;br />&#xD;
        &lt;br />&#xD;
        &lt;/b> The same analysis mechanism may appear under several different names across different use-case realizations,&#xD;
        or different designers. For example, &lt;b>storage&lt;/b>, &lt;b>persistency&lt;/b>, &lt;b>database&lt;/b>, and &lt;b>repository&lt;/b>&#xD;
        might all refer to a persistency mechanism. Or &lt;b>inter-process communication&lt;/b>, &lt;b>message passing&lt;/b>, or&#xD;
        &lt;b>remote invocation&lt;/b> might all refer to and inter-process communication mechanism.&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Draw a map of the client classes to the analysis mechanisms&lt;/b>&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;p align=&quot;center&quot;>&#xD;
            &lt;img height=&quot;296&quot; alt=&quot;Diagram is described in the content.&quot; src=&quot;resources/ac_amech.gif&quot; width=&quot;332&quot; />&#xD;
        &lt;/p>&#xD;
        &lt;p class=&quot;picturetext&quot;>&#xD;
            The classes and subsystems identified need to be mapped onto the identified Analysis Mechanisms: the arrows&#xD;
            indicate that the class utilizes the mechanism. It is not uncommon for a client class to require the services&#xD;
            of several mechanisms.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Identify Characteristics of the Analysis Mechanisms&lt;/b>&lt;br />&#xD;
        &lt;br />&#xD;
         To discriminate across a range of potential designs, identify the key characteristics used to qualify each&#xD;
        analysis mechanism. These characteristics are part functionality, and part size and performance.&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li style=&quot;LIST-STYLE-TYPE: none&quot;>&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;b>Model Using Collaborations&lt;/b>&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            Having identified and named the analysis mechanisms, they should, ultimately, be modeled through the&#xD;
            collaboration of a 'society of classes' (see [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
            href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#BOO98&quot;&#xD;
            guid=&quot;7.755968586980351E-308&quot;>BOO98&lt;/a>]), some of which do not directly deliver application functionality, but&#xD;
            exist only to support it. Very often, these 'support classes' are located in the middle or lower layers of a&#xD;
            layered architecture, thus providing a common support service to all application level classes.&#xD;
        &lt;/p>&#xD;
        &lt;p>&#xD;
            If the identified mechanism is common enough, perhaps &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
            href=&quot;./../../../core.base_rup/guidances/termdefinitions/pattern_E76690AA.html&quot;&#xD;
            guid=&quot;_yPtUDNnmEdmO6L4XMImrsA&quot;>&lt;b>patterns&lt;/b>&lt;/a> exist from which the mechanism can be instantiated - by&#xD;
            binding existing classes and implementing new ones as required by the pattern. An analysis mechanism so&#xD;
            produced will be abstract, and require further refinement through design and implementation.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    Analysis mechanisms are documented in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Artifact: Software Architecture Document&lt;/a>. As the software&#xD;
    architecture matures, the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Artifact: Software Architecture Document&lt;/a> includes a relationship (or&#xD;
    mapping) of analysis mechanisms to design mechanisms to implementation mechanisms, and the associated rationale for&#xD;
    these choices.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
