<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1aOIMtnmEdmO6L4XMImrsA" name="software_architecture,3.066252221588648E-305" guid="_1aOIMtnmEdmO6L4XMImrsA" changeDate="2005-11-15T21:58:36.326-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;XE_architecture__introduction_to&quot; name=&quot;XE_architecture__introduction_to&quot;>&lt;/a>&lt;a id=&quot;Introduction&quot;&#xD;
    name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Software architecture is a concept that is easy to understand, and that most engineers intuitively feel, especially&#xD;
    with a little experience, but it is hard to define precisely. In particular, it is difficult to draw a sharp line&#xD;
    between design and architecture-architecture is one aspect of design that concentrates on some specific features.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In &lt;i>An Introduction to Software Architecture&lt;/i>, David Garlan and Mary Shaw suggest that software architecture is a&#xD;
    level of design concerned with issues: &quot;Beyond the algorithms and data structures of the computation; designing and&#xD;
    specifying the overall system structure emerges as a new kind of problem. Structural issues include gross organization&#xD;
    and global control structure; protocols for communication, synchronization, and data access; assignment of&#xD;
    functionality to design elements; physical distribution; composition of design elements; scaling and performance; and&#xD;
    selection among design alternatives.&quot; [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#GAR93&quot; guid=&quot;7.755968586980351E-308&quot;>GAR93&lt;/a>]&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    But there is more to architecture than just structure; the IEEE Working Group on Architecture defines it as &quot;the&#xD;
    highest-level concept of a system &lt;b>in its environment&lt;/b>&quot; [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#IEP1471&quot; guid=&quot;7.755968586980351E-308&quot;>IEP1471&lt;/a>]. It&#xD;
    also encompasses the &quot;fit&quot; with system integrity, with economical constraints, with aesthetic concerns, and with style.&#xD;
    It is not limited to an inward focus, but takes into consideration the system as a whole in its user environment and&#xD;
    its development environment - an outward focus.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the RUP, the architecture of a software system (at a given point) is the organization or structure of the system's&#xD;
    significant components interacting through interfaces, with components composed of successively smaller components and&#xD;
    interfaces.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Architecture Description&quot; name=&quot;Architecture Description&quot;>Architecture Description&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    To speak and reason about software architecture, you must first define an architectural representation, a way of&#xD;
    describing important aspects of an architecture. In the RUP, this description is captured in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Software Architecture Document&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Views&quot; name=&quot;Architectural Views&quot;>Architectural Views&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    We have chosen to represent software architecture in multiple &lt;b>architectural views&lt;/b>. Each architectural view&#xD;
    addresses some specific set of concerns, specific to stakeholders in the development process: users, designers,&#xD;
    managers, system engineers, maintainers, and so on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The views capture the major structural design decisions by showing how the software architecture is decomposed into&#xD;
    components, and how components are connected by &lt;b>connectors&lt;/b> to produce useful &lt;b>forms&lt;/b> [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#PW92&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>PW92&lt;/a>]. These design choices must be tied to the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/requirements_62E28784.html&quot; guid=&quot;4.582668643506599E-305&quot;>Requirements&lt;/a>,&#xD;
    functional, and supplementary, and other constraints. But these choices in turn put further &lt;b>constraints&lt;/b> on the&#xD;
    requirements and on future design decisions at a lower level.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;A Typical Set of Architectural Views&quot; name=&quot;A Typical Set of Architectural Views&quot;>A Typical Set of Architectural&#xD;
    Views&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Architecture is represented by a number of different architectural views, which in their essence are extracts&#xD;
    illustrating the &quot;architecturally significant&quot; elements of the models. In the RUP, you start from a typical set of&#xD;
    views, called the &quot;4+1 view model&quot; [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#KRU95&quot; guid=&quot;7.755968586980351E-308&quot;>KRU95&lt;/a>]. It is&#xD;
    composed of:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/concepts/use-case_view_11F15731.html&quot;&#xD;
        guid=&quot;6.820983346069146E-305&quot;>&lt;b>Use-Case View&lt;/b>,&lt;/a> which contains use cases and scenarios that encompasses&#xD;
        architecturally significant behavior, classes, or technical risks. It is a subset of the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_usecase_model_EF15E534.html&quot;&#xD;
        guid=&quot;{9C66F2EC-EDEB-4369-9AFB-04B9E7CBCB8E}&quot;>Use-Case Model&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/logical_view_C135365E.html&quot;&#xD;
        guid=&quot;6.901347907565747E-305&quot;>Logical View&lt;/a>, which contains the most important &lt;a&#xD;
        class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
        guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>design classes&lt;/a> and their organization into &lt;a&#xD;
        class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_package_8376BC8E.html&quot;&#xD;
        guid=&quot;{80CC5437-F481-487B-A69B-957D9D236D8D}&quot;>packages&lt;/a> and &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_design_subsystem_1A8D169B.html&quot;&#xD;
        guid=&quot;{A3C60B25-9780-4BFA-81AF-C1AD40D8A833}&quot;>subsystems&lt;/a>, and the organization of these packages and subsystems&#xD;
        into &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot;&#xD;
        guid=&quot;3.801315327549898E-305&quot;>layers&lt;/a>. It contains also some &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_use_case_realization_E4F713BD.html&quot;&#xD;
        guid=&quot;{87EB094F-095B-4981-ACC3-319B3B298641}&quot;>use case realizations&lt;/a>. It is a subset of the &lt;a&#xD;
        class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
        guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/concepts/implementation_view_E373E3B6.html&quot;&#xD;
        guid=&quot;4.693519701160983E-305&quot;>&lt;b>Implementation View&lt;/b>,&lt;/a> which contains an overview of the &lt;a&#xD;
        class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
        guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Implementation Model&lt;/a> and its organization in terms of modules&#xD;
        into packages and layers. The allocation of packages and classes (from the Logical View) to the packages and&#xD;
        modules of the Implementation View is also described. It is a subset of the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_implementation_model_5858DB65.html&quot;&#xD;
        guid=&quot;{157E9B67-C619-410D-A927-F2CD217BF8FE}&quot;>Implementation Model&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/process_view_E3DD0B09.html&quot;&#xD;
        guid=&quot;6.45284088262517E-306&quot;>Process View&lt;/a>, which contains the description of the tasks (process and threads)&#xD;
        involved, their interactions and configurations, and the allocation of design objects and classes to tasks. This&#xD;
        view need only be used if the system has a significant degree of &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/guidances/concepts/concurrency_EE2E011A.html&quot; guid=&quot;3.5787175388799096E-305&quot;>Concurrency&lt;/a>.&#xD;
        In RUP, it is a subset of the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
        guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/deployment_view_64CB74A6.html&quot;&#xD;
        guid=&quot;2.8416696002928195E-305&quot;>Deployment View&lt;/a>, which contains the description of the various physical nodes&#xD;
        for the most typical platform configurations, and the allocation of tasks (from the Process View) to the physical&#xD;
        nodes. This view need only be used if the system is distributed. It is a subset of the &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_deployment_model_57DF1DF5.html&quot;&#xD;
        guid=&quot;{5981B6BE-2FD1-4984-AA94-2F7428439BA6}&quot;>Deployment Model&lt;/a>.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The architectural views are documented in a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Software Architecture Document&lt;/a>. You can envision additional views to&#xD;
    express different special concerns: user-interface view, security view, data view, and so on. For simple systems, you&#xD;
    may omit some of the views contained in the 4+1 view model.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;a id=&quot;Architectural Focus&quot; name=&quot;Architectural Focus&quot;>Architectural Focus&lt;/a>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Although the views above could represent the whole design of a system, the architecture concerns itself only with some&#xD;
    specific aspects:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The &lt;b>structure&lt;/b> of the model - the organizational patterns, for example, &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot; guid=&quot;3.801315327549898E-305&quot;>Layering&lt;/a>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>essential elements&lt;/b> - critical &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_usecase_A5D30E62.html&quot; guid=&quot;{B1526BC5-E346-42CB-A08A-3C0D7F382407}&quot;>use&#xD;
        cases&lt;/a>, main &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_design_class_B33BD5E5.html&quot;&#xD;
        guid=&quot;{952A9CE9-D5A3-43AC-980D-0B9298F3872E}&quot;>classes&lt;/a>, common mechanisms, and so on, as opposed to all the&#xD;
        elements present in the model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        A few &lt;b>key scenarios&lt;/b> showing the main control flows throughout the system.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>services&lt;/b>, to capture modularity, optional features, product-line aspects.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In essence, architectural views are &lt;b>abstractions&lt;/b>&lt;i>,&lt;/i> or simplifications, of the entire design, in which&#xD;
    important characteristics are made more visible by leaving details aside. These characteristics are important when&#xD;
    reasoning about:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        System evolution-going to the next development cycle.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Reuse of the architecture, or parts of it, in the context of a product line.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Assessment of supplementary qualities, such as performance, availability, portability, and safety.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Assignment of development work to teams or subcontractors.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Decisions about including off-the-shelf components.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Insertion in a wider system.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Patterns&quot; name=&quot;Architectural Patterns&quot;>Architectural Patterns&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/guidances/termdefinitions/architectural_pattern_E2E8EB79.html&quot;&#xD;
    guid=&quot;_x7JZRtnmEdmO6L4XMImrsA&quot;>&lt;b>Architectural patterns&lt;/b>&lt;/a> are ready-made forms that solve recurring&#xD;
    architectural problems. An &lt;b>architectural framework&lt;/b> or an &lt;b>architectural infrastructure&lt;/b> (middleware) is a&#xD;
    set of components on which you can build a certain kind of architecture. Many of the major architectural difficulties&#xD;
    should be resolved in the framework or in the infrastructure, usually targeted to a specific domain: command and&#xD;
    control, MIS, control system, and so on.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Examples of Architectural Patterns&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#BUS96&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>BUS96&lt;/a>] groups architectural patterns according to the characteristics of the systems&#xD;
    in which they are most applicable, with one category dealing with more general structuring issues. The table shows the&#xD;
    categories presented in [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#BUS96&quot; guid=&quot;7.755968586980351E-308&quot;>BUS96&lt;/a>] and the&#xD;
    patterns they contain.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;col1&quot; width=&quot;50%&quot;>&#xD;
                    Category&#xD;
                &lt;/th>&#xD;
                &lt;th id=&quot;col2&quot; width=&quot;50%&quot;>&#xD;
                    Pattern&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row2&quot; align=&quot;left&quot; headers=&quot;col1&quot; width=&quot;50%&quot; rowspan=&quot;3&quot;>&#xD;
                    Structure&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Layers&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Pipes and Filters&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Blackboard&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row3&quot; align=&quot;left&quot; headers=&quot;col1&quot; width=&quot;50%&quot;>&#xD;
                    Distributed Systems&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row3 col2&quot; width=&quot;50%&quot;>&#xD;
                    Broker&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row4&quot; align=&quot;left&quot; headers=&quot;col1&quot; width=&quot;50%&quot; rowspan=&quot;2&quot;>&#xD;
                    Interactive Systems&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row4 col2&quot; width=&quot;50%&quot;>&#xD;
                    Model-View-Controller&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row4 col2&quot; width=&quot;50%&quot;>&#xD;
                    Presentation-Abstraction-Control&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row5&quot; align=&quot;left&quot; headers=&quot;col1&quot; width=&quot;50%&quot; rowspan=&quot;2&quot;>&#xD;
                    Adaptable Systems&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row5 col2&quot; width=&quot;50%&quot;>&#xD;
                    Reflection&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row5 col2&quot; width=&quot;50%&quot;>&#xD;
                    Microkernel&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    Two of these are presented in more detail here, to clarify these ideas; for a complete treatment see [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#BUS96&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>BUS96&lt;/a>]. Patterns are presented in the following widely used form:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Pattern name&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Context&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Problem &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Forces describing different problem aspects that should be considered&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Solution &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Rationale&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Resulting context&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Examples&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h5>&#xD;
    Pattern Name&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;i>Layers&lt;/i>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Context&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A large system that requires decomposition.&#xD;
&lt;/p>&#xD;
&lt;h5>&#xD;
    Problem&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    A system which must handle issues at different levels of abstraction.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> For&#xD;
    example: hardware control issues, common services issues and domain-specific issues. It would be extremely undesirable&#xD;
    to write vertical components that handle issues at all levels. The same issue would have to be handled (possibly&#xD;
    inconsistently) multiple times in different components.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        Forces&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            Parts of the system should be replaceable.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Changes in components should not ripple.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Similar responsibilities should be grouped together.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            Size of components-complex components may have to be decomposed&lt;font size=&quot;3&quot;>.&lt;/font>&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;h5>&#xD;
    Solution&#xD;
&lt;/h5>&#xD;
&lt;p>&#xD;
    Structure the systems into groups of components that form layers on top of each other. Make upper layers use services&#xD;
    of the layers below only (never above). Try not to use services other than those of the layer directly below (don't&#xD;
    skip layers unless intermediate layers would only add pass-through components).&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        Examples:&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        1. Generic Layers&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;center&quot;>&#xD;
        &lt;img height=&quot;313&quot; alt=&quot;Diagram is described in the content.&quot; src=&quot;resources/layers.gif&quot; width=&quot;508&quot; border=&quot;0&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        A strict layered architecture states that design elements (classes, packages, subsystems) only use the services of&#xD;
        the layer below them.&amp;nbsp; Services can include event-handling, error-handling, database access, and so forth. It&#xD;
        contains more palpable mechanisms, as opposed to raw operating system level calls documented in the bottom layer.&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        2. Business System Layers&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        &lt;img height=&quot;398&quot; alt=&quot;Diagram is described in the content.&quot; src=&quot;resources/layers2.gif&quot; width=&quot;615&quot; border=&quot;0&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        The above diagram shows another layering example, where there are vertical application-specific layers, and&#xD;
        horizontal, infrastructure layers. Note that the goal is to have very short business &quot;stovepipes&quot; and to leverage&#xD;
        commonality across applications.&lt;span style=&quot;mso-spacerun: yes&quot;>&amp;nbsp;&lt;/span> If not, you may have multiple people&#xD;
        solving the same problem, potentially differently.&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        See &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/layering_FCCD1BDA.html&quot;&#xD;
        guid=&quot;4.458864982057142E-306&quot;>Guideline: Layering&lt;/a> for more discussion on this pattern.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h5 align=&quot;left&quot;>&#xD;
    Pattern Name&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    &lt;b>&lt;i>Blackboard&lt;/i>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;h5 align=&quot;left&quot;>&#xD;
    Context&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    A domain in which no closed (algorithmic) approach to solving a problem is known or feasible. Examples are AI systems,&#xD;
    voice recognition, and surveillance systems.&#xD;
&lt;/p>&#xD;
&lt;h5 align=&quot;left&quot;>&#xD;
    Problem&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    Multiple problem-solving agents (knowledge agents) must cooperate to solve a problem that cannot be solved by any of&#xD;
    the individual agents. The results of the work of the individual agents must be accessible to all the other agents so&#xD;
    they can evaluate whether they can contribute to finding a solution and post results of their work.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        Forces&#xD;
    &lt;/p>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            &lt;p align=&quot;left&quot;>&#xD;
                Sequence in which knowledge agents can contribute to solving the problem is not deterministic and may&#xD;
                depend on problem solving strategies.&#xD;
            &lt;/p>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;p align=&quot;left&quot;>&#xD;
                Input from different agents (results or partial solutions) may have different representations.&#xD;
            &lt;/p>&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;p align=&quot;left&quot;>&#xD;
                Agents do not know of each other's existence directly but can evaluate each other's posted contributions.&#xD;
            &lt;/p>&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;h5 align=&quot;left&quot;>&#xD;
    Solution&#xD;
&lt;/h5>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    A number of Knowledge Agents have access to a shared data store called the Blackboard. The blackboard provides an&#xD;
    interface to inspect and update its content. The Control module/object activates the agents following some strategy.&#xD;
    Upon activation an agent inspects that blackboard to see if it can contribute to solving the problem. If the agent&#xD;
    determines that it can contribute, the control object can allow the agents to put its partial (or final) solution on&#xD;
    the board.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        Example:&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;center&quot;>&#xD;
        &lt;img height=&quot;264&quot; alt=&quot;Diagram is described in the content.&quot; src=&quot;resources/blkbd.gif&quot; width=&quot;464&quot; border=&quot;0&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p align=&quot;left&quot;>&#xD;
        This shows the structural or static view modeled using UML. This would be part of a parameterized collaboration,&#xD;
        which is then bound to actual parameters to instantiate the pattern.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Style&quot; name=&quot;Architectural Style&quot;>Architectural Style&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A software architecture, or only an architectural view, may have an attribute called &lt;b>architectural style&lt;/b>, which&#xD;
    reduces the set of possible forms to choose from, and imposes a certain degree of uniformity to the architecture. The&#xD;
    style may be defined by a set of patterns, or by the choice of specific components or connectors as the basic building&#xD;
    blocks. For a given system, some of the style can be captured as part of the architectural description in an&#xD;
    &lt;b>architecture style guide&lt;/b>-provided through the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_project_specific_guidelines_8DC8DA32.html&quot;&#xD;
    guid=&quot;{E5501201-7EE6-4243-AE91-73880FF76FC1}&quot;>Project-Specific Guidelines&lt;/a> work product in the RUP. Style plays a&#xD;
    major part in the understandability and integrity of the architecture.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Blueprints&quot; name=&quot;Architectural Blueprints&quot;>Architectural Blueprints&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The graphical depiction of an architectural view is called an &lt;b>architectural blueprint&lt;/b>. For the various views&#xD;
    described above, the blueprints are composed of the following diagrams from the Unified Modeling Language [&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../core.base_rup/customcategories/references_56F06DFD.html#UML01&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>UML01&lt;/a>]:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/logical_view_C135365E.html&quot;&#xD;
        guid=&quot;6.901347907565747E-305&quot;>Logical View&lt;/a>. Class diagrams, state machines, and object diagrams&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/process_view_E3DD0B09.html&quot;&#xD;
        guid=&quot;6.45284088262517E-306&quot;>Process View&lt;/a>. Class diagrams and object diagrams (encompassing task-processes and&#xD;
        threads)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/implementation_view_E373E3B6.html&quot;&#xD;
        guid=&quot;4.693519701160983E-305&quot;>Implementation View&lt;/a>. Component diagrams&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/deployment_view_64CB74A6.html&quot;&#xD;
        guid=&quot;2.8416696002928195E-305&quot;>Deployment View&lt;/a>. Deployment diagrams&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/use-case_view_11F15731.html&quot;&#xD;
        guid=&quot;6.820983346069146E-305&quot;>Use-Case View&lt;/a>. Use-case diagrams depicting use cases, actors, and ordinary design&#xD;
        classes; sequence diagrams depicting design objects and their collaboration&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;The Architecting Process&quot; name=&quot;The Architecting Process&quot;>The Architecting Process&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In the RUP, the architecture is primarily an outcome of the &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/capabilitypatterns/analysis_design_49725AC4.html&quot;&#xD;
    guid=&quot;{002674F9-6511-4D15-8623-B761D8C48986}&quot;>analysis &amp;amp; design workflow&lt;/a>. As the project reenacts this&#xD;
    workflow, iteration after iteration, the architecture evolves to become refined and polished. As each iteration&#xD;
    includes integration and test, the architecture is quite robust by the time the product is delivered. This architecture&#xD;
    is a main focus of the iterations of the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/customcategories/elaboration_6A203A50.html&quot; guid=&quot;_-kFhcCVuEdqSZ9OimJ-AzA&quot;>Elaboration&lt;/a> phase,&#xD;
    at the end of which the architecture is normally baselined.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
