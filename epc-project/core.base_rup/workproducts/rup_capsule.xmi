<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_1rDZgNnmEdmO6L4XMImrsA" name="rup_capsule,{4423FCE1-FF59-4C8E-A6C4-AA4B13CB3250}" guid="_1rDZgNnmEdmO6L4XMImrsA" changeDate="2005-11-15T16:52:45.341-0800" version="7.1.0">
  <mainDescription>&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>Capsules&lt;/b> represent a specific pattern of class structure and composition which has proven useful in modeling and&#xD;
    designing systems which have a high degree of concurrency. Using a capsule as a short-hand notation for a specific,&#xD;
    proven design pattern makes design easier and less error-prone.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A capsule is represented as a Class, stereotyped &lt;b>&amp;lt;&amp;lt;capsule&amp;gt;&amp;gt;&lt;/b>. A capsule is a composite element, as&#xD;
    depicted in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;279&quot; alt=&quot;Diagram described in accompanying text.&quot; src=&quot;resources/ar_cpsl3.gif&quot; width=&quot;492&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Capsule Composition&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    As noted above, a capsule may have ports, and may &quot;contain&quot; passive classes and/or sub-capsules. It may also have a&#xD;
    state machine which completely describes the behavior of the capsule. A specific taxonomy of capsules and various ways&#xD;
    in which they can be used are discussed in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/capsule_7077C999.html&quot; guid=&quot;7.026940817483919E-306&quot;>Guideline: Capsule&lt;/a>.&#xD;
&lt;/p></mainDescription>
  <representationOptions>UML Representation: Class, stereotyped as &amp;lt;&amp;lt;capsule&amp;gt;&amp;gt;. Note that this representation is based on UML 1.5&#xD;
notation. Much of this can be represented in UML 2.0 using the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
href=&quot;./../../core.base_rup/guidances/concepts/structured_class_FF8DB16F.html&quot; guid=&quot;1.1994826813129747E-304&quot;>Concept: Structured&#xD;
Class&lt;/a>.&amp;nbsp; Refer to &lt;a class=&quot;elementLink&quot;&#xD;
href=&quot;./../../core.base_rup/guidances/supportingmaterials/differences_between_uml_1_x_and_uml_2_0_CA70F2E6.html&quot;&#xD;
guid=&quot;4.792914878943572E-306&quot;>Differences Between UML 1.x and UML 2.0&lt;/a> for more information. &#xD;
&lt;p>&#xD;
    A capsule is a composite element, as depicted in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;279&quot; alt=&quot;composite element diagram&quot; src=&quot;resources/ar_cpsl3.gif&quot; width=&quot;492&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Capsule Composition&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A capsule may have ports, and may &quot;contain&quot; passive classes and/or sub-capsules. It may also have a state machine which&#xD;
    completely describes the behavior of the capsule. A specific taxonomy of capsules and various ways in which they can be&#xD;
    used are discussed in &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../core.base_rup/guidances/guidelines/capsule_7077C999.html&quot;&#xD;
    guid=&quot;7.026940817483919E-306&quot;>Guideline: Capsule&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3 class=&quot;reactive&quot;>&#xD;
    &lt;a id=&quot;Properties&quot; name=&quot;Properties&quot;>Properties&lt;/a> &lt;a href=&quot;#Top&quot;>&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>A capsule encapsulates a thread of control.&lt;/b> A capsule is an abstraction of an independent thread of control in&#xD;
    the system; it is the primary unit of concurrency in the system. Additional isolation of threads of control may be done&#xD;
    through the use of operating system process and threads, by mapping capsules to specific operating system processes and&#xD;
    threads. Messages to the capsule arrive via a port, and are processed sequentially; if the capsule instance is busy,&#xD;
    messages are queued. Capsules enforce run-to-completion semantics, so that when an event is received, it is completely&#xD;
    processed regardless of the number or priority of other events arriving.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>A capsule interacts with its surroundings through ports.&lt;/b> A port is a &lt;b>signal-based&lt;/b> boundary object; it&#xD;
    mediates the interaction of the capsule with the outside world. A port implements a specific interface and may be&#xD;
    dependent on a specific interface. A capsule cannot have operations or public parts other than ports, which are its&#xD;
    exclusive means of interaction with the external world.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>Each port plays a particular role in a collaboration&lt;/b>. The collaboration describes how the capsule interacts with&#xD;
    other objects. To capture the complex semantics of these interactions, ports are associated with a &lt;b>protocol&lt;/b> that&#xD;
    defines the valid flow of information (signals) between connected ports of capsules. The protocol captures the&#xD;
    contractual obligations that exist between capsules. By forcing capsules to communicate solely through ports, it is&#xD;
    possible to fully de-couple the internal implementations of the capsule from the environment surrounding the capsule.&#xD;
    This makes capsules highly reusable.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>A simple capsule's functionality is realized directly the capsule's state machine.&lt;/b> More complex capsules combine&#xD;
    the state machine with an &lt;b>internal&lt;/b> network of collaborating &lt;b>sub-capsules&lt;/b> joined by connectors. These&#xD;
    sub-capsules are capsules in their own right, and can themselves be decomposed into sub-capsules. This type of&#xD;
    decomposition can be carried to whatever depth is necessary, allowing modeling of arbitrarily complex structures with&#xD;
    just this basic set of structural modeling constructs. The state machine (which is optional for composite capsules),&#xD;
    the sub-capsules, and their connections network represent parts of the &lt;i>implementation&lt;/i> of the capsule and are&#xD;
    hidden from external observers.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    &lt;b>A capsule may be a composite element.&lt;/b> Capsules may be composed of other capsules and passive classes. Capsules&#xD;
    and passive classes are joined together by connectors or links in a collaboration; this collaboration defines the&#xD;
    'structure' of the capsule, and so is termed a 'specification collaboration'. A capsule may have a state machine that&#xD;
    can send and receive signals via the end ports of the capsule and that has control over certain elements of the&#xD;
    internal structure. Hence, this state machine may be regarded as implementing reflective behavior, that is, behavior&#xD;
    that controls the operation of the capsule itself.&#xD;
&lt;/p>&#xD;
&lt;h4 class=&quot;reactive&quot;>&#xD;
    &lt;a id=&quot;Ports&quot; name=&quot;Ports&quot;>Ports&lt;/a>&amp;nbsp;&lt;a href=&quot;#Top&quot;>&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Ports are objects whose purpose is to act as boundary objects for a capsule instance. They are &quot;owned&quot; by the capsule&#xD;
    instance in the sense that they are created along with their capsule and destroyed when the capsule is destroyed. Each&#xD;
    port has its identity and state that are distinct from the identity and state of their owning capsule instance (to the&#xD;
    same extent that any part is distinct from its container).&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Although ports are boundary objects that act as interfaces, they do not map directly to UML interfaces. A UML interface&#xD;
    is purely a behavioral thing - it has no implementation structure. A port, on the other hand, includes both structure&#xD;
    and behavior. It is a composite part of the structure of the capsule, not simply a constraint on its behavior. It&#xD;
    realizes the architectural pattern that we might call &quot;manifest interface&quot;.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    In UML, we model a port as a class with the &amp;lt;&amp;lt;&lt;i>port&lt;/i>&amp;gt;&amp;gt; stereotype. As noted earlier, the type of a&#xD;
    port is defined by the protocol role played by that port. Since protocol roles are abstract classes, the actual class&#xD;
    corresponding to this instance is one that &lt;b>implements&lt;/b> the protocol role associated with the port. In UML the&#xD;
    relationship between the port and the protocol role is referred to as a &lt;b>realizes relationship&lt;/b>. The notation for&#xD;
    this is a dashed line with a solid triangular arrowhead on the specification end. It is a form of generalization&#xD;
    whereby the source element - the port - inherits only the behavior specification of the target - the protocol role -&#xD;
    but not its structure.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A capsule is in a composition relationship with its ports. If the multiplicity of the target end of this relationship&#xD;
    is greater than one, it means that multiple instances of the port exist at run time, each participating in a separate&#xD;
    instance of the protocol. If the multiplicity is a range of values, it means that the number of ports can vary at run&#xD;
    time and that ports can be dynamically created and destroyed (possibly subject to constraints).&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;161&quot; alt=&quot;capsule diagram showing ports&quot; src=&quot;resources/ar_cpsl4.gif&quot; width=&quot;492&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Ports, protocols, and protocol roles&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    The above figure shows an example of a single port named b belonging to capsule class CapsuleClassA. This port realizes&#xD;
    the master role of the protocol defined by protocol class ProtocolA. Note that the actual port class, PortClassX, being&#xD;
    an implementation class that may vary from implementation to implementation, is normally not of interest to the modeler&#xD;
    until the implementation stage. Instead, the information that &lt;i>is&lt;/i> of interest is the protocol role that this port&#xD;
    implements. For this reason and also for reasons of notational convenience, the notation shown in Figure 1 is not&#xD;
    normally used and is replaced by the more compact form described in the following section.&#xD;
&lt;/p>&#xD;
&lt;h5 class=&quot;reactive&quot;>&#xD;
    Notation&#xD;
&lt;/h5>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    In class diagrams, the ports of a capsule are listed in a special labeled list compartment as illustrated. The&#xD;
    &lt;b>ports&lt;/b> list compartment normally appears &lt;b>after&lt;/b> the attribute and operator list compartments. This notation&#xD;
    takes advantage of the UML feature that allows the addition of specific named compartments.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;126&quot; alt=&quot;class diagram for ports&quot; src=&quot;resources/ar_cpsl5.gif&quot; width=&quot;174&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Port notation - class diagram representation&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    All external ports (relay ports and public end ports) have public visibility while internal ports have protected&#xD;
    visibility (e.g., port b2). The protocol role (type) of a port is normally identified by a pathname since protocol role&#xD;
    names are unique only within the scope of a given protocol. For example, port b plays the master role defined in the&#xD;
    protocol class called ProtocolA. For the very frequent case of binary protocols, a simpler notational convention is&#xD;
    used: a suffix tilde symbol (&quot;~&quot;) is used to identify the conjugated protocol role (e.g., port b2) while the base role&#xD;
    name is implicit with no special annotation (e.g., port b1). Ports with a multiplicity other than 1 have the&#xD;
    multiplicity factor included between square brackets. For example, port b1[3] has a multiplicity factor of exactly 3&#xD;
    whereas a port designated by b5[0..2] has a variable number of instances not exceeding 2.&#xD;
&lt;/p>&#xD;
&lt;h3 class=&quot;reactive&quot;>&#xD;
    &lt;a id=&quot;Connectors&quot; name=&quot;Connectors&quot;>Connectors&lt;/a> &lt;a href=&quot;#Top&quot;>&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A connector represents a communication channel that provides the transmission facilities for supporting a particular&#xD;
    signal-based protocol. A key feature of connectors is that they can only interconnect ports that play complementary&#xD;
    roles in the protocol associated with the connector. In principle, the protocol roles do not necessarily have to belong&#xD;
    to the same protocol, but in that case they have to be compatible with the protocol of the connector.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Connectors are abstract views of signal-based communication channels that interconnect two or more ports. The ports&#xD;
    bound by a connection must play mutually complementary but compatible roles in a protocol. In collaboration diagrams,&#xD;
    they are represented by association roles that interconnect the appropriate ports. If we abstract away the ports from&#xD;
    this picture, connectors really capture the key communication relationships between capsules. These relationships have&#xD;
    architectural significance since they identify which capsules can affect each other through direct communication. Ports&#xD;
    are included to allow the encapsulation of capsules under the principles of information hiding and separation of&#xD;
    concerns.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    The similarity between connectors and protocols might suggest that the two concepts are equivalent. However, this is&#xD;
    not the case, since protocols are abstract specifications of desired behavior while connectors are physical objects&#xD;
    whose function is merely to convey signals from one port to the other. Typically, the connectors themselves are passive&#xD;
    conduits. (In practice, physical connectors may sometimes deviate from the specified behavior. For example, as a result&#xD;
    of an internal fault, a connector may lose, reorder, or duplicate messages. This type of failure is common in&#xD;
    distributed communication channels.)&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A connector is modeled by an association that exists between two or more ports of the corresponding capsule classes.&#xD;
    (For advanced applications in which the connector has physical properties, an association &lt;i>class&lt;/i> may be used&#xD;
    since the connector is actually an object with a state and an identity. As with ports, the actual class that is used to&#xD;
    realize a connector is an implementation issue.) The relationship to the supported protocol is implicit through the&#xD;
    connected ports. Consequently, no UML extensions are required for representing connectors.&#xD;
&lt;/p>&#xD;
&lt;h4 class=&quot;reactive&quot;>&#xD;
    &lt;a id=&quot;The Specification Collaboration&quot; name=&quot;The Specification Collaboration&quot;>The Specification Collaboration&lt;/a> &lt;a&#xD;
    href=&quot;#Top&quot;>&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    A capsule's &lt;b>complete&lt;/b> internal structure is represented by a specification collaboration. This collaboration&#xD;
    includes a specification of all of its ports, sub-capsules, and connectors. Like ports, the sub-capsules and connectors&#xD;
    are strongly owned by the capsule and &lt;b>cannot&lt;/b> exist independently of the capsule. They are created when the&#xD;
    capsule is created and destroyed when their capsule is destroyed.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Some sub-capsules in the structure may not be created at the same time as their containing capsule. Instead, they may&#xD;
    be created subsequently, when and if necessary, by the state machine of the capsule. The state machine can also destroy&#xD;
    such capsules at any time. This follows the UML rules on composition.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    The structure of a capsule may contain so-called &lt;b>plug-in&lt;/b> roles. These are, in effect, placeholders for&#xD;
    sub-capsules that are filled in &lt;b>dynamically&lt;/b>. This is necessary because it is not always known in advance which&#xD;
    specific objects will play those roles at run time. Once this information is available, the appropriate capsule&#xD;
    instance (which is owned by some other composite capsule) can be &quot;plugged&quot; into such a slot and the connectors joining&#xD;
    its ports to other sub-capsules in the collaboration are automatically established. When the dynamic relationship is no&#xD;
    longer required, the capsule is &quot;removed&quot; from the plug-in slot, and the connectors to it are taken down.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Dynamically created sub-capsules and plug-ins allow the modeling of dynamically changing structures while ensuring that&#xD;
    all valid communication and containment relationships between capsules are specified explicitly. This is key in&#xD;
    ensuring architectural integrity in a complex real-time system.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Ports may also be depicted in specification collaboration diagrams. In these diagrams, objects are represented by the&#xD;
    appropriate classifier roles, that is, sub-capsules by &lt;b>capsule roles and ports by port roles&lt;/b>. To reduce visual&#xD;
    clutter, port roles are generally shown in iconified form, represented by small black or white squares. Public ports&#xD;
    are represented by port role icons that straddle the boundary of the corresponding capsule roles as shown in the&#xD;
    previous figure. This shorthand notation allows them to be connected both from inside and outside the capsule without&#xD;
    unnecessary crossing of lines and also identifies them clearly as boundary objects.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;62&quot; alt=&quot;public ports and capsule roles diagram&quot; src=&quot;resources/ar_cpsl6.gif&quot; width=&quot;385&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Port notation - specification collaboration diagram&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Note that the labels are adornments to the port roles and should not be confused with association end names of the&#xD;
    connector. Also, because ports are uniquely identified by their names, it is possible, as a graphical convenience, to&#xD;
    arrange the public port roles around the perimeter of a sub-capsule box in any order. This can be used to minimize&#xD;
    crossovers between connector lines.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    For the case of binary protocols, an additional stereotype icon can be used: the port playing the conjugate role is&#xD;
    indicated by a white-filled (versus black-filled) square. In that case, the protocol name and the tilde suffix are&#xD;
    sufficient to identify the protocol role as the conjugate role; the protocol role name is redundant and should be&#xD;
    omitted. Similarly, the use of the protocol name alone on a black square indicates the base role of the protocol. For&#xD;
    example, if the &quot;master&quot; role in protocol ProtQ&amp;nbsp; is declared as the base, then the diagrams in the figure below&#xD;
    and the figure above are equivalent. This convention makes it easy to see when complementary protocol roles are&#xD;
    connected.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;61&quot; alt=&quot;protocol role diagram&quot; src=&quot;resources/ar_cpsl7.gif&quot; width=&quot;385&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Notational conventions for binary protocols&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Ports with a multiplicity factor that is greater than one can also be indicated graphically using the standard UML&#xD;
    multiobject notation as shown in the next figure. This is not mandatory (the multiplicity string is sufficient) but it&#xD;
    emphasizes the possibility of multiple instances of the port.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot; align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;96&quot; alt=&quot;UML diagram for multiple objects&quot; src=&quot;resources/ar_cpsl8.gif&quot; width=&quot;220&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactivepicturetext&quot; align=&quot;center&quot;>&#xD;
    Ports with multiplicity factor greater than 1&#xD;
&lt;/p>&#xD;
&lt;h4 class=&quot;reactive&quot;>&#xD;
    &lt;a id=&quot;The State Machine&quot; name=&quot;The State Machine&quot;>The State Machine&lt;/a> &lt;a href=&quot;#Top&quot;>&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    The optional state machine associated with a capsule is just another part of a capsule's implementation. However, it&#xD;
    has certain special properties that distinguish it from the other constituents of a capsule:&#xD;
&lt;/p>&#xD;
&lt;ul class=&quot;reactive&quot;>&#xD;
    &lt;li>&#xD;
        It cannot be decomposed further into sub-capsules. It specifies behavior directly. State machines, however, can be&#xD;
        decomposed into hierarchies of simpler state machines using standard UML capabilities.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        There can be at most one such state machine per capsule (although sub-capsules can have their own state machines).&#xD;
        Capsules that do not have state machines are simple containers for sub-capsules.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It handles signals arriving on any end port of a capsule and can send signals through those ports.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        It is the only entity that can access the internal protected parts in its capsule. This means that it acts as the&#xD;
        &lt;b>controller&lt;/b> of all the other sub-capsules. As such, it can create and destroy those sub-capsules that are&#xD;
        identified as dynamic, and it can plug in and remove external sub-capsules as appropriate.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Dynamically created sub-capsules are indicated simply by a variable multiplicity factor. Like plug-in slots, these may&#xD;
    also be specified by a pure interface type. This means that, at instantiation time, any implementation class that&#xD;
    supports that interface can be instantiated. This provides for generality in structural specifications.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;reactive&quot;>&#xD;
    Despite its additional restrictions, the state machine associated with a capsule is modeled by the standard link&#xD;
    between a UML Classifier and a State Machine. The implementation/decomposition of a capsule is modeled by a standard&#xD;
    UML collaboration element that can be associated with a classifier.&amp;nbsp;&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></representationOptions>
</org.eclipse.epf.uma:ArtifactDescription>
