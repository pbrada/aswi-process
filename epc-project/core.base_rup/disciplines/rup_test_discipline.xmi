<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_yd3EztnmEdmO6L4XMImrsA" name="rup_test_discipline,_yd3EzdnmEdmO6L4XMImrsA" guid="_yd3EztnmEdmO6L4XMImrsA" changeDate="2005-11-08T09:03:15.920-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;Purpose&quot; name=&quot;Purpose&quot;>&lt;/a>&lt;a id=&quot;RelationToOtherDisciplines&quot; name=&quot;RelationToOtherDisciplines&quot;>&lt;/a>&lt;a&#xD;
id=&quot;FurtherReading&quot; name=&quot;FurtherReading&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    The Test discipline acts as a service provider to the other disciplines in many respects. Testing focuses primarily on&#xD;
    evaluating or assessing &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/guidances/concepts/product_quality_FBA62FF9.html&quot;&#xD;
    guid=&quot;1.4115637419216196E-305&quot;>Product Quality&lt;/a>, which is realized through these core practices:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Find and document defects in software quality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Advise on the perceived software quality.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Validate and prove the assumptions made in design and requirement specifications through concrete demonstration.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Validate that the software product works as designed.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Validate that the requirements are implemented appropriately.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    An interesting difference exists between Test and the other disciplines in RUP - essentially Test is tasked with&#xD;
    finding and exposing weaknesses in the software product. It's interesting because, to get the biggest benefit, you need&#xD;
    a different general philosophy than what's used in the Requirements, Analysis &amp;amp; Design, and Implementation&#xD;
    disciplines. A somewhat subtle difference is that those three disciplines focus on completeness, whereas Test focuses&#xD;
    on incompleteness.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A good test effort is driven by questions such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        How could this software break?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        In what possible situations could this software fail to work predictably?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Test challenges the assumptions, risks, and uncertainty inherent in the work of other disciplines, and addresses those&#xD;
    concerns using concrete demonstration and impartial evaluation. You want to avoid two potential extremes:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        an approach that does not suitably or effectively challenge the software, and exposes its inherent problems or&#xD;
        weaknesses&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        an approach that is inappropriately negative or destructive - adopting such a negative approach, you may find it&#xD;
        impossible to consider the software product of acceptable quality and could alienate the Test effort from the other&#xD;
        disciplines&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Information presented in various surveys and essays states that software testing accounts for 30 to 50 percent of total&#xD;
    software development costs. It is, therefore, somewhat surprising to note that most people believe computer software is&#xD;
    not well tested before it's delivered. This contradiction is rooted in a few key issues:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Testing software is very difficult. How do you quantify the different ways in which a given program can behave?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Typically testing is done without a clear methodology, creating results that vary from project to project and from&#xD;
        organization to organization. Success is primarily a factor of the quality and skills of the individuals.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Productivity tools are used insufficiently, which makes the laborious aspects of testing unmanageable. In addition&#xD;
        to the lack of automated test execution, many test efforts are conducted without tools that let you effectively&#xD;
        manage extensive Test Data and Test Results. Flexibility of use and complexity of software make complete testing an&#xD;
        impossible goal. Using a well-conceived methodology and state-of-the-art tools can improve both the productivity&#xD;
        and effectiveness of software testing.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    High-quality software is essential to the success of &lt;i>safety-critical&lt;/i> systems - such as air-traffic control,&#xD;
    missile guidance, or medical delivery systems - where a failure can harm people. The criticality of a typical MIS&#xD;
    system may not be as immediately obvious, but it's likely that the impact of a defect could cause the business using&#xD;
    the software considerable expense in lost revenue and possibly legal costs. In this information age, with increasing&#xD;
    demands on providing electronically delivered services over the Internet, many MIS systems are now considered&#xD;
    &lt;i>mission-critical&lt;/i>; that is, companies cannot fulfill their functions and they experience massive losses when&#xD;
    failures occur.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A continuous approach to quality, initiated early in the software lifecycle, can lower the cost of completing and&#xD;
    maintaining your software significantly. This greatly reduces the risk associated with deploying poor quality software.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;RelationToOtherDisciplines&quot; name=&quot;RelationToOtherDisciplines&quot;>Relation to Other Disciplines&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Test discipline is related to other disciplines, as follows:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_requirements_discipline_8EEB5209.html&quot;&#xD;
        guid=&quot;_ydt60dnmEdmO6L4XMImrsA&quot;>Requirements&lt;/a>&amp;nbsp;discipline captures requirements for the software product,&#xD;
        which is one of the primary inputs for identifying what tests to perform.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_analysis_design_discipline_29760231.html&quot;&#xD;
        guid=&quot;_ydt62NnmEdmO6L4XMImrsA&quot;>Analysis &amp;amp; Design&lt;/a>&amp;nbsp;discipline determines the appropriate design for the&#xD;
        software product, which is another important input for identifying what tests to perform.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_implementation_discipline_263E22DB.html&quot;&#xD;
        guid=&quot;_yd3ExNnmEdmO6L4XMImrsA&quot;>Implementation&lt;/a>&amp;nbsp;discipline produces builds of the software product that are&#xD;
        validated by the Test discipline. Within an iteration, multiple builds will be tested â€” typically one per test&#xD;
        cycle.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_deployment_discipline_A1C86C42.html&quot;&#xD;
        guid=&quot;_yd3E1NnmEdmO6L4XMImrsA&quot;>Deployment&lt;/a>&amp;nbsp;discipline delivers the completed software product to the&#xD;
        end-user. While the software is validated by the Test discipline before this occurs, beta testing and acceptance&#xD;
        testing are often conducted as part of Deployment.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_environment_discipline_41478973.html&quot;&#xD;
        guid=&quot;_yeKmwtnmEdmO6L4XMImrsA&quot;>Environment&lt;/a>&amp;nbsp;discipline develops and maintains supporting artifacts that are&#xD;
        used during Test, such as the Test Guidelines and Test Environment.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_project_management_discipline_F303DA84.html&quot;&#xD;
        guid=&quot;_yeA1y9nmEdmO6L4XMImrsA&quot;>Project Management&lt;/a>&amp;nbsp;discipline plans the project and the necessary work in&#xD;
        each iteration. Described in an Iteration Plan, this artifact is an important input used when you define the&#xD;
        correct evaluation mission for the test effort.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/disciplines/rup_config_and_change_manage_discipline_CC612E7A.html&quot;&#xD;
        guid=&quot;_yeA1xNnmEdmO6L4XMImrsA&quot;>Configuration &amp;amp; Change Management&lt;/a>&amp;nbsp;discipline controls change within the&#xD;
        project team. The test effort verifies that each change has been completed appropriately.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;FurtherReading&quot; name=&quot;FurtherReading&quot;>Further Reading&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    We recommend reading Kaner, Bach &amp;amp; Pettichord's &lt;i>Lessons Learned in Software Testing&lt;/i> &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.base_rup/customcategories/references_56F06DFD.html#KAN01&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>[KAN01]&lt;/a>, which contains an excellent collection of important concerns for test teams.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
