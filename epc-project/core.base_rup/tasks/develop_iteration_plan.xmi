<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_36QcANnmEdmO6L4XMImrsA" name="develop_iteration_plan,{50EDC6A8-97B0-46C1-9B1C-7630DE286841}" guid="_36QcANnmEdmO6L4XMImrsA" changeDate="2005-10-28T06:02:04.902-0700" version="7.1.0">
  <mainDescription>&lt;p>&#xD;
    The iteration itself is a time-boxed set of tasks that are focused very narrowly on producing an executable. For all&#xD;
    but the last transition iteration this is an intermediate product, produced to force attention on mitigating risk and&#xD;
    driving the project toward successful delivery. The focus on an executable deliverable forces nearly continuous&#xD;
    integration and allows the project to address technical risks early, decreasing attendant risks.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Iterating implies a certain amount of rework (of existing work products), and an accompanying change in attitude toward&#xD;
    rework. In short, a certain amount of rework is required to deliver a quality product: by building intermediate&#xD;
    products and evaluating the suitability of the product architecture &lt;b>early and often&lt;/b>, the quality of the&#xD;
    end-product is increased while changes are less costly to make and easier to accommodate.&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_a6hg0NnnEdmO6L4XMImrsA" name=" Determine the Iteration Scope " guid="_a6hg0NnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_Iteration_Plan_document__determining_scope_of_iteration&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__determining_scope_of_iteration&quot;>&lt;/a>&lt;a id=&quot;XE_iteration__determining_scope_of&quot;&#xD;
name=&quot;XE_iteration__determining_scope_of&quot;>&lt;/a>&lt;a id=&quot;Determine the Iteration Scope&quot;&#xD;
name=&quot;Determine the Iteration Scope&quot;>&lt;/a> &#xD;
&lt;div align=&quot;left&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;100%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;td width=&quot;5%&quot;>&#xD;
                    &lt;b>Purpose&lt;/b>&#xD;
                &lt;/td>&#xD;
                &lt;td width=&quot;95%&quot;>&#xD;
                    To select a set of use cases or scenarios to be considered during the iteration.&lt;br />&#xD;
                     To select a set of non-functional requirements which must be handled during the iteration.&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td colspan=&quot;2&quot;>&#xD;
                    &lt;b>Guidelines:&amp;nbsp;&lt;/b>&lt;a class=&quot;elementLink&quot;&#xD;
                    href=&quot;./../../core.base_rup/guidances/guidelines/iteration_plan_F6D69317.html&quot;&#xD;
                    guid=&quot;2.6565226367468887E-305&quot;>Iteration Plan&lt;/a>&amp;nbsp;&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    The scope of an iteration is driven by four factors:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        the top risks to the project&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the functionality required of the system&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the time allocated to the iteration in the Project Plan&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the phase and its specific objectives (See&amp;nbsp;&lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../core.base_concepts/guidances/concepts/phase_85B003C3.html&quot; guid=&quot;__7xOEC7aEdqHMdmRzC0-2g&quot;>Concept:&#xD;
        Phase&lt;/a>)&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    In the initial planning of an iteration, enough work is selected to fill the time already planned for the iteration -&#xD;
    although the Project Manager is permitted some latitude to account for resource constraints and other tactical&#xD;
    considerations at the time the Iteration Plan is being developed. Obviously, work planned for the previous iteration,&#xD;
    but not completed (because the previous iteration's scope was reduced to meet the schedule) will normally have high&#xD;
    priority.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The scope of work has also to be driven by a sensible approach to the maximum staffing level that can be applied, in&#xD;
    the duration of the iteration, for its completion. For example, it is not usually possible to double the work completed&#xD;
    in an iteration by doubling the staff applied to it - even if those resources were available. The approximate staff&#xD;
    numbers that can be efficiently applied are determined by overall software size and architecture, and estimation models&#xD;
    such as COCOMO II (see [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../core.base_rup/customcategories/references_56F06DFD.html&quot;&#xD;
    guid=&quot;7.755968586980351E-308&quot;>BOE00&lt;/a>]) can provide these.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The execution of an iteration is then managed by &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/termdefinitions/timeboxing_109B588A.html&quot; guid=&quot;_yYy-k9nmEdmO6L4XMImrsA&quot;>timeboxing&lt;/a> -&#xD;
    that is, the scope and quality (in terms of discovered defects not rectified) are actively managed to meet the end&#xD;
    date.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    In the &lt;a href=&quot;./../../core.base_rup/customcategories/elaboration_6A203A50.html&quot;&#xD;
    guid=&quot;_-kFhcCVuEdqSZ9OimJ-AzA&quot;>Elaboration&lt;/a>&amp;nbsp;Phase:&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    There are three main drivers for defining the objectives of an iteration in elaboration:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Risk&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Criticality&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Coverage&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The main driver to define iteration objectives are &lt;b>risks&lt;/b>. You need to mitigate or retire your risks as early as&#xD;
    you can. This is mostly the case in the elaboration phase, where most of your risks should be mitigated, but this can&#xD;
    continue to be a key elements in construction as some risks remain high, or new risks are discovered. But since the&#xD;
    goal of the elaboration phase is to baseline an architecture, some other considerations have to come into play, such as&#xD;
    making sure that the architecture addresses all aspects of the software to be developed (&lt;b>coverage&lt;/b>). This is&#xD;
    important since the architecture will be used for further planning: organization of the team, estimation of code to be&#xD;
    developed, etc.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Finally, while focusing on risks is important, one should keep in mind what are the primary missions of the system;&#xD;
    solving all the hard issues is good, but this must not be done in detriment of the core functionality: make sure that&#xD;
    the critical functions or services of the system are indeed covered (&lt;b>criticality&lt;/b>), even if there is no perceived&#xD;
    risk associated with them.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    From the Risk list, for the most damaging risks, identify some scenario in some use case that would force the&#xD;
    development team to &quot;confront&quot; the risk.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Examples&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            if there is an integration risk such as &quot;database D working properly with OS Y&quot;, make sure you include one&#xD;
            scenario that involves some database interaction even very modest.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            if there is a performance risk such as &quot;time to compute the trajectory of the aircraft&quot;, make sure you have one&#xD;
            scenario that includes this computation, at least for the most obvious and frequent case.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    For &lt;b>criticality&lt;/b>, make sure that the most fundamental function or services provided by the system are included.&#xD;
    Select some scenario out of the use case that represent the most common, the most frequent form of the service or&#xD;
    feature offered by the system. The &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Software Architecture Document&lt;/a> is used to drive this effort,&#xD;
    providing a prioritized set of Use Cases or sub-flows of use cases, selected by the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/roles/rup_software_architect_DB0BF177.html&quot; guid=&quot;{4AC346F0-E6FC-4D2C-8410-2EDF8DDDC91D}&quot;>Software&#xD;
    Architect&lt;/a> to reflect the architecturally significant use cases or scenarios.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ul>&#xD;
        &lt;li>&#xD;
            for a telephone switch, the plain station-to-station call is the obvious must for an early iteration. This is&#xD;
            far more important to get right than convoluted failure modes in operator configuration of the error handling&#xD;
            subsystem.&#xD;
        &lt;/li>&#xD;
    &lt;/ul>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    For &lt;b>coverage&lt;/b>, towards the end of the end of the elaboration phase, include scenarios that touches areas that you&#xD;
    know will require development, although they are neither critical nor risky.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is often economical to create long, end-to-end scenarios that address multiple issues at once.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The danger is often to get the scenarios to be too &quot;thick&quot;, i.e., trying to cover too many different aspects, and&#xD;
    variants, and error cases (See &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_rup/guidances/guidelines/iteration_plan_F6D69317.html&quot; guid=&quot;2.6565226367468887E-305&quot;>Iteration Plan&lt;/a>)&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Also, in the elaboration phase, keep in mind that some of the risks may be of a more human or programmatic nature: team&#xD;
    culture, training, selection of tools, new techniques etc. and just going through iteration is mitigating these risks.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Examples&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ol>&#xD;
        &lt;li>&#xD;
            &lt;b>Create one subscriber record on a client workstation, to be stored in the database on the server, including&#xD;
            user dialog, but not including all field, and assuming no error is detected.&lt;br />&#xD;
            &lt;/b> Combines some critical function, with some integration risks (database and communication software) and&#xD;
            integration issues (dealing with 2 different platforms). Also force designers to become familiar with new GUI&#xD;
            design tool. Finally produces a prototype that can be demonstrated to user for feedback.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Make sure up to 20,000 subscribers can be created, and access to one is not longer than 200&#xD;
            milliseconds.&lt;br />&#xD;
            &lt;/b> Addresses some key performance issues (volume or data, and response time), that may dramatically affect&#xD;
            the architecture if not met.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Undo a change of subscriber address.&lt;br />&#xD;
            &lt;/b> A simple feature that forces designers to think about a design of all &quot;undo&quot; functions. This may in turn&#xD;
            trigger some push-back to the users about what can be undone at reasonable cost.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Complete all the use cases relative to supply-chain management.&lt;br />&#xD;
            &lt;/b> The goal of the elaboration phase is also to complete the capture of requirements, maybe also set by set.&#xD;
        &lt;/li>&#xD;
    &lt;/ol>&#xD;
&lt;/blockquote>&#xD;
&lt;h4>&#xD;
    In the &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/customcategories/construction_102AF1EA.html&quot;&#xD;
    guid=&quot;_SkuIwCVwEdqSZ9OimJ-AzA&quot;>Construction&lt;/a>&amp;nbsp;Phase:&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As the project moves into the construction phase, risks remain a key driver, especially as new, unsuspected risks are&#xD;
    uncovered. But completeness of use case start to be a driver. The iterations can be planned feature by feature, trying&#xD;
    to complete some of the most critical ones early so that they can be thoroughly tested during more than one iteration.&#xD;
    Towards the end of construction, robustness of full use cases will be the main goal.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    Example&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ol>&#xD;
        &lt;li>&#xD;
            &lt;b>Implement all variants of call forwarding, including erroneous ones.&lt;br />&#xD;
            &lt;/b> This is a set of related features. One of them may have been implemented during the elaboration phase, and&#xD;
            will serve as a prototype for the rest of the development.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Complete all telephone operator features except night service.&lt;br />&#xD;
            &lt;/b> Another set of features.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Achieve 5,000 transactions per hour on a 2 computer set-up.&lt;br />&#xD;
            &lt;/b> This may step up the required performance relative to what was actually achieved in the previous iteration&#xD;
            (only 2,357/hour)&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Integrate new version of Geographical Information System.&lt;br />&#xD;
            &lt;/b> This may be a modest architectural change, necessitated by some problem discovered earlier.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Fix all level 1 and level 2 defects&lt;br />&#xD;
            &lt;/b> Fixes defects discovered during testing in the previous iteration and not fixed immediately but&#xD;
            deferred&lt;b>.&lt;/b>&#xD;
        &lt;/li>&#xD;
    &lt;/ol>&#xD;
&lt;/blockquote>&#xD;
&lt;h4>&#xD;
    In the &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/customcategories/transition_1018F224.html&quot;&#xD;
    guid=&quot;_cn2akCVwEdqSZ9OimJ-AzA&quot;>Transition&lt;/a>&amp;nbsp;Phase:&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Finishing this generation of the product is the main goal. Objective for an iteration are set in terms of which bugs&#xD;
    are fixed, which improvements in performance or usability are included. If features had to be dropped (or disabled) in&#xD;
    order to get in time to the end of construction (IOC milestone, or &quot;beta&quot;), they may now be completed, or turned on, if&#xD;
    they do not jeopardize what has been achieved so far.&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;exampleheading&quot;>&#xD;
    &lt;strong>Examples&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;ol>&#xD;
        &lt;li>&#xD;
            &lt;b>Fix all severity 1 problems discovered on beta customer sites.&lt;br />&#xD;
            &lt;/b> A goal in term of quality, may be related to credibility on the market.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Eliminate all startup crashes due to mismatched data.&lt;br />&#xD;
            &lt;/b> Another goal expressed in terms of quality.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Achieve 2,000 transactions per minute.&lt;br />&#xD;
            &lt;/b> Performance tuning, involving some optimization: data structure change, caching and smarter algorithm.&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Reduce the number of different dialog boxes by 30%.&lt;br />&#xD;
            &lt;/b> Improve usability by reducing the visual clutter&#xD;
        &lt;/li>&#xD;
        &lt;li>&#xD;
            &lt;b>Produce German and Japanese versions.&lt;br />&#xD;
            &lt;/b> The beta was produced only for English customers by lack of time and to reduce rework.&#xD;
        &lt;/li>&#xD;
    &lt;/ol>&#xD;
&lt;/blockquote></sectionDescription>
  </sections>
  <sections xmi:id="_a6rR0NnnEdmO6L4XMImrsA" name=" Define Iteration Evaluation Criteria " guid="_a6rR0NnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_transition_iteration__evaluating&quot; name=&quot;XE_transition_iteration__evaluating&quot;>&lt;/a>&lt;a&#xD;
id=&quot;XE_Iteration_Plan_document__defining_evaluation_criteria&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__defining_evaluation_criteria&quot;>&lt;/a>&lt;a id=&quot;XE_iteration__defining_evaluation_criteria&quot;&#xD;
name=&quot;XE_iteration__defining_evaluation_criteria&quot;>&lt;/a>&lt;a id=&quot;XE_evaluation_criteria__of_iteration&quot;&#xD;
name=&quot;XE_evaluation_criteria__of_iteration&quot;>&lt;/a>&lt;a id=&quot;XE_construction_iteration__evaluating&quot;&#xD;
name=&quot;XE_construction_iteration__evaluating&quot;>&lt;/a>&lt;a id=&quot;Define Iteration Evaluation Criteria&quot;&#xD;
name=&quot;Define Iteration Evaluation Criteria&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Each iteration results in an executable release. The release is not generally production-quality (except in the final&#xD;
    Transition iteration), but it can be evaluated nonetheless.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_inception_iteration__evaluating&quot; name=&quot;XE_inception_iteration__evaluating&quot;>&lt;/a>Evaluating Inception&#xD;
    Iterations&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The Inception iteration generally focuses on proving the concept of the product and building the support necessary to&#xD;
    approve project funding. As a result, the Iteration release is generally a functional proof-of-concept prototype which&#xD;
    lacks real implementation code under a thin veneer of user interface. The evaluation criteria are oriented toward user&#xD;
    acceptance and qualitative measures.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Under some circumstances, key technical hurdles must be overcome in inception before product funding is provided; if&#xD;
    so, the evaluation criteria must reflect this.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;XE_elaboration_iteration__evaluating&quot; name=&quot;XE_elaboration_iteration__evaluating&quot;>&lt;/a>Evaluating Elaboration&#xD;
    Iterations&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Elaboration Iterations focus on creating a stable architecture. As a result, Elaboration evaluation criteria must focus&#xD;
    on assessing the stability of the architecture. Measures that can be used are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Interface stability (or breakage)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The rate of change in the Architecture (compared to an architectural baseline)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        performance of key functionality&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The key goal is to ensure that changes during the Construction phase do not ripple throughout the system, causing&#xD;
    excessive re-work.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Evaluating Construction and Transition Iterations&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Construction and Transition iterations are measured along traditional software testing and change management dimensions&#xD;
    such as breakage, defect density, and fault discovery rates. The focus in these iterations is finding errors so that&#xD;
    they can be fixed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Errors are discovered in a number of ways: inspections and code reviews, functional tests, performance tests and load&#xD;
    tests. Each technique is oriented toward discovering a particular set of defects, and each has its place. Specifics on&#xD;
    these techniques are discussed in the Rational Unified Process Test discipline.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></sectionDescription>
  </sections>
  <sections xmi:id="_a6rR0dnnEdmO6L4XMImrsA" name=" Define Iteration Activities " guid="_a6rR0dnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_Iteration_Plan_document__defining_iteration_activities&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__defining_iteration_activities&quot;>&lt;/a>&lt;a id=&quot;XE_iteration__defining_activities_in&quot;&#xD;
name=&quot;XE_iteration__defining_activities_in&quot;>&lt;/a>&lt;a id=&quot;Define Iteration Activities&quot; name=&quot;Define Iteration Activities&quot;>&lt;/a>&#xD;
&#xD;
&lt;p>&#xD;
    Based upon the goals of the iteration, the set of tasks to be performed during the iteration must be selected.&#xD;
    Typically, each iteration will make a partial pass through all the tasks in the software lifecycle:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use cases and scenarios are selected which exercise the required functionality&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The use case (or scenario) behavior is researched and documented&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The behavior is analyzed and allocated amongst subsystems and classes which provide the required behavior&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The classes and subsystems are designed, implemented and unit tested&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system is integrated and tested as a whole&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For external releases (alpha, beta, and general availability) the product is packaged into a releasable form and&#xD;
        transitioned to into its user environment.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The degree to which these tasks are performed varies with the iteration and the phase of the project. The individual&#xD;
    disciplines (Requirements, Analysis &amp;amp; Design, Test, etc.) define the generic tasks, which in turn are tailored to&#xD;
    the organization during process configuration.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Identify affected work products and tasks involved&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Once the scenarios or full blown use cases to be developed (plus defects to be fixed) have been selected and briefly&#xD;
    sketched, you need to find what are the work products that will be affected:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Which classes are to be revisited?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Which subsystems are affected, or even created?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Which interfaces are probably to be modified&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Which documents have to be updated&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Then extract from the process disciplines the tasks that are involved, and place them in your plan. Some tasks are done&#xD;
    once per iteration (example here), some have to be done once per class, per use case, per subsystem (example). Connect&#xD;
    the tasks with their obvious dependencies, and allocate some estimated effort. Most of the tasks described for the&#xD;
    process are small enough to be accomplished by one person, or a very small group of persons in a matter of a few hours&#xD;
    to a few days.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is likely the case that you discover there is not enough time in the iteration to accomplish all this. Rather than&#xD;
    extending the iteration (hence either extending the final delivery time, or reducing the number of iterations), reduce&#xD;
    the iteration ambitions. Depending on which phase you are in, make scenarios simpler, eliminate or disable features.&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_a6rR0tnnEdmO6L4XMImrsA" name=" Assign Responsibilities " guid="_a6rR0tnnEdmO6L4XMImrsA">
    <sectionDescription>&lt;a id=&quot;XE_Iteration_Plan_document__assign_responsibilities&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__assign_responsibilities&quot;>&lt;/a>&lt;a id=&quot;XE_iteration__assign_responsibilities&quot;&#xD;
name=&quot;XE_iteration__assign_responsibilities&quot;>&lt;/a>&lt;a id=&quot;Assign Responsibilities&quot; name=&quot;Assign Responsibilities&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    Once the set of tasks for the iteration have been defined, they must be assigned to individual project team members.&#xD;
    Depending on the staff resources available and the scope of the iteration, the tasks may either be carried out by a&#xD;
    single individual or a team. Reviews and Inspections are, of course, inherently team tasks. Other tasks, such as&#xD;
    authoring use cases or designing and implementing classes, are inherently solitary (except in the case where a junior&#xD;
    team member may be teamed with a senior team member who acts as a mentor).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, each work product must be the responsibility of a single individual, even if the work is done by a team:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Use cases&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Subsystems&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Classes&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Tests and test plans&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        etc.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Without a single point of contact, ensuring consistency becomes nearly impossible.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></sectionDescription>
  </sections>
  <keyConsiderations>&lt;p>&#xD;
    Project planning is where the project manager instantiates (and subsequently manages the execution of) a specific&#xD;
    delivery process (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../core.base_rup/workproducts/rup_development_process_A6449790.html&quot;&#xD;
    guid=&quot;{345D1811-317B-47EC-AC9D-10E1072A7D68}&quot;>Artifact: Development Process&lt;/a>) for the project. This is often called&#xD;
    process enactment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An &quot;Instantiated&quot; process is an enactable project/iteration/activity plan (it includes actual activities and work&#xD;
    products for an actual project.&amp;nbsp;&amp;nbsp;A delivery process can be instantiated by importing a &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.base_concepts/guidances/concepts/delivery_process_CFEBBC78.html&quot; guid=&quot;_EhgqwO8MEdmKSqa_gSYthg&quot;>Delivery&#xD;
    Process&lt;/a>&amp;nbsp;from &lt;a class=&quot;elementLink&quot; href=&quot;./../../core.base_rup/tools/rup_rational_method_composer_84A966EC.html&quot;&#xD;
    guid=&quot;_hAfB8COzEdq41POk0CQYwA&quot;>Rational Method Composer&lt;/a>&amp;nbsp;into Rational Portfolio Manager (RPM) and then doing&#xD;
    instantiation work by duplicating activities and tasks that are set to isRepeatable or hasMultipleOccurences, creating&#xD;
    real work products, assign real resources to roles, etc.&amp;nbsp;&#xD;
&lt;/p></keyConsiderations>
  <purpose>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a>&lt;a id=&quot;XE_Iteration_Plan_document__developing&quot;&#xD;
name=&quot;XE_Iteration_Plan_document__developing&quot;>&lt;/a> &#xD;
&lt;p>&#xD;
    To develop an iteration plan that consists of the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        a detailed work breakdown structure of the task and responsibility assignments&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        intra-iteration milestones and deliverables&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        evaluation criteria for the iteration&#xD;
    &lt;/li>&#xD;
&lt;/ul></purpose>
</org.eclipse.epf.uma:TaskDescription>
