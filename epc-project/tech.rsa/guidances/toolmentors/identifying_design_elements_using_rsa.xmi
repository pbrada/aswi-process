<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_VgqBMMe0EdmYjcUf1_oIew" name="identifying_design_elements_using_rsa,{7BAF7101-8949-44C3-A3FA-B9CFBBDCFA63}" guid="_VgqBMMe0EdmYjcUf1_oIew" changeDate="2006-04-28T10:58:01.765-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    Overview&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In the tool mentor, the following steps are performed for the use cases to be designed in the current iteration:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20and%20Specify%20Events/Triggers&quot;>Identify Events/Triggers and Signals&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20Classes,%20Active%20Classes%20and%20Subsystems/Components&quot;>Identify Classes, Active Classes&#xD;
        and Subsystems&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20Interfaces&quot;>Identify Subsystem Interfaces&lt;/a> &amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Identify%20Capsule%20Protocols&quot;>Identify Capsule Protocols&lt;/a> &amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;a href=&quot;#MoreInfo&quot;>Additional Tool Information&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Architecturally significant design elements may be documented in a separate Logical View, that is maintained as design&#xD;
    elements are identified. The general recommendation is to use &amp;lt;&amp;lt;perspective&amp;gt;&amp;gt; packages. See &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../tech.rsa/guidances/whitepapers/model_structure_guidelines_for_rational_software_developer_DF8E00EB.html&quot;&#xD;
     guid=&quot;1.128046228219609E-305&quot;>Model Structure Guidelines for RSx&lt;/a> for more information on this topic.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify and Specify Events/Triggers&quot; name=&quot;Identify and Specify Events/Triggers&quot;>Identify Events and&#xD;
    Signals&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The characteristics of events, also called triggers in UML 2.0 should be captured as needed to drive the identification&#xD;
    of the design elements that handle them. This information can be captured informally, such as in a separate document,&#xD;
    rather than as part of a model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Asynchronous communication events can be modeled as signals to express the data that they carry, or to express&#xD;
    relationships between signals, such as a generalization relationship. The following substeps describe how to model&#xD;
    signals:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create class diagrams as needed. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Adding Class Diagrams to Model Elements&lt;/i>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add signals. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot;&#xD;
        width=&quot;16&quot; />&lt;i>Creating and Modifying Class Diagrams&lt;/i>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add a brief description to each design element. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Documenting Model Elements&lt;/i>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add generalization relationships between signals, if applicable. &amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    For more information about class diagrams, see &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Modeling Static Structure&amp;nbsp;by&amp;nbsp;Using&amp;nbsp;Class&#xD;
    Diagrams&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify Classes, Active Classes and Subsystems/Components&quot;&#xD;
    name=&quot;Identify Classes, Active Classes and Subsystems/Components&quot;>Identify Classes, Active Classes and Subsystems&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Design elements are generally created in the following three ways:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Expanding a pattern&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Modeling&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Coding and reverse engineering&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These approaches are explained in the sections that follow.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Expanding a Pattern&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    A&amp;nbsp;pattern is a special kind of transformation that is optimized for interactive, piece-wise elaboration, primarily&#xD;
    in a single meta-model and within the same level of abstraction, and often within the same model. For more information,&#xD;
    refer to &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/analysis_mechanisms_36135B43.html&quot;&#xD;
    guid=&quot;9.76539014099254E-305&quot;>Analysis Mechanisms&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Authoring&#xD;
    Patterns&lt;/i> and &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot;&#xD;
    width=&quot;16&quot; />&lt;i>Applying Patterns&lt;/i> in the online Help.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Modeling&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This tool supports a model-driven approach to software development (see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../tech.rsa/guidances/concepts/mdd_and_mda_8F9B3685.html&quot; guid=&quot;4.227832989444728E-303&quot;>Model&#xD;
    Driven Development and Model Driven Architecture&lt;/a> and &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/analysis_mechanisms_36135B43.html&quot; guid=&quot;9.76539014099254E-305&quot;>Analysis&#xD;
    Mechanisms&lt;/a>), wherein you construct a set of models that eventually includes a design model and generate&#xD;
    implementation artifacts such as 3GL code, descriptors, etc. These are derived from the design model using&#xD;
    Transformations. In some cases the code-generating Transformations will take analysis classes as inputs, but primarily&#xD;
    they will be driven by design elements. For more information, see: &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Applying Transformations.&lt;/i>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In a traditional development approach you will create class diagrams in the Design Model to capture design elements. If&#xD;
    you decide to maintain the analysis classes, then you may want to establish traceability by using &quot;trace&quot; dependencies&#xD;
    to the analysis classes.&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Create class diagrams as needed. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Adding Class Diagrams to Model Elements&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add subsystems and classes. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot;&#xD;
        width=&quot;16&quot; />&lt;i>Creating and Modifying Class Diagrams&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add a brief description to each design element. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Documenting Model Elements&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        (optional) Add traceability to analysis classes by using &quot;trace&quot; dependencies from your design elements to the&#xD;
        analysis classes on which they were based.See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Abstraction Relationships in UML Modeling&lt;/i>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Organize the design elements into subsystems and packages.&amp;nbsp;Refer to the white paper &lt;a&#xD;
        class=&quot;elementLinkWithUserText&quot;&#xD;
        href=&quot;./../../../tech.rsa/guidances/whitepapers/model_structure_guidelines_for_rational_software_developer_DF8E00EB.html&quot;&#xD;
         guid=&quot;1.128046228219609E-305&quot;>Model Structure Guidelines for RSx&lt;/a>.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    For more information about class diagrams, see &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
    src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Modeling Static Structure with Class Diagrams&lt;/i> .&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Coding and Reverse Engineering&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Note:&amp;nbsp;some of&amp;nbsp;the tool capabilites mentioned in this section are not supported in RSM.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A different approach is a &quot;code first&quot; approach: the code is the main driver either because already exists (for example&#xD;
    in a non-greenfield development cycle) or the team needs to tackle some specific project risks by coding a prototype to&#xD;
    validate a complex concept. As part of the support for Architecture Discovery and Recovery (see the &lt;a&#xD;
    class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../tech.rsa/guidances/guidelines/architectural_discovery,_analysis_and_control_2153BFC.html&quot;&#xD;
    guid=&quot;2.843707701997842E-305&quot;>Architectural Discovery, Analysis and Control&lt;/a> guidelines), the tool's code&#xD;
    visualization capability can automatically populate topic diagrams, such as package structure, class internals,&#xD;
    inheritance trees, and collaborations. The goal of this task is not only to understand the existing code, but also to&#xD;
    extract a model of the application, which could be used in conjunction with other specific models to generate the new&#xD;
    version of the application, by using transformations.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once you have generated or composed a UML diagram of existing code, you have these options for leveraging the code&#xD;
    depictions as part of your design model:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Harvest a UML depiction of a code element into your design model, as a true semantic model element. This creates a&#xD;
        new UML element in the design model that has no connection to the code item that was harvested. It does however&#xD;
        have properties (for instance attributes and operations) that reflect the properties of the harvested code item.&#xD;
        Because it is a true UML semantic element, new code can be generated from it (in other words it has the same status&#xD;
        within the design model as any design element that was defined through the greenfield modeling process described&#xD;
        previously earlier.)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Place a visual reference to the code element into a diagram that resides within your design model. This reference&#xD;
        itself has no semantic meaning within the design model, and no new code will be generated from it. It is, as its&#xD;
        name implies, just a reference to the actual code element. However, you can draw relationships between the code&#xD;
        reference and the semantic design elements in the design model. Those relationships do have semantic meaning within&#xD;
        the design model and they do affect code generation.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information, refer to &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot;&#xD;
    width=&quot;16&quot; />&lt;i>Modeling Static Structure with Class Diagrams&lt;/i> in the online Help.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify Interfaces&quot; name=&quot;Identify Interfaces&quot;>Identify Subsystem Interfaces&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following steps apply to large-granularity subsystems:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        For each subsystem, identify a set of candidate interfaces. If you previously created analysis classes, and did&#xD;
        analysis-level use case realizations, you will now decide how those operations are to be grouped together and&#xD;
        exposed as the interfaces of particular components or services. Add interfaces to an existing component diagram, or&#xD;
        create new component diagrams as needed. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Adding Interfaces to Modeling Diagrams&lt;/i>.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add interface dependencies.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Map subsystems to interfaces by adding a realization relationship from the subsystem to the interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Document the interface, including required behavior. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Documenting Model Elements&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add operations to the interface. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Adding Operations to Classifiers in Diagrams&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add a description to each operation. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Documenting Model Elements&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Add parameters to each operation. See &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot;&#xD;
        src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Adding Operations to Classifiers in Diagrams&lt;/i> .&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Organize the interfaces into packages.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    In UML 2.0 subsystems are large components and could be represented as structured classes with ports and/or interfaces.&#xD;
    See the on-line help specific UML 2.0 topics.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identify Capsule Protocols&quot; name=&quot;Identify Capsule Protocols&quot;>Identify Capsule Protocols&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Capsule and protocol modeling are not supported.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;MoreInfo&quot; name=&quot;MoreInfo&quot;>Additional Tool Information&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Tutorials:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Apply&#xD;
        a&amp;nbsp;Pattern&lt;/i>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Samples:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;img height=&quot;16&quot; alt=&quot;help book icon&quot; src=&quot;../../../core.base_rup/resources/helpbook.gif&quot; width=&quot;16&quot; />&lt;i>Patterns - Simple&#xD;
        UML Model&lt;/i>&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
