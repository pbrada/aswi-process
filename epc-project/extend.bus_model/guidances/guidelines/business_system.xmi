<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_0tqkMNnmEdmO6L4XMImrsA" name="business_system,5.503233494422666E-306" guid="_0tqkMNnmEdmO6L4XMImrsA" changeDate="2005-11-15T15:27:44.782-0800" version="7.1.0">
  <copyrightStatement href="uma://{1F4FEA6F-AF12-40BF-94BE-D316CE25314B}#_NH1FoPTFEdmkpYARNN468A"/>
  <mainDescription>&lt;a id=&quot;Top&quot; name=&quot;Top&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business systems represent an independent capability within a business. They are used to partition and understand the&#xD;
    structure of a business into manageable chunks, in much the same way that an organization is typically partitioned into&#xD;
    interdependent units. However, the role and purpose of different parts of an organization are not always clear to other&#xD;
    parts of it, which results in less-than-optimal interactions when executing a business process.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Business systems take the concept of partitioning and interdependence one step further. Business systems not only bind&#xD;
    and contain roles and resources (and possibly other business systems), but they also explicitly define&#xD;
    &lt;i>interfaces&lt;/i>, or the set of services or responsibilities they can be asked to provide. Organizations that define&#xD;
    &lt;i>service level agreements&lt;/i> to formally specify and manage interactions between departments and external&#xD;
    collaborators are in effect defining business systems. The use of a business system often goes hand-in-hand with using&#xD;
    business models at different levels of abstraction (see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.bus_model/guidances/concepts/modeling_large_organizations_DB7556B6.html&quot;&#xD;
    guid=&quot;1.268342166757605E-304&quot;>Concept: Modeling Large Organizations&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The term &quot;business system&quot; should not be confused with a software system. A business system contains people, hardware,&#xD;
    and software and is therefore at a higher level of abstraction than a software system.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business Systems Enable Dynamic Structure&quot; name=&quot;Business Systems Enable Dynamic Structure&quot;>&lt;/a>Business Systems&#xD;
    Enable Dynamic Structure&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In his book &lt;i>Enterprise Modeling with UML&lt;/i>, Chris Marshall points out that traditional relatively static&#xD;
    organizational structures are no longer sufficient for the radically decentralized and dynamic business world that is&#xD;
    emerging. We can no longer expect a part of the organization to remain intact for long periods of time. As he states in&#xD;
    his book, &quot;Value is created and delivered through value chains that form and disband over time. Indeed, the day when&#xD;
    such a chain is formed for a single transaction may not be far away.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Organizations are organic. As they feel increasing pressure from the business environment, they need to adapt to remain&#xD;
    competitive. Taken to the extreme, a static organization structure may be crippling in a highly dynamic and ruthless&#xD;
    business environment, and companies may need to turn to &lt;b>dynamic structure&lt;/b> as a survival mechanism.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the traditional static organization structure, departmental boundaries are only conceptual. While this may be a sign&#xD;
    of an &quot;open&quot; and &quot;informal&quot; organization, the result is that every person in and segment of the organization is&#xD;
    intertwined with the rest of the organization. It becomes extremely difficult to change or manage one part of the&#xD;
    organization completely independently from the other parts. Business systems enforce partitions and boundaries by&#xD;
    disallowing interactions between business systems, except by the predefined interfaces. These interfaces (possibly&#xD;
    formalized service-level agreements) become the hinges that support the organization. The most significant advantage to&#xD;
    these interfaces between business systems is that different parts of the organization are decoupled from each other.&#xD;
    Dependencies are defined in terms of responsibilities and not on &lt;i>how&lt;/i> those responsibilities are carried out.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Separating the specification of responsibilities from the realization of responsibilities, and&amp;nbsp;binding users of&#xD;
    the business system to services specified at its boundary, rather than&amp;nbsp;binding to realizing elements inside the&#xD;
    business system boundary,&amp;nbsp;results in a nimble organization-one that is capable of changing its structure rapidly&#xD;
    without degrading the performance of its processes. In such an organization, one of its capabilities (defined by a&#xD;
    business system) can be modified, improved, or outsourced, and the overall effect on the rest of the organization is&#xD;
    kept to a minimum. As long as the quality of service remains the same after the change, the business operations&#xD;
    continue uninterrupted. The same work could be performed by a software system, one person, or an entire&#xD;
    department-either on-site or remote.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Using business events to abstract interactions could reduce direct dependencies between business systems even further.&#xD;
    Because business events make time and space transparent, business systems can interact indirectly (see &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../extend.bus_model/guidances/guidelines/business_event_213B3FAC.html&quot;&#xD;
    guid=&quot;1.3382783818773036E-305&quot;>Guideline: Business Event&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Note: UML Modeling Guidance for Encapsulation&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    When modeling a business system with UML, we indicated in the description in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.bus_model/workproducts/rup_business_system_BB28EEB.html&quot;&#xD;
    guid=&quot;{4064F184-314B-4965-9F08-6AE5DBF6205A}&quot;>Artifact: Business System&lt;/a>&amp;nbsp;that if encapsulation was not&#xD;
    considered important, then the business system boundary was notional - as in the traditional static organization&#xD;
    structure discussed above - and, for interaction purposes at least - the business system did not exist during business&#xD;
    operation. You can indicate this in UML by saying that the business system (which is a kind of UML component) is not&#xD;
    &lt;em>directly&lt;/em> instantiable - it comes into being only through the instantiation of its parts. In the next section,&#xD;
    we discuss the provision of services by business systems: in this case we &lt;em>are&lt;/em> concerned with encapsulation,&#xD;
    and can indicate that the business system has more than a notional boundary by making it directly instantiable.&#xD;
    This&amp;nbsp;verifies the business system at analysis and design time in anticipation that, in operation, the boundary&#xD;
    will be somehow made real.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business Systems Have Well-defined Responsibilities&quot;&#xD;
    name=&quot;Business Systems Have Well-defined Responsibilities&quot;>&lt;/a>Business Systems Have Well-Defined Responsibilities&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business systems explicitly define the responsibilities (also called services) that they can be asked to perform. This&#xD;
    specification of behavior is essential because it allows the decoupling of dependencies mentioned in the previous&#xD;
    section. A business system that does not define its services is without meaning. There is no way that another business&#xD;
    system can know what services it provides, other than inferring them from its name. For example, we could expect a&#xD;
    Resourcing business system (in departmental terms, it would be called Resource Management) to provide services for&#xD;
    requesting a resource, querying the availability of resources, and possibly querying the resources types, or profiles.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Responsibilities (or services) define the means of interaction with the business system and are specified as operations&#xD;
    of the interface(s) to it. These interfaces are collections of related services and as such describe the role that the&#xD;
    business system can play in a particular interaction. In the example that appears below the next paragraph, we see that&#xD;
    each interface is a collection of logically related services. These interfaces (clusters of responsibility) are&#xD;
    assigned to the business system responsible for carrying out the responsibilities. When something external to the&#xD;
    business system requests one of the provided services, an event occurs within the business system to initiate&#xD;
    fulfillment of the requested service. This event, which is internal to the business system, may be explicitly defined&#xD;
    as a business event. The roles and resources (business workers and business entities) within the business system then&#xD;
    collaborate with each other (internally) to fulfill the requested service. As we can see, this is much the same way the&#xD;
    business operates toward its customers. In fact, we could even model the business system as a &quot;business,&quot; in which case&#xD;
    the requestors of services would be the business system's business actors.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The example below shows the business systems of a generic financial services institution. Only some of the dependencies&#xD;
    between business systems and interfaces are shown to improve understandability. From this diagram, it becomes apparent&#xD;
    that the responsibilities can be reassigned by allocating an interface to another business system. This reallocation of&#xD;
    responsibility would conceptually have no effect on the business systems that make use of those services.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram shows business systems for a generic financial services institution.&quot; src=&quot;resources/bsys4.gif&quot;&#xD;
    border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Note: UML Modeling Guidance for Services&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    We noted above that modeling a business system as a directly instantiable component&amp;nbsp;is a strong indicator that the&#xD;
    business system boundary&amp;nbsp;is not intended to be&amp;nbsp;just conceptual. We can continue this theme by modeling the&#xD;
    responsibilities of the business systems by an analogous application of the &lt;a&#xD;
    href=&quot;http://www-128.ibm.com/developerworks/rational/library/05/419_soa/&quot;>UML 2.0 Profile for Software Services&lt;/a>.&#xD;
    Although directed at software services, the fundamental ideas in this profile apply equally well to business systems.&#xD;
    The use of UML 2.0 ports to model services further verifies the business system boundary by defining clear&#xD;
    &lt;em>interaction points,&lt;/em> with well-defined interfaces, between users and business systems. These interaction points&#xD;
    completely insulate the &lt;em>implementation&lt;/em> of the business system's responsibilities from their &lt;em>delivery&lt;/em>&#xD;
    to consumers outside the business system. This method also&amp;nbsp;gives the Business-Process Analyst and then the&#xD;
    Business Designer&amp;nbsp;a way of flexibly modeling the composition and choreography of services (to deliver value-added&#xD;
    services at the business system boundary).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Business Systems Contain Roles and Resources&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A business system is an abstraction of a collection of people, hardware, and software that work together to perform the&#xD;
    responsibilities of the business system. We use the word &quot;abstraction&quot; because we do not describe the internal&#xD;
    collaborations within the business system in terms of people, machines, and software, but in terms of roles and&#xD;
    resources. A business system contains business workers and business entities. A business worker is a role that&#xD;
    represents a &lt;em>system&lt;/em> as we define it in the glossary. As far as the business modeling effort is concerned, it&#xD;
    is a 'leaf' system, that is, it will be decomposed no further in the business modeling effort. We may decide during our&#xD;
    business modeling study that:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        a human (or humans) may be bound to a particular business worker role, in which case we can stereotype it&#xD;
        &lt;em>&amp;lt;&amp;lt;worker&amp;gt;&amp;gt;&lt;/em>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the role will be fulfilled by software (and associated computational hardware), in which case we can stereotype it&#xD;
        &lt;em>&amp;lt;&amp;lt;IT system&amp;gt;&amp;gt;&lt;/em>,&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        the role has to be performed by a more complex system, which itself may&amp;nbsp;use human, hardware and software&#xD;
        resources - but which is not considered to be a &lt;em>business&lt;/em> system for some reason. For example, in the&#xD;
        airport example below, we may model the business system 'Flights' to contain business workers that transport&#xD;
        passengers, that is, aircraft. Aircraft are complex systems in their own right, but decomposing them, their&#xD;
        behavior and design, requires a significant paradigm shift from business thinking. So in this context, we can leave&#xD;
        them as abstractions (although we will certainly be interested in specifying some of their characteristics - load&#xD;
        carrying capability, range, and fuel consumption, among others) and stereotype them&#xD;
        &lt;em>&amp;lt;&amp;lt;system&amp;gt;&amp;gt;.&lt;/em>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A business entity is a piece of information created or manipulated by business workers. These business workers can&#xD;
    eventually be mapped to human resources, or to specific hardware or software systems. This abstraction helps us focus&#xD;
    on the role and interfaces of the business worker and determine the &lt;i>necessary&lt;/i> responsibilities without having to&#xD;
    consider the (usually imperfect) real situation of a specific person or system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that some of the resources owned by a business system may be virtual - for example, a business system may share a&#xD;
    large mainframe with other business systems, but as far as the business systems are concerned, they own a virtual&#xD;
    machine. The mapping of virtual resources can be shown at the level that owns the real resource - in many cases this&#xD;
    will be the enterprise level (the entire business).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Business Use Cases Cut Across Business Systems&quot;&#xD;
    name=&quot;Business Use Cases Cut Across Business Systems&quot;>&lt;/a>Business Use Cases Cut Across Business Systems&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Business use cases must not be simply&amp;nbsp;&lt;em>allocated&lt;/em> to a business system. Business use cases are the&#xD;
    customer-facing processes that require the collaboration of a number of business systems, partners, and suppliers. This&#xD;
    is referred to as the &lt;i>value chain&lt;/i>. Business systems collaborate to perform business use cases, as shown in the&#xD;
    figure below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;325&quot; alt=&quot;Diagram shows collaboration between a customer, a partner, a regulatory body, and a supplier.&quot;&#xD;
    src=&quot;resources/bsys1.gif&quot; width=&quot;602&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is one exception: When creating business models at different levels of abstraction (see &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../extend.bus_model/guidances/concepts/modeling_large_organizations_DB7556B6.html&quot;&#xD;
    guid=&quot;1.268342166757605E-304&quot;>Concept: Modeling Large Organizations&lt;/a>), business use cases can be allocated to a&#xD;
    business system. For example, you may want to model the business as a whole as well as one of the business systems of&#xD;
    that business. In this case, there would be a Business Use-Case Model for the entire business, in which the overall&#xD;
    business use cases would cut across the business systems (as shown above). At a lower level, the services requested&#xD;
    from a particular business system could be captured as business use cases in the business system's Business Use-Case&#xD;
    Model. The guideline that states that business use cases should not be allocated to a business system should then&#xD;
    actually read: &quot;A business use case at a particular level should not be allocated in its entirety to only one business&#xD;
    system at a lower level.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This cross-functional nature of business use cases is one of the reasons for the interest in business modeling and&#xD;
    re-engineering, as well as in analysis of the cost and performance of business processes (see &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../extend.bus_model/guidances/concepts/activity-based_costing_8C3CE.html&quot;&#xD;
    guid=&quot;2.7281590029486614E-305&quot;>Concept: Activity-Based Costing&lt;/a>). It is more valuable to understand how the cost of&#xD;
    the entire business use case relates to the added value provided to the customer than to know how the annual budget of&#xD;
    one of the departments relates to the overall corporate budget.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Examples&quot; name=&quot;Examples&quot;>&lt;/a>Examples&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    Furniture Store&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The figure below shows the business systems for the furniture store used as an example in &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../extend.bus_model/guidances/guidelines/business_goal_CCCB68FF.html&quot;&#xD;
    guid=&quot;9.06687347922131E-306&quot;>Guideline: Business Goal&lt;/a> and &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.bus_model/guidances/guidelines/business_use-case_model_1C8E857B.html&quot;&#xD;
    guid=&quot;3.9905535055726305E-306&quot;>Guideline: Business Use-Case Model&lt;/a>. This store keeps large inventory in a warehouse&#xD;
    attached to its showroom. This allows customers to browse through the products on display in the showroom and pick up&#xD;
    the products they have purchased at the warehouse. Customers can arrange for delivery of large items.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram shows business systems for a furniture store.&quot; src=&quot;resources/bsys2.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    This business has been divided into three interdependent business systems. Each business system has a clear purpose and&#xD;
    provides well-defined services (not visible in the diagram). Explicitly defining these interdependencies and&#xD;
    interactions helps to optimize the business.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Airport&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An airport provides services to airlines and to passengers and visitors on behalf of the airlines. Because an airport&#xD;
    is a very large and complex business to model, it makes sense to divide it into a number of independent business&#xD;
    systems. Each business system can then be modeled independently as a business in its own right, as shown below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img alt=&quot;Diagram shows business systems for am airport.&quot; src=&quot;resources/bsys3.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    In the example above, we see that an airline would have to participate in the Passengers and Flights business systems.&#xD;
    Air traffic would be regulated by Air Traffic Control, according to laws and regulations. Hangar Facilities would&#xD;
    provide services to the ground crews of the airline. Both Passengers and Flights would use services provided by Baggage&#xD;
    Handling for departures and arrivals, respectively. The entertainment business system could also be called Airport&#xD;
    Facilities and would include such things as shops, waiting areas, parking, and transport.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
