<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q9v0YtoJEdm5N8vZEEaxbg" name="defining_a_vision_for_legacy_evolution,2.3529621571877724E-305" guid="_q9v0YtoJEdm5N8vZEEaxbg" changeDate="2005-06-30T18:43:51.531-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Assessing_Value&quot; name=&quot;Assessing_Value&quot;>Assessing the Value of a Legacy System&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    As stated in &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/legacy_evolution_CDF2C18F.html&quot;&#xD;
    guid=&quot;7.179899387270789E-307&quot;>Concept: Legacy Evolution&lt;/a>, when we talk about legacy systems, we suppose two things:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The system is large and old.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system original development was not done with the RUP.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This last point usually means that the development work products, when they exist, do not carry the usual RUP names or&#xD;
    are not in the form we expect them in the RUP. Very often, they are just missing or obsolete or so old that nobody can&#xD;
    trust them to still be relevant to the system. We can assume that other techniques were used: the design was not done&#xD;
    using object-oriented technology, the requirements did not employ use cases, and so on.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    We also assume that the legacy system represents a significant asset (a &quot;legacy&quot;) that is really worth reusing in some&#xD;
    form or another as opposed to scrapping it altogether. So the value of the current asset must be assessed: Is its value&#xD;
    in the code? The design? The requirements? Some of the algorithms or data? Or just the market share that the product&#xD;
    commands? Unfortunately, the older the system, the harder it is to grasp and use the existing assets. The software&#xD;
    documentation is very often obsolete, and the design must be reverse engineered (i.e., it requires &quot;design recovery&quot;),&#xD;
    sometimes from the code itself.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Having to deal with a legacy system is usually considered a negative, but the existence of a &quot;precedent&quot; system to&#xD;
    establish a point of comparison and use as a source of information is, in fact, very valuable. Unprecedented systems&#xD;
    are much harder and riskier to define and develop.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In particular, your legacy system will enable you to easily identify:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Requirements and business rules&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        What is architecturally significant&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Primary use cases&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Users' priorities, wishes, and behaviors&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    The only danger is that the legacy system can be an anchor, stifling the examination and consideration of fresher&#xD;
    approaches.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Once you have assessed the value of your legacy system, you can define an approach for evolving it.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Approaches_Evolving_Legacy&quot; name=&quot;Approaches_Evolving_Legacy&quot;>Approaches for Evolving a Legacy System&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    There is a broad range of evolutionary changes that we might want to undertake, from simple functionality extension to&#xD;
    a radical architectural change, to complete redesign and reimplementation. For each, different technical solutions and&#xD;
    levels of process formality will apply. Here are examples of legacy system evolutions:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Extension&quot;>Extension&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Cosmetic&quot;>Cosmetic makeover&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Migration&quot;>Migration&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Redevelopment&quot;>Redevelopment&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Integration&quot;>Integration&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#All&quot;>&quot;All of the above&quot;&lt;/a>&lt;br />&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Extension&quot; name=&quot;Extension&quot;>&lt;/a>Extension&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In simple cases, you just need to add some functionality or feature. Drivers, such as regulation changes, emerging&#xD;
    business needs, or new features made available by the competition, require a corresponding evolution of the existing&#xD;
    system. With many legacy systems, the older they are, the more difficult even simple additions become. The cumulative&#xD;
    effect of years of extension leads to a degradation of the system's architectural integrity, thus increasing the&#xD;
    difficulty of extending that system.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Cosmetic&quot; name=&quot;Cosmetic&quot;>&lt;/a>Cosmetic makeover&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Often you do not need to scrap the whole system, but only to give it a new look or perhaps take advantage of a new user&#xD;
    interface or inter-system interface technology. A solution based on wrapping certain components of your system to give&#xD;
    them a new interface or allow their reimplementation can lead to an acceptable result with minimal development. This is&#xD;
    the case for many applications that need to be rapidly &quot;Web-enabled,&quot; for example.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Migration&quot; name=&quot;Migration&quot;>&lt;/a>Migration&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The system may have exceeded the useful life of its underlying hardware, operating system, or middleware. It relies on&#xD;
    technologies that are either no longer maintained or are very costly to keep alive. The solution is to migrate the&#xD;
    legacy system to a new platform (hardware or software), preserving much of the existing software. For example, an&#xD;
    application developed for a DEC VAX VMS environment must rapidly be deployed on a wide range of Unix- and Linux-based&#xD;
    platforms. This was the case when we migrated the Rational Environment (a product with two million lines of code) from&#xD;
    our own proprietary platform to a range of Unix-based platforms, which led to the product known today as Rational Apex.&#xD;
    Whereas extension means adding new domain-specific behavior, migration means adapting the legacy system to a different&#xD;
    technology platform. Migration has less tangible domain-specific value, but failing to do it in a timely and efficient&#xD;
    way can lead to serious consequences.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Redevelopment&quot; name=&quot;Redevelopment&quot;>&lt;/a>Redevelopment&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    If the legacy system is a mission-critical system that has become extremely hard to evolve, that cannot scale up, and&#xD;
    that relies on obsolete hardware or software technologies, then you may have to redevelop it. Usually, you have to do&#xD;
    this gradually as you cannot afford to lose your existing customer base. This was the case for the Canadian Automated&#xD;
    Air Traffic System, which was running on very old hardware and an operating system more than twenty years old. You may&#xD;
    object that this option does not belong here; but even if you plan to rebuild a system from scratch, you should exploit&#xD;
    your legacy system to understand key aspects of the new system. It contains a wealth of both positive and negative&#xD;
    experience and knowledge.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Integration&quot; name=&quot;Integration&quot;>&lt;/a>Integration&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Because redeveloping a legacy system from scratch is not a financially viable option for many large companies, they&#xD;
    usually prefer to develop new features using new technologies and integrating these new applications with their legacy&#xD;
    system. This approach, called Enterprise Application Integration (EAI), enables them to move to new technologies while&#xD;
    leveraging existing legacy assets. For more on this approach, see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html&quot;&#xD;
    guid=&quot;3.047769946860121E-305&quot;>Concept: Enterprise Application Integration (EAI)&lt;/a> and &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/integrating_legacy_applications_into_modern_584F495E.html&quot;&#xD;
    guid=&quot;2.4617992790518683E-308&quot;>Technique: Integrating Legacy Applications Into Modern Architectures.&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;All&quot; name=&quot;All&quot;>&lt;/a>&quot;All of the above&quot;&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Finally, there are circumstances under which a company may need to do a migration, cosmetic makeover, and redevelopment&#xD;
    or integration in succession. They may need to rapidly move a legacy system to a new platform and give the system a&#xD;
    brand new look to satisfy market demands, then redesign the system and gradually replace the old code base,&#xD;
    chunk-by-chunk, using new technology -- software components, new language, and middleware -- in order to be able to&#xD;
    move forward. This is the most challenging and risky approach, but it can be done.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, a company with a large MIS application containing several million lines of RPG (Report Program Generator)&#xD;
    code developed on an IBM AS/400 platform had to convert this code to Java and be capable of running it on the Web and a&#xD;
    wide range of Windows and Unix systems. They successfully redesigned and implemented the application in Java over a&#xD;
    period of two to three years with only minor disruption to users.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Evaluating_Business_Case&quot; name=&quot;Evaluating_Business_Case&quot;>Evaluating the Business Case&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Vision needs to reflect an approach that makes good business sense. You do not evolve a legacy system just because&#xD;
    it is there. In general, it really is reasonable to keep legacy systems around: their development or acquisition is&#xD;
    typically a sunk cost, and most likely there is no business justification for scrapping them. However, resources spent&#xD;
    maintaining a legacy system could alternatively be spent on new opportunities. If you find that you are simply engaging&#xD;
    in preservation -- injecting resources into a system for emotional or historical reasons rather than for meaningful&#xD;
    business reasons or because you have not examined any alternatives -- then it is probably time to examine the business&#xD;
    case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A good business case needs to take in account the short term and long term impacts of the various alternatives, from&#xD;
    retaining the legacy system as is to the various options for evolution. The recommendations of the business case should&#xD;
    balance the short-term tactical business objectives and long-term strategic objectives of the organization.&lt;br />&#xD;
    &lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
