<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q_p44NoJEdm5N8vZEEaxbg" name="integrating_legacy_applications_into_modern,2.4617992790518683E-308" guid="_q_p44NoJEdm5N8vZEEaxbg" changeDate="2005-11-04T14:44:35.004-0800" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The mission-critical systems, frequently called &quot;legacy systems,&quot; of many large companies are often buried within&#xD;
    large, monolithic applications with no industry-standard interfaces and developed with older computer languages, such&#xD;
    as COBOL. Many of these companies wish to exploit internet, intranet, e-commerce, and other new technologies in order&#xD;
    to remain competitive. However, rewriting these key &quot;legacy systems&quot; may not be a viable option from a financial (too&#xD;
    expensive) or technical (initial programmers no more in the company) or timing (can't afford to wait) point of view.&#xD;
    The alternative chosen by many companies is to modernize their &quot;legacy systems&quot; by integrating them with new&#xD;
    applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The most popular way to make such integration is commonly called &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html&quot;&#xD;
    guid=&quot;3.047769946860121E-305&quot;>Enterprise Application Integration or EAI&lt;/a> and consists in implementing a&#xD;
    communication infrastructure between the various enterprise applications, both new and legacy.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Legacy_Integration_Strategy&quot; name=&quot;Legacy_Integration_Strategy&quot;>&lt;/a>Legacy Integration Strategies&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Legacy integration can be divided into two main categories :&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Non_invasive&quot;>Non-invasive&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Invasive&quot;>Invasive&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Non_invasive&quot; name=&quot;Non_invasive&quot;>Non-invasive&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Non-invasive strategies are those that don't modify the legacy application or perform only minor modifications. This&#xD;
    strategy is the less expensive one but is also the less flexible. This approach is usually used when EAI integration is&#xD;
    done at &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#User_Interface_Level&quot;&#xD;
     guid=&quot;3.047769946860121E-305&quot;>user interface level&lt;/a>, at &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#Data_Level&quot;&#xD;
    guid=&quot;3.047769946860121E-305&quot;>data level&lt;/a>, or sometimes at &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#Application_Interface_Level&quot;&#xD;
     guid=&quot;3.047769946860121E-305&quot;>application interface level&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When integration is done at the user interface level, the existing text-based screens are replaced by browser-based&#xD;
    ones integrated in an enterprise business portal. Even if this kind of integration is usually considered somewhat&#xD;
    unstable and archaic, it is sometimes the most practical way to integrate legacy systems that do not provide database-&#xD;
    or business process-level access.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Data level integration can be done by either reusing the existing legacy database or by extracting the data from the&#xD;
    existing database and updating a new database using an ETL (Extract, Transform, Load) solution. Even if this approach&#xD;
    seems attractive, it is sometimes difficult to implement because data transformation, constraints, and controls are&#xD;
    often implemented in the business logic of the legacy applications.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Non-invasive application interface-level integration, called also &quot;legacy wrapping,&quot; can offer a little more&#xD;
    flexibility. In this approach, you build callable Application Programming Interfaces (API) around legacy transactions.&#xD;
    Since this approach leverages existing legacy transactions, it is not very expensive and avoids the inconveniences of&#xD;
    data-level integration. By transforming the transactions in APIs, it gives more flexibility than user-level&#xD;
    integration. However, to remain non-invasive, this approach cannot be used to modify and enhance business features. For&#xD;
    that, you need to use an invasive approach.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Invasive&quot; name=&quot;Invasive&quot;>Invasive&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    An invasive strategy supposes that you need to modify functional legacy code. Obviously, there is more risk and cost&#xD;
    with this kind of approach because usually legacy code is old, not well documented, and the programmers who wrote it&#xD;
    are rarely available. But this type of approach is also the one that gives more flexibility and allows you to modify&#xD;
    and enhance existing business processes and features. This approach is usually used with EAI &lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#Application_Interface_Level&quot;&#xD;
     guid=&quot;3.047769946860121E-305&quot;>application interface level&lt;/a> integration when you need APIs that do not correspond to&#xD;
    existing legacy transactions. This approach could be also used with EAI &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#Method_Level&quot;&#xD;
     guid=&quot;3.047769946860121E-305&quot;>method-level&lt;/a> integration, but refactoring the existing code to provide sharable&#xD;
    methods is often too expensive.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One invasive application interface level integration approach is called &quot;legacy e-Components.&quot; This approach consists&#xD;
    of partitioning the legacy application into a collection of autonomous business components. Each component publishes a&#xD;
    clearly defined set of APIs that facilitates the move from rigid program-to-program connectivity toward a more loosely&#xD;
    connected message-based approach that can be deployed in multiple platforms and integrated into the overall&#xD;
    architecture using appropriate component models. This approach can be refined to define each &quot;legacy e-Component&quot; as&#xD;
    one or more services in a Service-Oriented Architecture (SOA), using XML web services. See &lt;a&#xD;
    class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/service-oriented_architecture_92BDF995.html&quot;&#xD;
    guid=&quot;1.0245783036914358E-305&quot;>Concept: Introduction to Service-Oriented Architecture&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Because invasive approaches are typically more expensive and architecturally risky than non-invasive approaches, you&#xD;
    should consider adopting an iterative approach that drives down risks and proves architecture feasibility in the early&#xD;
    iterations.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
