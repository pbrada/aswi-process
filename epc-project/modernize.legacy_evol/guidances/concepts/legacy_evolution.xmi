<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q8geQNoJEdm5N8vZEEaxbg" name="legacy_evolution,7.179899387270789E-307" guid="_q8geQNoJEdm5N8vZEEaxbg" changeDate="2007-05-25T10:57:55.455-0700" version="1.0.0">
  <mainDescription>&lt;h6>&#xD;
    &lt;b>&lt;font size=&quot;2&quot;>Activities across the lifecycle:&lt;/font>&lt;/b>&#xD;
&lt;/h6>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Introduction&quot;>Introduction&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Establishing_Baseline&quot;>Establishing a Baseline&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Going_Forward_RUP&quot;>Going Forward with the RUP&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Evolution_Cycle&quot;>The Evolution Cycle&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Summary&quot;>Summary&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Reference&quot;>Reference&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;table>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td width=&quot;284&quot; height=&quot;102&quot;>&#xD;
                &lt;h6>&#xD;
                    &lt;b>&lt;font size=&quot;2&quot;>Additional topics:&lt;/font>&lt;/b>&#xD;
                &lt;/h6>&#xD;
                &lt;ul>&#xD;
                    &lt;li>&#xD;
                        &lt;b>Concepts&lt;/b> &#xD;
                        &lt;ul>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLinkWithType&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html&quot;&#xD;
                                 guid=&quot;3.047769946860121E-305&quot;>Concept: Enterprise Application Integration&lt;/a>&#xD;
                            &lt;/li>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLinkWithType&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/concepts/service-oriented_architecture_92BDF995.html&quot;&#xD;
                                 guid=&quot;1.0245783036914358E-305&quot;>Concept: Introduction to Service-Oriented Architecture&lt;/a>&#xD;
                            &lt;/li>&#xD;
                        &lt;/ul>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;b>Guidelines&lt;/b> &#xD;
                        &lt;ul>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLink&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/defining_a_vision_for_legacy_evolution_BB4F8530.html&quot;&#xD;
                                 guid=&quot;2.3529621571877724E-305&quot;>Defining a Vision for Legacy Evolution&lt;/a>&#xD;
                            &lt;/li>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/integrating_legacy_applications_into_modern_584F495E.html&quot;&#xD;
                                 guid=&quot;2.4617992790518683E-308&quot;>Integrating Legacy Applications into Modern&#xD;
                                Architectures&lt;/a>&#xD;
                            &lt;/li>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLink&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/designing_data_migration_subsystems_91604F58.html&quot;&#xD;
                                 guid=&quot;3.368322488876367E-305&quot;>Designing Data Migration Subsystems&lt;/a>&#xD;
                            &lt;/li>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLink&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/defining_test_strategy_for_data_migration_2894B71E.html&quot;&#xD;
                                 guid=&quot;9.407365359850219E-305&quot;>Defining Test Strategy for Data Migration&lt;/a>&#xD;
                            &lt;/li>&#xD;
                        &lt;/ul>&#xD;
                    &lt;/li>&#xD;
                    &lt;li>&#xD;
                        &lt;b>White Papers&lt;/b> &#xD;
                        &lt;ul>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLink&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/whitepapers/using_soa_and_cbd_to_build_web_service_applications_25DD051E.html&quot;&#xD;
                                 guid=&quot;7.466429252179675E-305&quot;>Using Service-Oriented Architecture and Component-Based&#xD;
                                Development to Build Web Service Applications&lt;/a>&#xD;
                            &lt;/li>&#xD;
                            &lt;li>&#xD;
                                &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
                                href=&quot;./../../../modernize.legacy_evol/guidances/whitepapers/ibm_rational_rapid_developer_a_guide_to_legacy_integration_DFC77B6C.html&quot;&#xD;
                                 guid=&quot;7.667793475374344E-305&quot;>A Guide to Legacy Integration with IBM Rational Rapid&#xD;
                                Developer&lt;/a>&#xD;
                            &lt;/li>&#xD;
                        &lt;/ul>&#xD;
                    &lt;/li>&#xD;
                &lt;/ul>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;h2>&#xD;
    &lt;font face=&quot;Arial&quot;>&lt;b>&lt;small>&lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&lt;/small>&lt;/b>&lt;/font>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    A legacy system has been defined as a system that &quot;...significantly resists modification and evolution to meet new and&#xD;
    constantly changing business requirements.&quot;[&lt;a href=&quot;#Reference1&quot;>1&lt;/a>] It usually implies that the system is large&#xD;
    and old. In this context, it also means &quot;a system originally developed using a process other than RUP.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    By &quot;evolution&quot; we mean a significant project for updating, incorporating, or redeveloping a legacy system. Thus, this&#xD;
    roadmap doesn't describe how RUP can be used for ongoing maintenance of mature systems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Usually, the first thing to do is to define a vision for the proposed evolution, answering questions such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Where is the value of your legacy system?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        How do you want it to evolve?&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Is there a business case supporting the planned evolution?&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    A more detailed discussion of these topics can be found in the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/guidelines/defining_a_vision_for_legacy_evolution_BB4F8530.html&quot;&#xD;
    guid=&quot;2.3529621571877724E-305&quot;>Guideline: Defining a Vision for Legacy Evolution&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Common challenges of evolving legacy systems include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The system is poorly understood. &#xD;
        &lt;ul>&#xD;
            &lt;li>&#xD;
                Documentation is out of date.&#xD;
            &lt;/li>&#xD;
            &lt;li>&#xD;
                Original developers are not available, and the remaining staff has limited knowledge of how the system&#xD;
                actually works.&#xD;
            &lt;/li>&#xD;
        &lt;/ul>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The system was developed using older software development methods and technologies which may not be suitable for&#xD;
        future development effort.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    As with all projects, the fundamental principles of RUP are applicable to legacy evolution projects.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These principles are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Early risk mitigation&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Iterative development&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Progress assessment based on concrete, measurable evidence&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Organization around small, empowered teams&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Verifying quality continuously&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Scope management&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Producing only the work products that are needed&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    This already makes the basic RUP lifecycle template, with its four phases of Inception, Elaboration, Construction, and&#xD;
    Transition, fully applicable to a legacy system project. This, in turn, makes most of the Project Management activities&#xD;
    of the RUP fully applicable as well.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The adaptation of the Rational Unified Process (RUP) to deal with evolution of legacy systems is discussed in further&#xD;
    detail below.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Establishing_Baseline&quot; name=&quot;Establishing_Baseline&quot;>&lt;font face=&quot;Arial&quot;>Establishing a&#xD;
    Baseline&lt;/font>&lt;/a>&lt;/small>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    To go beyond simply applying the RUP lifecycle and use other disciplines of the RUP going forward, you need to&#xD;
    establish a starting point. You must identify a minimal set of essential work products describing the legacy system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Depending on the scope of the evolution, you may need more or less of:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Requirements&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Architecture and design&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Tests&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User documentation&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Once you have established this baseline of RUP work products, you can proceed with the legacy project as if it were a&#xD;
    RUP Evolution cycle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Establishing a minimal set of work products that will allow your project to proceed as per the RUP requires some&#xD;
    reverse engineering on your legacy system. By reverse engineering, we mean trying to identify, extract, or recreate&#xD;
    enough information to enable you to proceed almost as if the project had been originally developed using the RUP. This&#xD;
    is the point at which many project managers are ready to scrap the RUP for their legacy project, as they perceive this&#xD;
    reverse engineering effort to be a huge waste of time. It does not need to be such an immense effort, though, as the&#xD;
    intent is not to recreate every single work product, but to understand the key attributes of the current system and&#xD;
    determine what should be conserved and what should be replaced or upgraded.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The RUP templates for these work products can be used, as well as some of the associated guidelines and checklists, but&#xD;
    you probably want to tailor the templates first to avoid falling into the trap of documenting elements you do not need.&#xD;
    In many cases, you can &quot;fill in&quot; the templates (in your first pass) by cross-referencing; that is, indicating in which&#xD;
    existing document the corresponding information can be found. If the existing documentation is online in HTML, then&#xD;
    hyperlinks can be used.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note that this step of establishing a baseline is not RUP specific. Whatever process or method you will use to go&#xD;
    forward, you will need to do some reverse engineering of the existing system.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Requirements&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Perhaps the greatest value of a legacy system is as a requirements specification for the new system.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For example, when we started Rational Apex, the first draft of our &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_vision_2D6D6F1.html&quot; guid=&quot;{417F089F-6636-451A-A8AB-AB4EAC7AC4F1}&quot;>Vision&#xD;
    Document&lt;/a> stated &quot;...it has first to do everything that the Rational Environment (version Delta) does, and do it no&#xD;
    slower.&quot; Then we specified deviations from the Rational Environment: features added, features dropped.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A smart team never retrospectively documents the requirements of a legacy system, so you do not have to restart the&#xD;
    requirements effort from scratch; you only need to identify your key use cases. You probably have them already,&#xD;
    described in the current User's Manual. Just having an inventory of the use cases (a &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.formal_resources/guidances/reports/use-case_model_survey_F909BC71.html&quot;&#xD;
    guid=&quot;5.732873433575423E-305&quot;>Report: Use-Case Model Survey&lt;/a>)&amp;nbsp;may be enough. You will only need to detail the&#xD;
    use cases that need to change. Many of the nonfunctional requirements can be derived from your marketing or&#xD;
    installation documentation: capabilities, size and performance characteristics, operating systems, memory, peripherals,&#xD;
    other software, general constraints, and most of the &quot;ilities.&quot; If you are not using a requirements management tool,&#xD;
    then maybe now is the right time to start. Finally, a good additional artifact to create while doing this reverse&#xD;
    engineering is a &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_glossary_A5D79A0C.html&quot;&#xD;
    guid=&quot;{3BF8CC04-9101-47A4-9473-C8205EA588B6}&quot;>Glossary&lt;/a> of terms used in the legacy system, collecting terms as you&#xD;
    encounter them. It can prove invaluable when going forward.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Architecture and Design&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Your legacy system does not need to be completely redesigned using object-oriented (OO) techniques. You will, however,&#xD;
    need a minimal amount of architectural information. You can create a minimal &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_software_architecture_document_C367485C.html&quot;&#xD;
    guid=&quot;{6F49641A-ED10-47B5-9E5D-3F90A6BF3006}&quot;>Software Architecture Document&lt;/a>, starting from the &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/implementation_view_E373E3B6.html&quot;&#xD;
    guid=&quot;4.693519701160983E-305&quot;>Implementation View&lt;/a>: What are the various subsystems or main bodies of code? What are&#xD;
    the critical interfaces? From this information, you can identify your &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/deployment_view_64CB74A6.html&quot; guid=&quot;2.8416696002928195E-305&quot;>Deployment&#xD;
    View&lt;/a> and your &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/process_view_E3DD0B09.html&quot;&#xD;
    guid=&quot;6.45284088262517E-306&quot;>Process View&lt;/a> if the legacy system is distributed. You will need a precise inventory of&#xD;
    the existing software, clearly identifying each element and the relationships among them. If the software is not yet&#xD;
    under configuration management, now is the right time to start controlling it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Describing the interfaces and the scenarios of how these interfaces are exercised is crucial. Later on, you will&#xD;
    identify the subsystems that are not affected by the evolution: the stable, core, reusable chunks of the legacy system.&#xD;
    Do you need a detailed software design documentation as well as these interface descriptions? If you have it and can&#xD;
    trust it, that is nice, but do not embark on a huge effort to produce it before you know what pieces need to be&#xD;
    changed. Even then, proceed on a case-by-case basis. Tools can help you do this reverse engineering within a few days&#xD;
    of effort.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    You will need also to identify the different data sources of your legacy system that need to be migrated and record&#xD;
    their data profile in the &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/workproducts/database_migration_specification_5091901D.html&quot;&#xD;
    guid=&quot;{24309CAC-2A58-4011-B0F0-0A7D2FD58AEA}&quot;>Data Migration Specification&lt;/a>. This will be crucial information when&#xD;
    you start defining the data mapping between existing data sources and those needed by the new version of the system.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Tests&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Whatever tests, test scripts, test cases, and test harnesses were developed for the legacy system will still be largely&#xD;
    applicable to the new system.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    User Documentation&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Unless there is an incentive to completely revamp it, the user documentation for the legacy system can constitute a&#xD;
    good baseline for the new system.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Going_Forward_RUP&quot; name=&quot;Going_Forward_RUP&quot;>&lt;font face=&quot;Arial&quot;>Going Forward with the&#xD;
    RUP&lt;/font>&lt;/a>&lt;/small>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    Once you have established your minimal RUP work product baseline, much of it by reference to existing information, you&#xD;
    can now proceed. Most of the tasks of the RUP apply, just as they do in Construction and Transition iterations for a&#xD;
    brand new development project. Yet, as always, try to keep things as light as possible as you choose what to adopt from&#xD;
    RUP; do not execute tasks or create work products that are unnecessary.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Requirements Management&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Express new requirements using &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_usecase_A5D30E62.html&quot; guid=&quot;{B1526BC5-E346-42CB-A08A-3C0D7F382407}&quot;>use&#xD;
    cases&lt;/a>. You may have to recreate a use case for existing functionality to better articulate what is being changed.&#xD;
    If several use cases need to be added or changed, you may find it useful to derive a small Domain Model from your&#xD;
    Glossary.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Architecture and Design&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    You might want to use object-oriented techniques and the UML (Unified Modeling Language) for your new development. A&#xD;
    handy technique is to consider some of the least affected subsystems as big composite classes, especially when you are&#xD;
    doing sequence diagrams. The resulting &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot; guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design&#xD;
    Model&lt;/a> should only go into details for the classes that are architecturally important or that need to evolve.&#xD;
    Proxies can be created for these classes, mapping their functionality to the existing code.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If your long-term goal is ambitious and aims at a complete, gradual replacement of the legacy system, you will have to&#xD;
    do an architectural design for the new system, and then map it to the existing subsystems. You can create wrappers&#xD;
    around some of the existing body of code to make it look like it was designed using OO techniques. Reassembling the&#xD;
    complete system with the various wrappers can be an internal milestone in your elaboration phase. As you go into&#xD;
    use-case design, your &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_use_case_realization_E4F713BD.html&quot;&#xD;
    guid=&quot;{87EB094F-095B-4981-ACC3-319B3B298641}&quot;>use-case realizations&lt;/a> will show you the impact on various existing&#xD;
    subsystems. Then you can decide which of these &quot;wrapped subsystems&quot; need be converted, ported, rewritten, or integrated&#xD;
    in an &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html&quot;&#xD;
    guid=&quot;3.047769946860121E-305&quot;>EAI (Enterprise Application Integration)&lt;/a> framework.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The Data Migration Specification needs to be completed with the source-target data mapping. It will be used to&#xD;
    implement the migration components necessary to perform the data migration.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In some limited cases, you might be able to use tools, such as IBM Rational XDE or Rose, to reverse engineer elements&#xD;
    of your existing code into the UML. But do not rely on using the results blindly; they will always require some human&#xD;
    interpretation.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Going_Forward_RUP_Deployment&quot; name=&quot;Going_Forward_RUP_Deployment&quot;>&lt;/a>&lt;/small>&lt;/b>Deployment&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Depending on the scope of the evolution, deployment of the new system may be more challenging than a green field&#xD;
    development. If you migrated the system to a new architecture or redeveloped significant portions of it, you will have&#xD;
    to choose a strategy: either to cut over &quot;cold turkey&quot; from the old system to the new one or use a phased strategy and&#xD;
    do the transition in small incremental steps. You can even have both systems working in parallel until the new one can&#xD;
    be fully trusted. In practice, deployment is often much more delicate with a legacy system than a new application as&#xD;
    you need to tackle issues of data conversion and migration, continuity of operations, retraining of personnel, and so&#xD;
    on. This deployment strategy could be described in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_deployment_plan_93F2F60B.html&quot;&#xD;
    guid=&quot;{993ED293-A529-4B3F-82CB-2BF289D9E4E4}&quot;>Deployment Plan&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Other Disciplines&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Other software development disciplines with all their tasks, guidelines, techniques, and tools also apply: test and&#xD;
    implementation, for example. Configuration management may be more relevant and required earlier in the project than for&#xD;
    a new development as you start from day one with many existing work products, sometimes with complex dependencies&#xD;
    between them. In a legacy system upgrade, change management becomes a dominant activity.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Often, the decision to redevelop a legacy system also represents an opportunity to reengineer business processes, using&#xD;
    business modeling, which could lead to a different set of requirements for the new system.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Evolution_Cycle&quot; name=&quot;Evolution_Cycle&quot;>&lt;font face=&quot;Arial&quot;>The Evolution Cycle&lt;/font>&lt;/a>&lt;/small>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    A legacy evolution project goes through the same cycle of phases as all RUP projects. The objectives of these phases&#xD;
    are essentially the same; however, the following sections describe some specifics for legacy evolution projects.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Inception phase&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The RUP Inception phase specifies that you produce a Vision Document and Business Case, as well as an Initial&#xD;
    Development Case specifying which work products you need to recreate. In this phase, you will also start the process of&#xD;
    reverse engineering for some of the work products: requirements and architecture, mainly, in order to be able to choose&#xD;
    the appropriate evolution strategy and estimate its cost.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Elaboration phase&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In this phase, you will complete your RUP baseline, the minimal set of work products that you need to go forward,&#xD;
    including the conversion of some older work products to the new tool set. For simple extensions, this can be done in&#xD;
    one short iteration. But if there are a large number of architectural changes to go through, as in a migration strategy&#xD;
    or redevelopment, then you will have several iterations in this elaboration phase to implement a new architectural&#xD;
    baseline. It may even be that this Elaboration phase is the dominant phase and that there will be little to do in&#xD;
    Construction and Transition. Testing is put in place in the new environment, and regression testing can start early.&#xD;
    Unlike Elaboration for a green-field development, there is from the beginning a large number of work products -- code&#xD;
    in particular -- to manage, and tasks from the Change and Configuration Management discipline may have to be stressed&#xD;
    earlier.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Construction phase&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This phase is not significantly different from any other RUP project, except that much of the work involves interfacing&#xD;
    to or reworking existing code rather than developing new code. Additional elements are reverse-engineered, redesigned,&#xD;
    and documented as necessary.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Transition phase&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The Transition phase may be more delicate, depending on the deployment strategy to go from the old system to the new&#xD;
    one; see the section on &lt;a href=&quot;#Going_Forward_RUP_Deployment&quot;>Deployment&lt;/a> above.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    RUP's iterative approach is particularly helpful in staging legacy evolutions, with its concrete and measurable&#xD;
    objectives for each iteration. Joe Marasco, the manager for the Rational Apex project wrote:&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&#xD;
        &quot;We decided which bits of functionality needed to be moved first, which parts will be moved without touching them&#xD;
        at all, which will be moved in later iterations. The version on Sun OS was postponed to a later iteration, once the&#xD;
        version on AIX was stable. Instead of seeing the butterfly emerge in one day from the cocoon, you plan its&#xD;
        metamorphosis and track its evolution iteration by iteration. I cannot imagine managing the evolution of a complex&#xD;
        legacy system by any other means.&quot;&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;h2>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Summary&quot; name=&quot;Summary&quot;>&lt;font face=&quot;Arial&quot;>Summary&lt;/font>&lt;/a>&lt;/small>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;p>&#xD;
    How do you apply the RUP to a legacy system?&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        First, by understanding what you are trying to do.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Second, by intelligently exploiting what you already have.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Third, by focusing on the principles and not necessarily the details of the RUP.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Large portions of the RUP can be used for the evolution of a legacy system, with more or less tailoring and formality,&#xD;
    depending on the type of evolution you envisage and how much information on the legacy system is at hand.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Just because it is a legacy system, there is no reason not to have a Vision Document, describing what it is you want to&#xD;
    achieve; a Project Plan, showing major milestones and what you want to accomplish; maybe iterations and their specific&#xD;
    objectives; and a &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_risk_list_B87674CA.html&quot;&#xD;
    guid=&quot;{32D7C484-2FAF-4442-8DA0-6D474B91A9DD}&quot;>Risk List&lt;/a>. You also need a Business Case to be able to discuss the&#xD;
    benefits of doing the project and the approach you will take.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additional RUP work products can also be developed by extracting from or reverse engineering the existing system.&#xD;
    However, this should be done judiciously, as it is often more cost-effective to continue to use and reference existing&#xD;
    documentation rather than change it to RUP format.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One caution is that we have seen projects fail when too many changes were attempted at the same time: a major evolution&#xD;
    of a legacy system (e.g., a migration to a new platform) at the same time as a change of process (e.g., going to the&#xD;
    RUP) and a change of tool set (e.g., going to Rational Suites). It is preferable to introduce a new process and new&#xD;
    tools during an earlier project before you undertake a major legacy evolution so that developers can become familiar&#xD;
    with the RUP, its philosophy, and its contents, as well as the tools that support it. Avoid multiplying risk for the&#xD;
    project by introducing too many unknowns and changes simultaneously.&#xD;
&lt;/p>&#xD;
&lt;h2>&#xD;
    &lt;b>&lt;small>&lt;a id=&quot;Reference&quot; name=&quot;Reference&quot;>&lt;font face=&quot;Arial&quot;>Reference&lt;/font>&lt;/a>&lt;/small>&lt;/b>&#xD;
&lt;/h2>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;a id=&quot;Reference1&quot; name=&quot;Reference1&quot;>&lt;/a>Michael Brodie and Michael Stonebraker, Migrating Legacy Systems, San&#xD;
        Francisco: Morgan Kaufmann Publishing, 1995.&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
