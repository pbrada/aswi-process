<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q917AtoJEdm5N8vZEEaxbg" name="enterprise_application_integration,3.047769946860121E-305" guid="_q917AtoJEdm5N8vZEEaxbg" changeDate="2005-06-30T18:38:16.970-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The increasing need for real-time and consolidated information has increasingly motivated companies to find a way to&#xD;
    integrate their disparate existing systems. The process of this integration is referred to as Enterprise Application&#xD;
    Integration (EAI).&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;What_EAI&quot; name=&quot;What_EAI&quot;>&lt;/a>What is EAI&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    EAI is the process of integrating multiple software applications that were independently developed, use incompatible&#xD;
    technology, and remain independently managed.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Fundamentally, EAI is about sharing and exchanging data and business processes among the different applications and&#xD;
    data sources in the enterprise.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Types_EAI&quot; name=&quot;Types_EAI&quot;>&lt;/a>Types of EAI&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    EAI can be done at different levels, depending on many factors including company size and industry, integration and/or&#xD;
    project complexity, and budget.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are four main integration levels:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Data_Level&quot;>Data Level&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Application_Interface_Level&quot;>Application Interface Level&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#Method_Level&quot;>Method Level&lt;/a>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a href=&quot;#User_Interface_Level&quot;>User Interface Level&lt;/a>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Data_Level&quot; name=&quot;Data_Level&quot;>&lt;/a>Data Level&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Data Level EAI is a database-centric approach that consists of extracting data from one database and updating it in&#xD;
    another. Sometimes the extracted data can be transformed before entering it into the target database, for example, to&#xD;
    apply specific business rules.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Data-level integration is commonly done through ETL (Extract, Transform, Load) tools that can extract, transform,&#xD;
    cleanse, and load data from various data sources to a common enterprise data repository (a data warehouse) or data&#xD;
    repositories tuned to serve different business needs (data marts).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The main benefits of this approach are its low cost and low risk profile. Because we do not make any modification to&#xD;
    the existing code of the applications, we do not need to incur the expenses related to developing, testing, and&#xD;
    deploying new versions of the applications. The main drawbacks of this approach are the huge quantity of databases and&#xD;
    tables that are generated, the need for the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/roles/rup_database_designer_524DC34F.html&quot; guid=&quot;{87EE3BF5-17CA-4211-BD3D-32F361E58550}&quot;>Database&#xD;
    Designer&lt;/a> to understand the data that is being moved, and the associated business rules.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Application_Interface_Level&quot; name=&quot;Application_Interface_Level&quot;>&lt;/a>Application Interface Level&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    This EAI level of integration consists of leveraging the interfaces provided by custom or packaged applications to&#xD;
    access business processes and simple information. Usually, this kind of integration is done in a three-step process:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Extract the information from one application through a provided application interface.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Convert the data in a format understandable by the target application.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Transmit the information to the target application.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The most commonly used approach to implement this kind of integration is called &quot;message broker,&quot; an approach which&#xD;
    standardizes and controls the flow of information through a bus or a hub framework.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    But with the increasing popularity of web services, legacy and packaged applications are starting to use them to expose&#xD;
    their business features. The availability of these business functions as reusable services causes the increased use of&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/service-oriented_architecture_92BDF995.html&quot;&#xD;
    guid=&quot;1.0245783036914358E-305&quot;>Service-Oriented Architectures (SOA)&lt;/a> as an alternative to &quot;message broker.&quot;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The main benefits of this approach are the fact that the interfacing between the different applications is relatively&#xD;
    easy due to the fact that the application interfaces are provided by application. A negative aspect of this approach is&#xD;
    the cost of the message broker technology. In the past, these interfaces were often application dependent, obliging the&#xD;
    developers to learn the specific features and functions of each interface. But with the increasing popularity of XML&#xD;
    and its adoption as a standard language for many application interfaces, this problem is disappearing.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Method_Level&quot; name=&quot;Method_Level&quot;>&lt;/a>Method Level&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Method-level integration is similar to application interface level but at a lower level of granularity. The idea here&#xD;
    is not to share business functions (as in application interface level), but to share directly the different methods&#xD;
    used to compose a given business function. All other enterprise applications needing to implement the same methods can&#xD;
    use them without having to rewrite it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Even if this integration level can be done with a lot of technologies (Java RMI, Corba, DCOM, etc.), the emerging trend&#xD;
    in implementing this approach is to use Web services as a way to share the methods.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The ability to share methods and to reuse business logic make this approach very suited for EAI. But the downside to&#xD;
    this approach is that it is also the more invasive approach because it supposes the modification of existing&#xD;
    applications to allow the sharing at such a low level.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;User_Interface_Level&quot; name=&quot;User_Interface_Level&quot;>&lt;/a>User Interface Level&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    User interface-level EAI is also commonly called &quot;Refacing&quot; and consists of replacing existing text-based user&#xD;
    interfaces of legacy systems and graphical interfaces of PCs by a standardized interface, typically browser-based.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Enterprise business portals are an emerging solution for this kind of integration and consist of federating the&#xD;
    presentation of multiple applications into one customizable browser-based interface.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This kind of integration is less expensive than other approaches, as the code of the existing applications is not&#xD;
    modified. However, this approach is also less flexible for the same reason.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;EAI_Middleware&quot; name=&quot;EAI_Middleware&quot;>&lt;/a>EAI and Middleware&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In EAI, middleware technology is just used as a mechanism to move information and share business processes from one&#xD;
    application to another. The middleware hides the complexities of the communication mechanism between source and target&#xD;
    systems. This allows the developers to concentrate on dealing with the APIs (Application Programming Interfaces) of&#xD;
    each system, while the middleware handles the passing of the information between the two systems. The same middleware&#xD;
    API can be used by different applications running on different platforms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As an underlying technology of EAI, middleware can be used at any level of integration (even at &lt;a&#xD;
    href=&quot;#User_Interface_Level&quot;>user interface level&lt;/a> because business portals can be considered as a kind of&#xD;
    middleware). However, the most common use of middleware technology is with message broker at &lt;a&#xD;
    href=&quot;#Application_Interface_Level&quot;>application interface level&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;EAI_XML&quot; name=&quot;EAI_XML&quot;>&lt;/a>EAI and XML&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The eXtensible Markup Language (XML) standard is a text-based markup language specification from the World Wide Web&#xD;
    Consortium (W3C) whose objective is to define portable structured data. Because XML is simple and becoming a widely&#xD;
    used interchange format, it is ideal as EAI message format and protocol.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    XML can be used with every integration level (except perhaps at user interface level). It can be used at data level as&#xD;
    common data exchange format, at application interface level as messaging format and/or protocol within a message&#xD;
    broker, or in a &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/service-oriented_architecture_92BDF995.html&quot;&#xD;
    guid=&quot;1.0245783036914358E-305&quot;>Service-Oriented Architectures (SOA)&lt;/a> as support for web services. Because Web&#xD;
    services are built using XML, it also has a place at method-level integration.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Further_Reading&quot; name=&quot;Further_Reading&quot;>&lt;/a>Further Reading and References&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        David Linthicum, Next Generation Application Integration: From Simple Information to Web Services, Addison-Wesley,&#xD;
        2003.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Gregor Hope and Bobby Woolf, Enterprise Integration Patterns, Addison-Wesley, 2003.&#xD;
    &lt;/li>&#xD;
&lt;/ol></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
