<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_q-_KgNoJEdm5N8vZEEaxbg" name="service-oriented_architecture,1.0245783036914358E-305" guid="_q-_KgNoJEdm5N8vZEEaxbg" changeDate="2005-10-25T14:56:49.071-0700" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>&lt;/a>Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/supportingmaterials/use_component_architectures_CBC2F6B5.html&quot;&#xD;
    guid=&quot;1.2991947604188333E-306&quot;>Component-based architecture/component-based development&lt;/a> is a RUP practice because&#xD;
    components are an effective means of dividing a complex system into manageable parts and because components enable&#xD;
    reuse. Service-Oriented Architecture (SOA) is a specialization of component-based architecture based on the use of&#xD;
    published and dynamically discoverable services.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;What_SOA&quot; name=&quot;What_SOA&quot;>&lt;/a>What is SOA?&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A Service is a logical component that defines a set of interfaces and that is not allocated to a defined user but to&#xD;
    multiple clients which can share it. A Service Provider is a component that implements the service interfaces. Services&#xD;
    and service providers are published and accessed via a repository called a Service Broker. These services can be&#xD;
    discovered and accessed by other components (user applications or other services) through the service broker, following&#xD;
    the principles shown in the figure below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;251&quot; alt=&quot;Diagram described in accompanying text.&quot;&#xD;
    src=&quot;./../../../modernize.legacy_evol/resources/co_SOA1.GIF&quot; width=&quot;305&quot; />&lt;br />&#xD;
     Figure 1 - SOA participants and their main operations&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This separation between the service interfaces and their implementation by the service provider allows for multiple&#xD;
    providers for the same service and for providers to be added or replaced dynamically without impact on the service&#xD;
    requesters. Service requesters can dynamically discover the services and the related service providers they need. The&#xD;
    publish/discover principle makes SOA a more flexible and more loosely coupled architecture than traditional&#xD;
    architectures. This is particularly useful when integrating or composing disparate systems, such as legacy systems with&#xD;
    packaged applications and J2EE or .Net applications. See &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/concepts/enterprise_application_integration_3CEC2399.html#Application_Interface_Level&quot;&#xD;
     guid=&quot;3.047769946860121E-305&quot;>Concept: Enterprise Application Integration, Application Interface Level Integration&lt;/a>&#xD;
    for more on this kind of integration.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;What_Service&quot; name=&quot;What_Service&quot;>&lt;/a>Services Characteristics&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following are key characteristics of services:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;b>Coarse-grained and business oriented:&lt;/b> Because there is always some latency due to network communication, a&#xD;
        service should hide a substantial body of the application logic, giving significant business value to the consumer&#xD;
        in one call.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Interface-based design:&lt;/b> A service implements a defined set of interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Invoked and discoverable:&lt;/b> A service and providers of the service can be discovered by other systems and&#xD;
        invoked by those other systems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Distributed:&lt;/b> Services composing an application can be distributed over different systems within an&#xD;
        organization or even distributed across organizations.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;b>Loosely coupled:&lt;/b> Services are connected through loosely coupled interfaces, making the modification of an&#xD;
        interface possible without breaking the other ones.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;SOA_Web_Services&quot; name=&quot;SOA_Web_Services&quot;>&lt;/a>SOA and Web Services&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Everything discussed so far can be done with different technologies; CORBA and .Net are an example of such&#xD;
    technologies. So why are web services so closely associated with service-oriented architecture?&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Web services are based on internet standards, such as XML (eXtensible Markup Language) to format data, SOAP (Simple&#xD;
    Object Access Protocol) to communicate, and WSDL (Web Services Description Language) and UDDI (Universal Description,&#xD;
    Discovery and Integration) to publish descriptions. The usage of these widely accepted standards provides a broader&#xD;
    interoperability among different vendor's solutions, making the implementation of SOA easier and less expensive.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A more detailed discussion about using web services and component-based development to implement an SOA can be found in&#xD;
    the &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../modernize.legacy_evol/guidances/whitepapers/using_soa_and_cbd_to_build_web_service_applications_25DD051E.html&quot;&#xD;
     guid=&quot;7.466429252179675E-305&quot;>Whitepaper: Using Service-Oriented Architecture and Component-Based Development to Build&#xD;
    Web Service Applications.&lt;/a>&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
