<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_qtC_YPS3EdmIX5Pw7v8pRw" name="solution_partitioning,1.6501323286225543E-305" guid="_qtC_YPS3EdmIX5Pw7v8pRw" changeDate="2006-10-31T23:07:57.396-0800" version="1.0.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Much has been written about the decomposition of software designs into components or subsystems. Much has also been&#xD;
    written about the need to understand the deployment topology required by an application early in its lifecycle so that&#xD;
    correct architectural decisions can be made. However, there are very few mechanisms identified or used today to help in&#xD;
    the logical partitioning of a system during architectural analysis such that decisions regarding the logical topology&#xD;
    of a solution and the constraints imposed by non-functional requirements can easily be addressed at the model level&#xD;
    before generation of detailed design and implementation work products. The following page outlines a set of simple&#xD;
    model elements that allow for this reasoning. While they were developed with &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/concepts/service-oriented_architecture_8328ABAD.html&quot;&#xD;
    guid=&quot;8.613638237693525E-307&quot;>service-oriented solutions&lt;/a>&lt;/i> in mind, these techniques are applicable to any&#xD;
    software architecture modeling.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Partitions_and_Layers&quot; name=&quot;Partitions_and_Layers&quot;>Partitions and Layers&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following definitions are taken from the Rational Unified Process (RUP) glossary and contrast the notions of layers&#xD;
    and partitions. Interestingly enough the term &lt;i>tier&lt;/i>, while common in describing the logical architecture of a&#xD;
    solution, does not appear in the RUP glossary.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;dl>&#xD;
        &lt;dt>&#xD;
            &lt;b>Layer&lt;/b>&#xD;
        &lt;/dt>&#xD;
        &lt;dd>&#xD;
            (1) A specific way of grouping &lt;i>packages&lt;/i> in a model at the same level of abstraction.&#xD;
        &lt;/dd>&#xD;
        &lt;dd>&#xD;
            (2) The organization of &lt;i>classifiers&lt;/i> or &lt;i>packages&lt;/i> at the same level of abstraction. A layer&#xD;
            represents a horizontal slice through an architecture, whereas a partition represents a vertical slice.&#xD;
        &lt;/dd>&#xD;
        &lt;dt>&#xD;
            &lt;b>Partition&lt;/b>&#xD;
        &lt;/dt>&#xD;
        &lt;dd>&#xD;
            (1) &lt;i>activity graphs&lt;/i>: A portion of an activity graphs that organizes the responsibilities for actions.&#xD;
            See also: &lt;i>swimlane&lt;/i>.&#xD;
        &lt;/dd>&#xD;
        &lt;dd>&#xD;
            (2) &lt;i>architecture&lt;/i>: A subset of classifiers or packages at the same level of abstraction. A partition&#xD;
            represents a vertical slice through an architecture, whereas a layer represents a horizontal slice.&#xD;
        &lt;/dd>&#xD;
    &lt;/dl>&#xD;
&lt;/blockquote>&#xD;
&lt;p>&#xD;
    So, a partition contains a set of elements representing some part of the architecture, but how does the &lt;i>Software&#xD;
    Architect&lt;/i> slice a model? The answer is deceptively simple: Partitions and layers are organizational constructs; at&#xD;
    an architectural level they only represent logical organization. So, what aspects of the organization of a solution do&#xD;
    you wish to represent? For example if the model view you are developing is concerned with security then you may wish to&#xD;
    represent Trust Zones [JOHNSTON].&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information see the concepts &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/concepts/layering_59FD1CD4.html&quot; guid=&quot;3.801315327549898E-305&quot;>Layering&lt;/a>&lt;/i> and&#xD;
    &lt;i>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/guidances/concepts/distribution_patterns_5A01CAF5.html&quot;&#xD;
    guid=&quot;6.137181182978733E-305&quot;>Distribution Patterns&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    What can a partition represent?&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As we said above, a partition may be used to represent any particular organization concerns the architect may wish to&#xD;
    focus on. The following are common views that are constructed in a model. Note that one key aspect of partitions is&#xD;
    that they do not imply ownership/containment and so a service may appear in multiple partitions simultaneously.&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;b>Logical Solution Organization&lt;/b>; in this case the partitions represent the logical clustering of elements in a&#xD;
    given solution. For example, in a business application we might use partitions to represent the separation into user&#xD;
    interaction services, business services, and infrastructure services. Such a view corresponds more to the use of layers&#xD;
    in RUP to describe tiers of an application. However, as services are not easily layered in the same way as a component&#xD;
    or object-based solution, we use partitions. For more information on these service classifications, see the &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/guidances/concepts/service_portfolio_52FD64AC.html&quot;&#xD;
    guid=&quot;1.851952881072508E-305&quot;>Concept: Service Portfolio&lt;/a>.&#xD;
&lt;/blockquote>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;257&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_partitioning-01.gif&quot;&#xD;
    width=&quot;430&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;b>High-Level Physical Distribution&lt;/b>; in this case partitions may be used to denote local versus remote services, at&#xD;
    least when physical distance imposes constraints on the architecture. For example, noting that the customer, account,&#xD;
    and order services are hosted in our primary data center and that the Electronic Data Interchange (EDI) gateway is&#xD;
    hosted in a secondary data center is important when we also discover that the bandwidth connection between these&#xD;
    centers is managed and we have to carefully control communication between these partitions.&#xD;
&lt;/blockquote>&#xD;
&lt;blockquote>&#xD;
    &lt;b>Business Application/Ownership Boundaries&lt;/b>; in this case, partitions are used to represent ownership of services&#xD;
    by a business area or by an application area. For example, we might denote that certain services are &quot;owned&quot; by Human&#xD;
    Resources, some by Sales, and some by Marketing. Now, while this is not an architectural concern, most projects have to&#xD;
    deal with aspects that do not involve technology or architecture but the social and political aspects of the&#xD;
    organization. Partitions, in this respect, allow us to see how the interaction between services crosses such boundaries&#xD;
    and may impact the development process by requiring stakeholder support for cross-organizational change. In this case&#xD;
    the &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../extend.bus_model/workproducts/rup_business_system_BB28EEB.html&quot;&#xD;
    guid=&quot;{4064F184-314B-4965-9F08-6AE5DBF6205A}&quot;>Artifact: Business System&lt;/a>s identified during Business Analysis would&#xD;
    form the categories for this model.&#xD;
&lt;/blockquote>&#xD;
&lt;blockquote>&#xD;
    &lt;b>Business Process Boundaries&lt;/b>; in this case we represent end-to-end process areas with partitions, in effect&#xD;
    grouping services by the processes they support. The diagram below contrasts the process view (shaded) with the&#xD;
    business systems view represented as the vertical bars. It is important in many cases to relate these two views of&#xD;
    services already deployed and services planned by a project. &#xD;
    &lt;p align=&quot;center&quot;>&#xD;
        &lt;img height=&quot;194&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_partitioning-04.gif&quot;&#xD;
        width=&quot;409&quot; border=&quot;0&quot; />&#xD;
    &lt;/p>&#xD;
    &lt;p>&#xD;
        This relationship between the vertical business area and the cross-business process is important to understand how&#xD;
        each business area provides services to the processes that actually run the business. In respect to our example,&#xD;
        this view regroups the services we identified earlier into new partitions as shown below.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;158&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_partitioning-02.gif&quot;&#xD;
    width=&quot;400&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For more information on the connection between process modeling and service identification see the &lt;a&#xD;
    class=&quot;elementLinkWithType&quot; href=&quot;./../../../soa.rup_soma/capabilitypatterns/existing_asset_analysis_4B247136.html&quot;&#xD;
    guid=&quot;_7ZObICxuEdupJ8eX04kqLQ&quot;>Activity: Existing Asset Analysis&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Service_Partitions&quot; name=&quot;Service_Partitions&quot;>Partitions in the Service Model&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    In the &lt;i>&lt;a class=&quot;elementLink&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_service_model_623494B9.html&quot;&#xD;
    guid=&quot;{E24679B7-19F1-483B-A1F1-578839C43888}&quot;>Service Model&lt;/a>&lt;/i> a particular model element, the &lt;i>&lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_partn_DC19AD3F.html&quot;&#xD;
    guid=&quot;{C302AF5A-1591-4F26-94E5-C412866553BF}&quot;>Service Partition&lt;/a>&lt;/i>, is used to model logical partitions. The UML&#xD;
    2.0 representation for partitions is based on the use of the Class model element (while some users prefer to use&#xD;
    subtypes of Class such as Component&amp;nbsp;or Node where this fit their needs better) and uses composite structure to&#xD;
    define the services in a partition and the communication between them. The &lt;i>&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_partn_DC19AD3F.html&quot;&#xD;
    guid=&quot;{C302AF5A-1591-4F26-94E5-C412866553BF}&quot;>Service Partition&lt;/a>&lt;/i> element is shown in the pictures above and may&#xD;
    contain not only instances of &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_provider_C00D3410.html&quot;&#xD;
    guid=&quot;{8427751F-3C14-4CEB-9816-5112BDB91EED}&quot;>Service Providers&lt;/a>&lt;/i> but also instances of other partitions and so&#xD;
    may be further composed where appropriate. A service partition may also specify one or more &lt;i>&lt;a&#xD;
    class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_gtway_4D9ADED2.html&quot;&#xD;
    guid=&quot;{B0BF4414-0382-4605-9EE9-82F0DEC7292C}&quot;>Service Gateways&lt;/a>&lt;/i> which are named and typed UML 2.0 ports. These&#xD;
    ports are typed by &lt;i>&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_svce_spec_37E89A91.html&quot;&#xD;
    guid=&quot;{20F06B5E-95D5-422C-AB68-7C213D28533A}&quot;>Service Specifications&lt;/a>&lt;/i> in the same way a &lt;i>&lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../soa.rup_soma/workproducts/soa_svce_model_service_1EE4C96C.html&quot;&#xD;
    guid=&quot;{FF65B0A2-6C53-4F01-9727-AACDB0D542C8}&quot;>Service&lt;/a>&lt;/i> is and thus can be perceived as virtual services&#xD;
    specifying the interface to a partition.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    So, for example it might be appropriate to note that the order management process area is accessed by the same&#xD;
    interface to the order entry service provider in the diagram above. We term this promoting the interface from the&#xD;
    service out to the partition. The following diagram depicts this and shows how the order entry service provider&#xD;
    communicates with the other services in the partition.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;158&quot; alt=&quot;Diagram is described in the textual content.&quot; src=&quot;./resources/co_soa_partitioning-03.gif&quot;&#xD;
    width=&quot;198&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    One capability of the service gateway is the ability to mediate communication bindings between clients on the outside&#xD;
    of a partition and services on the inside. This allows for services to only deal with certain protocol bindings within&#xD;
    a partition, for example to use a higher performance or more secure protocol within the boundaries and to expose&#xD;
    certain capabilities to clients over a different protocol. For more information see the guideline &lt;i>&lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../soa.rup_soma/guidances/guidelines/service_mediation_2F2C4C02.html&quot;&#xD;
    guid=&quot;2.5614739075754752E-306&quot;>Service Mediation&lt;/a>&lt;/i>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Note also that as the partitions are based on the use of UML 2.0 Composite Structures, there is no &quot;containment&quot;&#xD;
    relationship between the partition and the services, it is possible, as we have shown above, to represent the same&#xD;
    services in multiple partitions or views. If this flexibility is tied to the capability of service gateways, the&#xD;
    software architect and designer can cluster services in logical groupings and allow service gateways to expose only&#xD;
    relevant interfaces to clients.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Strict_Partitions&quot; name=&quot;Strict_Partitions&quot;>Specifying Strict Partitions&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A strict partition is a partition where all services within the partition are accessed by clients/services outside the&#xD;
    partition through service gateways. This implies that the service partition has its own set of interfaces and as such&#xD;
    it may be seen as a logical higher-level service provider. This is particularly useful for partitions that represent&#xD;
    either business application boundaries or business process boundaries. It also allows for the process represented to&#xD;
    identify the interfaces it exposes to the rest of the business and which of the services supporting the process area&#xD;
    are made publicly available. The order-management partition above is a strict partition, but the concept of&#xD;
    &quot;strictness&quot; can only be assessed by evaluating a partition and is not a property of the model element itself.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In the example below the partition on the left may be considered strict because the client (outside the partition) can&#xD;
    only communicate with the order entry provider (within the partition) via a gateway. On the other hand the partition&#xD;
    shown on the right hand side of the diagram may not be considered as a strict partition as the client communicates&#xD;
    directly with the order entry provider inside the partition.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;85&quot; alt=&quot;&quot; src=&quot;./resources/co_soa_strict_partitions.png&quot; width=&quot;470&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is important to&amp;nbsp;realize that modeling of strict partitions, even the use of gateways at all, is optional and&#xD;
    should be considered simply as a tool that allows for the modeling of explicit communications between partitions&#xD;
    (whatever they themselves represent) and for many purposes the additional overhead may not be warranted.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;References&quot; name=&quot;References&quot;>References&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    [&lt;a id=&quot;Ref_Johnston&quot; name=&quot;Ref_Johnston&quot;>JOHNSTON&lt;/a>] Simon Johnston, &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;
    href=&quot;./../../../soa.rup_soma/guidances/whitepapers/modeling_security_concerns_in_service-oriented_architectures_3961AE50.html&quot;&#xD;
     guid=&quot;1.328991553095394E-305&quot;>&lt;i>Modeling Security Concerns in Service-Oriented Architecture&lt;/i>&lt;/a>. IBM&#xD;
    developerWorks 2004.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
