<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-OoC32jBo_mt_I9H7_lJpLQ" name="new_guideline,_QNuHcEV1Edqpo8Lgp7-Wmg" guid="-OoC32jBo_mt_I9H7_lJpLQ" changeDate="2005-11-01T03:00:23.246-0800" version="7.1.0">
  <mainDescription>&lt;a id=&quot;XE_service_realization__guidelines_for&quot; name=&quot;XE_service_realization__guidelines_for&quot;>&lt;/a> &#xD;
&lt;h3>&#xD;
    Introduction&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This page describes an application that is built using BPEL based choreography in an SOA style. The lessons learned&#xD;
    during both the design and development phases of this project provide general insight for others considering the use of&#xD;
    BPEL based choreography in an SOA. The design approach is evaluated here using a Pros and Cons comparison that takes&#xD;
    the business requirements and the existing application elements into consideration. This page contains design&#xD;
    recommendations and identifies characteristics that suggest use of a BPEL driven approach.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Lessons learned&#xD;
&lt;/h3>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Choosing the right segmentation of business logic between the workflow and partner services is sometimes&#xD;
        challenging and always important.&lt;br />&#xD;
        &lt;br />&#xD;
         &#xD;
        &lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
            The business logic is separated between workflow based choreography and the partner services. Ultimately&#xD;
            partner services should be responsible for computationally intensive or complex logic; whereas choreography&#xD;
            contains the logic that is anticipated to change in response to changing business requirements.&lt;br />&#xD;
            &lt;br />&#xD;
             Since this will not always be a clean separation, a useful remediation strategy is to design the application&#xD;
            so it grows by modifying the workflow and adding new partner services rather than modifying existing partner&#xD;
            services.&lt;br />&#xD;
            &lt;br />&#xD;
             This is fundamentally an iterative approach. Early prototypes are likely to require refactoring of the partner&#xD;
            services in order to achieve a design that can grow by addition of new partner services.&lt;br />&#xD;
            &lt;br />&#xD;
             Of course, in all cases you should keep un-necessary or never-changing code out of the work flow&#xD;
        &lt;/div>&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Leverage the unique capabilities of BPEL&lt;br />&#xD;
        &lt;br />&#xD;
         &#xD;
        &lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
            The ability of BPEL to orchestrate partner services which expose a variety of different bindings.&lt;br />&#xD;
            &lt;br />&#xD;
             Be careful not to build dependencies on the characteristics of a particular partner implementation or partner&#xD;
            service binding. Doing so may complicate or limit later changes to the choreography or overall&#xD;
            application.&lt;br />&#xD;
            &lt;br />&#xD;
             Consider keeping intermediate results in BPEL variables as a strategy to improve performance&#xD;
        &lt;/div>&lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Where possible design partner services in a stateless manner with idempotent operations.&lt;br />&#xD;
        &lt;br />&#xD;
         &#xD;
        &lt;div style=&quot;MARGIN-LEFT: 2em&quot;>&#xD;
            For the purposes of this discussion, idempotence simply means that a service can be called with the same input&#xD;
            data multiple times with the expectation that the response will be correct for each call. This characteristic&#xD;
            can provide significant simplification for both caller and service since it dramatically simplifies the&#xD;
            interaction. Error recovery, restart after failure, and scaling through clustering are all simplified. For the&#xD;
            caller, error recovery from network, server and client problems is simplified. Idempotence is a key indicator&#xD;
            for a potentially good match for BPEL choreography of partner services.&lt;br />&#xD;
            &lt;br />&#xD;
             Of course, if more complex interactions are required, the Web Services protocols include compensation&#xD;
            capabilities that can be employed in such cases. All things being equal, if you can avoid such requirements in&#xD;
            the overall application design, the result will be easier to maintain and test.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h3>&#xD;
    The Case Study&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    This case study describes an IBM project to upgrade the information technology used by its ServicePac&amp;reg; business. The&#xD;
    goal of this project was to relieve specific pain points and position the ServicePac&amp;reg; business for continued expansion&#xD;
    in both volume and capabilities.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Like many successful businesses, IBM's ServicePac&amp;reg; business has gone through a sequence of incremental transitions,&#xD;
    starting with the combination of many distinct warranty programs into three businesses organized by geographical&#xD;
    sector. Later, geographically distinct operations were combined into a single world-wide operation. Over the years, the&#xD;
    ServicePac&amp;reg; business has continually added new offerings such as installation services and offerings to support new IBM&#xD;
    hardware. Although the ServicePac&amp;reg; business is itself a single world-wide operation, their product, ServicePacs&amp;reg;, are&#xD;
    sold by numerous IBM lines of business and Business Partners. Each selling organization has its own order entry systems&#xD;
    tailored to their particular line of business (and not to ServicePacs&amp;reg;). These systems represent a veritable who's-who&#xD;
    of different technologies built at different times by different teams.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Order entry systems that handle ServicePacs&amp;reg; must perform validations at order entry time based on requirements&#xD;
    developed by the ServicePac&amp;reg; business. ServicePac validation can be complex. ServicePacs&amp;reg; are offered in more than 100&#xD;
    countries and the offerings are not the same everywhere. The ServicePac&amp;reg; offerings vary according to product model,&#xD;
    country where delivered, sales channel, order entry system and customer-specific information such as currently owned&#xD;
    ServicePacs&amp;reg;.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Traditionally, ServicePac&amp;reg; order validation has been performed within the order entry system, implementing only those&#xD;
    validation requirements that are needed for the sales channels supported by that system. As the ServicePac&amp;reg; business&#xD;
    has grown, the cost of communicating the validation requirements, coordinating their development, test and deployment&#xD;
    has become prohibitively expensive. Furthermore, arranging for proper order validation within the ordering systems has&#xD;
    significantly increased the time-to-market for new offerings.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;368&quot; alt=&quot;Image illustrates a services-oriented approach to order validation.&quot; src=&quot;resources/figure1.gif&quot;&#xD;
    width=&quot;491&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;-2&quot;>Figure 1 - services oriented approach to ServicePac&amp;reg; Order Validation. The approach is to make a single&#xD;
    service available to all order entry systems that process ServicePacs&amp;reg;, rather than placing specific validation logic&#xD;
    in each ordering system.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    A Services Oriented approach to validation&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Early on it was apparent that validation needed to be the responsibility of the ServicePac&amp;reg; business, and not each&#xD;
    individual sales system through which ServicePacs&amp;reg; are ordered. The two choices considered were to distribute code that&#xD;
    encapsulated the ordering validation requirements to all of the ordering systems or to provide a centralized order&#xD;
    validation service. Avoiding the governance issues associated with the distributed code approach was a major driver for&#xD;
    choosing the centralized service approach.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The greatest single benefit of exposing Order Validation as a service to order entry systems is that order entry&#xD;
    systems no longer need to locally implement, test or run their own ServicePac&amp;reg; order validation logic. Perhaps the&#xD;
    greatest concern (or fear) comes from the many order entry system owners who now have a new run-time dependency on an&#xD;
    external system operated by another organization. As you will learn below, the net benefit of providing the validation&#xD;
    logic as a service outweighed the concerns in this case.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Below is a quick summary of the architectural goals for the project:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        &lt;strong>Interface design:&lt;/strong> The validation interface needs to be designed to gracefully handle anticipated&#xD;
        evolution of the business (e.g. new product offerings should not in general require any interface&#xD;
        modifications)&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Messaging protocol independence:&lt;/strong> The validation service should be accessible independent of the&#xD;
        calling platform, programming model, network transport layer, or hardware choices.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Business agility:&lt;/strong> The validation logic was implemented to make anticipated business changes safe,&#xD;
        inexpensive and quick without sacrificing performance, reliability or compromising fundamental design rules.&lt;br />&#xD;
        &lt;br />&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Scalability:&lt;/strong> Scaling to higher throughputs should not involve reprogramming or significant&#xD;
        functional test.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;h4>&#xD;
    Interface Design&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Working with the business owner and business architects of all the parties that manage product nomenclature, a&#xD;
    self-consistent and well-documented taxonomy was developed for the current and anticipated products. Based on the&#xD;
    taxonomy, an XML data model described in XML Schema language was developed that expresses all the necessary product&#xD;
    types along with their attributes. As new products are offered the taxonomy may change - along with potential schema&#xD;
    changes, however, the actual message format is expected to remain unchanged so long as the new offerings fall with the&#xD;
    scope of the defined taxonomy.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This approach provides the business with the desired flexibility to quickly and inexpensively introduce new offerings.&#xD;
    Of course, it does not cover all possible cases. For instance, if a new product offering has a precondition that has&#xD;
    not been anticipated in the existing message definitions then new message definitions will have to be put in place.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A simple validation request message payload that includes a single order for a single ServicePac&amp;reg; for a customer-owned&#xD;
    computer identified by its part number and serial number is shown in listing 1. The message format supports multiple&#xD;
    orders for multiple ServicePacs&amp;reg; that could be associated with both new and existing hardware. In some cases, messages&#xD;
    may have thousands of nested elements.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Messaging protocol independence&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    One of the great advantages of using BPEL is that messaging relationships between the services are described abstractly&#xD;
    in WSDL which provides a degree of messaging protocol independence. To take maximum advantage of this feature one must&#xD;
    carefully avoid building implementations that depend on specific characteristics of the messaging protocol being used&#xD;
    during development. For instance, if EJB bindings are being used during development, the programming style may result&#xD;
    in short choppy message exchanges (i.e. frequent exchange of small messages). If at a later time the binding is changed&#xD;
    to JMS or SOAP over HTTP there will likely be a serious performance bottleneck resulting from a larger per-message&#xD;
    overhead for these protocols. In this case, the impact of moving between bindings can be reduced by following a&#xD;
    programming style in which message exchanges are large grained (i.e. relatively infrequent exchanges of larger message&#xD;
    bodies) so the overhead of message creation and receipt can be amortized over more data.&#xD;
&lt;/p>&lt;br />&#xD;
&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;75%&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td class=&quot;codeSample&quot;>&#xD;
                &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;lt;spkOrderDataList&amp;gt;&lt;br />&#xD;
                 &amp;nbsp; &amp;lt;header&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;orderReference&amp;gt;1040-5124-001&amp;lt;/orderReference&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;orderDate&amp;gt;2004-08-15&amp;lt;/orderDate&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;orderingSystem&amp;gt;WEB&amp;lt;/orderingSystem&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;country&amp;gt;US&amp;lt;/country&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;distributionChannel&amp;gt;A&amp;lt;/distributionChannel&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;headerReturnCode/&amp;gt;&lt;br />&#xD;
                 &amp;nbsp; &amp;lt;/header&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;lt;spkSegmentList&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;orderItemReference&amp;gt;102&amp;lt;/orderItemReference&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;spkPartNumber&amp;gt;69P9921&amp;lt;/spkPartNumber&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;spkType&amp;gt;WMAINTOPT&amp;lt;/spkType&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;spkQuantity&amp;gt;1&amp;lt;/spkQuantity&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;hardwareQuantity&amp;gt;1&amp;lt;/hardwareQuantity&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;spkReturnCode/&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;hardwareSegment&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;serialNumber&amp;gt;77X9182&amp;lt;/serialNumber&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;hardwareIdentifier&amp;gt;8676M2X&amp;lt;/hardwareIdentifier&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;hardwareReturnCode/&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;nbsp; &amp;lt;/hardwareSegment&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;lt;/spkSegmentList&amp;gt;&lt;br />&#xD;
                 &amp;nbsp;&amp;lt;/spkOrderDataList&amp;gt;&lt;br />&#xD;
                 &amp;lt;/ServicePacData:validationRequest&amp;gt;&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&lt;br />&#xD;
&lt;p>&#xD;
    Listing 1 - Sample of a simple message received by the validation service composed of a single order for a single&#xD;
    ServicePac&amp;reg; that will be applied to an existing computer which is identified by its part number and serial number. The&#xD;
    validation service returns the received message annotated with either verification codes or error codes. The invoking&#xD;
    component can provide its own reference numbers to allow it to correlate the request and response.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Another consideration for protocol independence is messaging style. In this project future needs for asynchronous&#xD;
    messaging was addressed by creating validation message definitions with a (currently unexploited) field for correlating&#xD;
    request and response messages, even though all current usage is synchronous and therefore needs no correlation.&#xD;
    Addressing such concerns typically spans both the message design and the application design.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Business Agility&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Fundamentally, the ServicePac&amp;reg; validation service accepts an order and returns information indicating whether the order&#xD;
    is valid or not, and if not why not. The key though, is to minimize the re-design, re-test and performance impact when&#xD;
    modifications need to be made in response to new business requirements. Clearly, it is useful to have an idea of what&#xD;
    the new requirements are likely to be when designing the initial implementation.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Initial implementation details:&lt;br />&#xD;
    &lt;br />&#xD;
     The validation service extracts the ServicePac&amp;reg; order details consisting of: ServicePac&amp;reg; types, the hardware it is&#xD;
    destined to be applied to, the ServicePac&amp;reg; delivery location (country), the sales channel and the customer data.&#xD;
    Business logic then tests the order information against a collection of declarative statements provided by the&#xD;
    ServicePac&amp;reg; business. The set of tests that must be applied to any given order depends on the order details. Some of&#xD;
    the tests require access to additional data that is only available from remote systems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There are three types of data required to validate an order: reference data owned by this application, cached reference&#xD;
    data owned by other systems, and live data that must be obtained from other systems each time an order is validated.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reference data owned by this application is accessed through a partner service that was built as part of this&#xD;
    application. This service is also available to other applications that need access to reference data owned by this&#xD;
    application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reference data owned by other applications is provided by accessing a partner service built as part of this&#xD;
    application. Where possible the partner service caches the data obtained from other applications in order to minimize&#xD;
    the number of network accesses. By locating the caching strategy within the partner service, it can be changed as&#xD;
    needed over time without requiring changes to the rest of the application.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Data and intermediate results that only need to be stored during the lifetime of a validation request are stored in&#xD;
    BPEL variables. Using BPEL variables eliminates the overhead of avoidable accesses to partner services and therefore&#xD;
    may improve overall performance.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;368&quot;&#xD;
    alt=&quot;Image illustrates a topological view of the work flow driven implementation of the business logic.&quot;&#xD;
    src=&quot;resources/figure2.gif&quot; width=&quot;491&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;-2&quot;>Figure 2 - topological view of the work-flow-driven implementation of the business logic that chooses&#xD;
    which of the computationally intensive or data intensive tests must be performed in order to validate a given order.&#xD;
    The same service interface is used by all of the order entry systems that need to validate orders.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    At this point we switch to investigating the nature of those new requirements that can be anticipated from discussions&#xD;
    with the business and looking at historical trends.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As the ServicePac&amp;reg; business expands, new business tests for ServicePac&amp;reg; validation are created; however, existing tests&#xD;
    are not expected to be changed. Validating new products requires evaluating a new grouping of existing and possibly new&#xD;
    tests.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    This set of requirements is a good match for a work flow driven system in which the work flow is used to knit together&#xD;
    sets of tests required by each product type. The aspects of the tests that are computationally or data intensive can&#xD;
    then be developed in less flexible but more efficient technology and rendered as partner services available to the&#xD;
    central workflow engine as shown in Figure 2.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    When new business offerings are added the validation system the workflow itself is modified to access the existing&#xD;
    partner services (and possibly new partner services needed to support the new offering). Assuming the partner services&#xD;
    have been properly segmented at the outset, this architecture exhibits a very attractive additive mode in which new&#xD;
    requirements will not require much re-testing or re-coding of previously implemented function.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Scalability&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Since the BPEL application is deployed atop a mature middleware stack that offers clustering as a configuration option,&#xD;
    moving the ServicePac&amp;reg; Validation project to footing that can easily scale by adding new hardware as needed was&#xD;
    straight forward. Of course, the overall architecture of calling partner services from a workflow engine nicely fits&#xD;
    the clustering model.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As a design point, this service is idempotent since calls to this service have no caller detectable side effects.&#xD;
    Hence, no error recovery actions need to be taken by a service consumer if a service call returns an error or fails to&#xD;
    complete. Indeed, the service consumer can safely re-try a call at any time. The fact that the partner services are&#xD;
    also idempotent significantly simplifies the factors associated with scaling the process using clustering since the&#xD;
    error recovery is relatively simple and recovery and restart after a failure is straight forward. Furthermore, there is&#xD;
    no need for &quot;caller affinity&quot; since each interaction is atomic and there is no caller specific caching associated with&#xD;
    processing a request.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    The Application of Workflow and BPEL&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    BPEL4WS (Business Process Execution Language for Web Services) is a language and programming model specifically&#xD;
    designed for executing workflow based business logic that involves the choreography of web services. BPEL is an open&#xD;
    standard for which many vendor implementations of both authoring tools and runtimes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The ability to describe the ServicePac&amp;reg; business process through a schematic process diagram and then represent the&#xD;
    implementation logic using the standards based BPEL4WS constructs provided just the right combination of flexibility&#xD;
    and isolation to implement flexible ServicePac&amp;reg; business logic.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For this project we chose the IBM WebSphere Application Developer Integration Edition (WSADIE) as an authoring&#xD;
    environment. Developed code artifacts were targeted to run on the IBM WebSphere&amp;reg; Business Integration Server Foundation&#xD;
    v5.1.1 runtime that provides a business process execution engine to subsequently execute the workflow. The data is&#xD;
    hosted on a DB2 (v8.1) server.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Individual tests needed for ServicePac&amp;reg; validation were implemented as Enterprise Java Beans, specifically Stateless&#xD;
    Session Beans, running in the WebSphere&amp;reg; Application Server EJB container. The WSADIE tooling facilitated the&#xD;
    integration of these EJBs as web services through the automated generation of WSDL files. As a result, the individual&#xD;
    tests can be deployed either within the same container as the BPEL process, or in dedicated containers on other server&#xD;
    instances.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;763&quot; alt=&quot;Image illustrates workflow as depicted by a graphical BPEL editor.&quot; src=&quot;resources/figure3.gif&quot;&#xD;
    width=&quot;641&quot; />&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;font size=&quot;-2&quot;>Figure 3 shows a graphical BPEL editor view of the validation workflow. The tool supports collapsing&#xD;
    sub-processes and loops to simplify working on the details of individual pieces of the overall workflow.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Figure 3 shows the fully expanded BPEL process used to drive the ServicePac&amp;reg; validation services as it appears in the&#xD;
    WSADIE BPEL creation and editing tool.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Significant performance improvements were achieved when an early implementation of the ServicePac&amp;reg; validation workflow&#xD;
    process was modified to take advantage of using BPEL variables for holding intermediate results rather than making&#xD;
    additional calls to the partner service. You can see an example of this approach called out in Figure 3 where the list&#xD;
    of tests to be performed on each element of an order is retained in a BPEL variable.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Overall Pros &amp;amp; Cons of the design&#xD;
&lt;/h3>&#xD;
&lt;table width=&quot;75%&quot; align=&quot;center&quot; border=&quot;1&quot;>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;div align=&quot;center&quot;>&#xD;
                    &lt;strong>Pros&lt;/strong>&#xD;
                &lt;/div>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;div align=&quot;center&quot;>&#xD;
                    &lt;strong>Cons&lt;/strong>&#xD;
                &lt;/div>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td valign=&quot;top&quot;>&#xD;
                &lt;div align=&quot;left&quot;>&#xD;
                    1. Adding new offerings faster and less expensive&lt;br />&#xD;
                    &lt;br />&#xD;
                     2. Adding new ordering systems is less expensive&lt;br />&#xD;
                    &lt;br />&#xD;
                     3. Consistent comprehensive validation&lt;br />&#xD;
                    &lt;br />&#xD;
                     4. Validation service usage can be phased in as ordering systems are updated&lt;br />&#xD;
                    &lt;br />&#xD;
                     5. New Validation logic only needs to be implemented and tested in one place.&lt;br />&#xD;
                    &lt;br />&#xD;
                     6. Validation logic owned by the ServicePac&amp;reg; business and not distributed across multiple foreign&#xD;
                    systems.&#xD;
                &lt;/div>&#xD;
            &lt;/td>&#xD;
            &lt;td valign=&quot;top&quot;>&#xD;
                1. Additional runtime cross-organizational dependencies&lt;br />&#xD;
                &lt;br />&#xD;
                 2. Performance overhead in the form of additional network latency&lt;br />&#xD;
                &lt;br />&#xD;
                 3. Requires re-engineering of existing systems&lt;br />&#xD;
                &lt;br />&#xD;
                 4. Created a new centralized component that can potentially act as a single point of failure for multiple&#xD;
                applications.&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>&#xD;
    In the case of the ServicePac&amp;reg; application the advantages outlined above were found to provide significant value and&#xD;
    the cons were all containable. Since the individual callers are being allowed to continue private validation until they&#xD;
    go through a scheduled update which covers many concerns, the additional programming work of packaging up the data for&#xD;
    a validation call is a small increment that can be contained in the overall project scope of the calling application.&#xD;
    For those online services that have response time requirements that cannot be fulfilled by the validation service,&#xD;
    inline preliminary validation can be done by the caller - with a single final validation access to the validation&#xD;
    service. This strategy preserves the human factors of the calling application while at the same time preserving the&#xD;
    integrity of the overall ServicePac&amp;reg; ordering process. For some legacy systems that do not have internal web services&#xD;
    protocol capability, a converter was built that accepts a private protocol and converts to a web services call (a&#xD;
    vendor specific document to Web Services adapter was built for one of the callers in this project). Testing and&#xD;
    demonstration of service robustness has allayed the fears of performance bottlenecks introduced by the validation&#xD;
    service. By using clustering technology, the validation service throughput can be increased very quickly if the need&#xD;
    arises. Finally, all things being equal, the concentration of the validation logic into a single implementation means&#xD;
    that the money that would have been spent on deploying and testing several independent implementations can be spent&#xD;
    testing and deploying a single implementation which we think will more than make up for any issues associated with&#xD;
    having an additional single point of failure for many disparate order entry systems.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Finally, the ability of the business to take real ownership of the validation requirements and their implementation, to&#xD;
    roll out new offerings quickly, and to insure proper and consistent order validation at the beginning of the ordering&#xD;
    process has empowered the business to consider addressing new opportunities that were formerly technically unachievable&#xD;
    or prohibitively expensive.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
