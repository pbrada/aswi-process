<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-GRIppyv8jHp4-Ye7p05APA" name=",_TraT8FHPEdumTu7t35vA-A" guid="-GRIppyv8jHp4-Ye7p05APA" changeDate="2006-10-01T21:38:04.269-0700" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    This task may be applied to any analysis or design model where elements of the model may benefit from the techniques&#xD;
    described here. The techniques are derived from experience in both Product Line Engineering, where the common elements&#xD;
    are what unite products within the product line and the variability is what distinguishes the products from each other,&#xD;
    and Pattern development where common elements are the structure of the pattern and the variablility is used to define&#xD;
    the parameters to the pattern.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The approach is first to identify elements of the design that will be common to all applications of the element, then&#xD;
    to identify the elements that will vary in each application, and finally to document the variability (here different&#xD;
    approaches are used by different domains).&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Example&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In the following class diagram we see the elements of a legal contract, identifying that the contract is between two or&#xD;
    more parties. In identifying the common elements we see that the core elements are the structure of the contract itself&#xD;
    and the different relations to the parties.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;192&quot; alt=&quot;&quot; src=&quot;./resources/candv_contract.png&quot; width=&quot;342&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    However, a legal contract may be between different people, organizations or government&amp;nbsp;agencies and so we note&#xD;
    that Party is a variable element &lt;strong>by type&lt;/strong>. In documenting this we define a type hierarchy for Party and&#xD;
    also denote Part as an abstract class so that concrete types must be used in an actual design.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;177&quot; alt=&quot;&quot; src=&quot;./resources/candv_party.png&quot; width=&quot;369&quot; />&#xD;
&lt;/p></mainDescription>
  <sections xmi:id="_7YHSsFHPEdumTu7t35vA-A" name="Identify Common and Variable Elements" guid="_7YHSsFHPEdumTu7t35vA-A">
    <sectionDescription>&lt;p>&#xD;
    Identifying the elements of a design that do not change when used in different situations is often best done in an&#xD;
    iterative fashion. Using a set of scenarios, create instance diagrams and note when comparing the instance diagrams for&#xD;
    different scenarios which elements are common in all cases. The more scenarios available, obviously the more data&#xD;
    points are available to you and therefore you are able to validate early results and assumptions.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In describing the common elements in a model, it is often valuable to provide some form of encapsulating element to&#xD;
    separate these elements from the rest of the design. The choice of encapsulation technique is obviously dependent on&#xD;
    the context, but may be:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Introduction of a package to own the elements, this only changes the ownership of the elements but not the&#xD;
        relationship between the elements or elements outside the package - this is most commonly applied to analysis&#xD;
        models.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Introduction of a component to own the elements, this not only changes the ownership but also introduces a formal&#xD;
        encapsulation so you may choose to define an interface exposing the relevent elements to the outside.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Introduction of a UML 2.0 collaboration allows the common elements to be defined as part of the composite structure&#xD;
        of the collaboration as well as the variable elements as roles; later on a binding may be made from the variable&#xD;
        element roles to concrete elements. This is a common approach to defining design patterns in UML. Note that a&#xD;
        collaboration does not own the elements themselves, only roles corresponding to the elements.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Introduction of a templated class where the template corresponds to the type of the variable element(s); this is a&#xD;
        common approach in languages such as Ada, C++, Eiffel and now Java which support generic programming.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        You may simply choose to use a visual cue. It is common, for example, to use a single diagram (as shown in the main&#xD;
        description) and to color the common and variable elements differently.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Example&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    In the case of our legal contract we choose to introduce a component that will own the elements, as shown in the figure&#xD;
    below.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;131&quot; alt=&quot;&quot; src=&quot;./resources/candv_component.png&quot; width=&quot;341&quot; />&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Fd3asFHQEdumTu7t35vA-A" name="Document Variability Forms" guid="_Fd3asFHQEdumTu7t35vA-A">
    <sectionDescription>&lt;p>&#xD;
    Variability itself takes a number of different forms, any of which may be appropriate and in some cases more than one&#xD;
    form is present in a given situation. Common kinds of variability are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>Variability by Type&lt;/strong> - for example, in the case of our legal contract the variability is based on&#xD;
        the type hierarchy used to represent the concept &quot;Party&quot;; this is a very common form and is easily described using&#xD;
        UML as a class diagram (as shown in the main description).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Variability by Role&lt;/strong> - in this case the type of the element is generally immaterial (or at least of&#xD;
        secondary importance); it is the&amp;nbsp;role it plays that is of value. This type of variability is often found in&#xD;
        pattern development where the pattern should be possible to apply to the broadest set of possibilities and so the&#xD;
        parameters to the pattern are defined in terms of the roles the provided elements play only.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>Variability&amp;nbsp;of&amp;nbsp;Implementation&lt;/strong> - In this case the element provided is required to perform&#xD;
        some behavior and so needs to implement a given interface (or more formally a protocol) to be applicable. In such a&#xD;
        case it usual&amp;nbsp;that the container of the common elements&amp;nbsp;describes the interface and either has a template&#xD;
        parameter of the interface type or to require the interface.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>&#xD;
    Examples&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    The following diagram demonstrates the notion of variability by role, where we have a new collaboration &quot;Sale&quot; which&#xD;
    denotes the relationship between a seller and purchaser as parties to a contract. In UML it is then possible to create&#xD;
    a Collaboration Occurance which binds the roles &quot;purchaser&quot; and &quot;seller&quot; to actual model elements.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;236&quot; alt=&quot;&quot; src=&quot;./resources/candv_sale.png&quot; width=&quot;429&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Alternatively, let us look at the process of sale using an escrow service. We capture the required capabilities of any&#xD;
    escrow service as an interface, with a set of operations corresponding to the responsibilities we expect the escrow&#xD;
    service to perform. With this we create a templated collaboration where we use the escrow interface as the type of the&#xD;
    template parameter. Now it is possible to instantiate the template providing any class or component that realizes the&#xD;
    IEscrowService interface.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;142&quot; alt=&quot;&quot; src=&quot;./resources/candv_template.png&quot; width=&quot;241&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Finally, we might more simply use a component (or class) to contain our common elements and have it require the&#xD;
    IEscrowService interface using the UML 2.0 &amp;lt;&amp;lt;use&amp;gt;&amp;gt; relationship as shown in the diagram below. This&#xD;
    approach is certainly valuable at a design level as it is also a common programming approach in Component-Based&#xD;
    Development or even just in languages such as Java.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;97&quot; alt=&quot;&quot; src=&quot;./resources/candv_interface.png&quot; width=&quot;359&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The choice of technique will, as usual, depend on the situation including considerations such as:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The kind of variability being expressed, as we have seen above.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Whether the&amp;nbsp;element are a part of&amp;nbsp;an analysis, design or implementation model.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The skills and expectations of the stakeholders in the model.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&lt;br /></sectionDescription>
  </sections>
  <purpose>&lt;p>&#xD;
    To analyze the provided model elements and identify which of these elements are common to different applications and&#xD;
    separate them from those elements which vary in different applications. By identifying those elements that vary by&#xD;
    application we are able to explicitly model the kinds of variability and document them for clients of the model&#xD;
    elements.&#xD;
&lt;/p></purpose>
</org.eclipse.epf.uma:TaskDescription>
