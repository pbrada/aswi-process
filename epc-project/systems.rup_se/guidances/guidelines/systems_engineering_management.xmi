<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="_9dcVgt0MEdmhp5PapAYf4w" name="systems_engineering_management,4.558632733591871E-305" guid="_9dcVgt0MEdmhp5PapAYf4w" changeDate="2005-11-22T08:02:47.433-0800" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    RUP systems engineering projects are managed in a similar way to RUP software development projects, sharing many of the&#xD;
    project management activities. There are, however, additional roles and activities in RUP systems engineering, and the&#xD;
    size and nature of the projects (there might be significant hardware subsystems, for example) means there are other&#xD;
    differences in management approach (discussed in the following sections).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The description section of &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../systems.rup_se/deliveryprocesses/se_dp_8B9BF3E2.html&quot; guid=&quot;_97oR0VVnEdq-S-2DETo4XA&quot;>Delivery Process: Systems&#xD;
    Engineering Lifecycle&lt;/a>&amp;nbsp;introduces the system lifecycle. This presents, in an abstract way, how the system&#xD;
    lifecycle is related to subordinate subsystem development lifecycles. To some extent, this is a descriptive&#xD;
    convenience: while it is certainly possible to realize the organization for a project in this way (and, in the case&#xD;
    where the development of a subsystem is formally contracted out to a separate organization, it would be realized this&#xD;
    way), it is possible to integrate the development work much more closely. In this case, a single physical team (as&#xD;
    shown below) addresses the development, with some resources operating in both system architecture and subsystem&#xD;
    development teams, changing RUP roles as they do so.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Project Organization&quot; name=&quot;Project Organization&quot;>Project organization&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The movement from a serialized to an iterative process has profound implications in how a project must be organized. In&#xD;
    a serialized process, staff are often assigned to a project until their artifacts are complete. For example, the&#xD;
    engineering staff might complete the specifications, hand them off to the development staff, and move on to the next&#xD;
    project. In any RUP-based project, no such handoff occurs. Rather, the artifacts evolve throughout the development. It&#xD;
    follows that the staff responsible for project artifacts, such as the requirements database and UML architecture, must&#xD;
    be assigned to the development project throughout its duration, although the level of effort varies across the project&#xD;
    lifecycle.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The figure shows the organization for a typical RUP systems engineering project. The organization is collection of&#xD;
    development teams, each with a project manager and a technical lead. There are also teams that deal with overall system&#xD;
    architecture and project management.&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;center&quot;>&#xD;
    &lt;img height=&quot;287&quot; alt=&quot;A RUP Systems Engineering Organization Chart&quot; src=&quot;resources/seorganization.gif&quot; width=&quot;473&quot;&#xD;
    border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p class=&quot;picturetext&quot; align=&quot;center&quot;>&#xD;
    A RUP Systems Engineering Organization Chart.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In this team structure:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        The &lt;b>Enterprise Modeling&lt;/b> team analyzes the business need and generates business models and/or related&#xD;
        artifacts such as the system-level Vision document (equivalent to the Operational Concept Document). This team&#xD;
        therefore plays some elements of the RUP System Analyst role at this level (as well as other RUP business modeling&#xD;
        roles).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>System Architecture Team&lt;/b> works with the Enterprise Modeling Team to create the system context and derive&#xD;
        system requirements. The team develops the Subsystem and Locality views as well as their derived requirements.&#xD;
        Throughout the development, this team serves as a technical escalation point, resolving architectural and&#xD;
        engineering issues. The System Architecture Team also works with the development teams to specify the software&#xD;
        component architecture. Team members include the technical leads of the development teams. This team plays the RUP&#xD;
        System Analyst, Requirements Specifier, System Architect and System Designer roles (sharing this last role with the&#xD;
        software and hardware subsystem development teams).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>Project Management Team&lt;/b> looks after the standard project issues such as project reviews, resource&#xD;
        planning, budget tracking, earned value and variances, and coordinated iteration planning. This team plays the RUP&#xD;
        Project Manager role.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        For each iteration, the &lt;b>Integration and Test Team&lt;/b> receives the code and hardware components from the&#xD;
        development teams, builds the software components, and installs the hardware and software components in a&#xD;
        laboratory setting. The team also plans, executes, and reports on the system tests for each iteration.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>Subsystem Development Teams&lt;/b> are responsible for the design and implementation of the software&#xD;
        realization of one or more subsystems. The teams base their work on the derived use cases discovered during the&#xD;
        flowdown activity. Depending on the size and complexity of the system, the subsystem use cases might be realized as&#xD;
        class design and associated code modules or the subsystems might be further decomposed into subsystems. In the&#xD;
        latter case, a subsystem team might be further decomposed into sub-subsystem teams and a subsystem architecture&#xD;
        team might be created. This process enables scalability of the RUP systems engineering approach.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>Hardware Development and Acquisition Teams&lt;/b> are responsible for the design, specification, and delivery&#xD;
        of the hardware components; this team might install and maintain the system in the field. In other cases, this team&#xD;
        might handle user defect reporting and provide patches to the field.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The &lt;b>Deployment, Operations, and Maintenance Team&lt;/b> handles operational issues and serves as a liaison with the&#xD;
        users.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Concurrent Design and Implementation&quot; name=&quot;Concurrent Design and Implementation&quot;>Concurrent design and&#xD;
    implementation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One feature of the RUP systems engineering organization approach is that it scales to very large programs. This is&#xD;
    accomplished by taking advantage of the decomposition of the system into subsystems and localities with their derived&#xD;
    requirements. Each of these Analysis Model elements is suitable for concurrent design and development. As described in&#xD;
    the previous section, UML subsystems can be assigned to separate develop teams, localities to hardware development or&#xD;
    acquisition teams. Each team works from its derived sets of services to develop their portion of the Design Model and&#xD;
    Implementation Model. This way the design and implementation of the design elements can proceed in parallel.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For very large systems, a systems-of-systems approach can be adopted. In this case, each UML subsystem has its own&#xD;
    Locality Model. This assignment permits the application of the above organization structure at the subsystem level,&#xD;
    providing even more scalability.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Iterative Development, Integration and Test&quot; name=&quot;Iterative Development, Integration and Test&quot;>Iterative&#xD;
    development, integration, and test&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    One central feature of the RUP is that the system is developed in a series of iterations, each of which adds&#xD;
    functionality. The system is integrated and tested at each iteration. The iteration testing is a subset of the system&#xD;
    tests. Consequently, the final iteration results in a fully tested system ready for transition to the operational&#xD;
    setting.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The timing and content of iterations are captured in the system development plan early in the project. However, like&#xD;
    any RUP artifact, the system development plan is updated continually to reflect the emerging understanding of the&#xD;
    system as it comes together.&amp;nbsp;In particular, the further away an iteration is in time, the less detailed (and less&#xD;
    reliable) is the planning for it.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    As an iteration approaches, its content is captured in a finer-grained system iteration plan, specified by the use&#xD;
    cases and supplementary requirements to be realized by the components developed in the iteration. Each iteration is&#xD;
    tested by the subset of applicable system test cases.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Recall that subsystems and localities have derived services that trace from system use cases. This tracing provides a&#xD;
    basis for derived iteration plans for the subsystems and localities. That is, the content of each system iteration&#xD;
    determines by traceability the functionality that needs to be provided by the subsystems and localities to support the&#xD;
    iteration. In practice, the development teams negotiate the iteration content to reflect their development&#xD;
    practicalities. For example, an early system iteration cannot require full functionality of a subsystem. Compromises&#xD;
    must be made.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A good system development plan provides the opportunity to identify and resolve system technical risks early, before&#xD;
    the typical panic of the waterfall-based integration and testing phase. The technical risks can involve both functional&#xD;
    and nonfunctional requirements. For example, an early integration can shake out system start-up and fail-over issues&#xD;
    that cannot be fully understood with detailed design and interface specifications. In practice, the early iterations&#xD;
    must validate that the architecture is sufficient to meet the non-functional requirements.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Iterative system development might seem more expensive because it requires more testing, as well as a scaffold or a&#xD;
    simulated hardware environment to support the early iterations. Coordination of the iteration content across&#xD;
    development teams also takes more project management effort. However, these apparent costs are offset by the savings in&#xD;
    early identification and mitigation of risks associated with the system architecture. It is a standard engineering&#xD;
    principle that removing architectural defects late in a project is much more expensive than removing them early.&#xD;
    Removing defects late also adds uncertainty and schedule risk late in a project.&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The role of the testing organization is different than it is in an organization that adopts a serialized, waterfall&#xD;
    approach. Rather than spending more of the development planning for an overall system integration at the end of the&#xD;
    development, the organization spends its time integrating, testing, and reporting defects.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
