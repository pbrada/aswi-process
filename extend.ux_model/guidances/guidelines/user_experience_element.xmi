<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmlns:rmc="http://www.ibm.com/rmc" rmc:version="7.5.1" xmi:id="-0VUyFZCC56WgwCdl4kGGgQ" name="user-experience_element,9.763858677053972E-306" guid="-0VUyFZCC56WgwCdl4kGGgQ" changeDate="2005-11-21T08:29:08.911-0800" version="7.1.0">
  <mainDescription>&lt;h3>&#xD;
    &lt;a id=&quot;Introduction&quot; name=&quot;Introduction&quot;>Introduction&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    User-Experience Elements are the major modeling element of the &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.ux_model/workproducts/user_experience_model_E11A34D3.html&quot;&#xD;
    guid=&quot;{34EE80D4-460E-494D-BC01-E34D5CB7756A}&quot;>Artifact: User-Experience Model&lt;/a>. There are two main types of&#xD;
    User-Experience Elements: screens and input forms.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The elements that are modeled for a screen include the business logic &lt;a href=&quot;#Screen%20Content&quot;>content&lt;/a> that is&#xD;
    displayed on the screen, as well as the &lt;a href=&quot;#Environment%20Actions&quot;>actions&lt;/a> that can be performed on the&#xD;
    screen.&amp;nbsp; Screens may also include &lt;a href=&quot;#Input%20Forms&quot;>input forms&lt;/a>, where the user may enter user-supplied&#xD;
    content.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    These guidelines provide modeling conventions and recommendations for representing the User-Experience Elements.&amp;nbsp;&#xD;
    For specific checkpoints, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.ux_model/guidances/checklists/user_experience_element_4F8BED55.html&quot;&#xD;
    guid=&quot;1.0933258756459082E-305&quot;>Checklist: User-Experience Element&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;General Screen Guidelines&quot; name=&quot;General Screen Guidelines&quot;>General Screen Guidelines&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Screens are modeled as classes with the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; stereotype.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Every screen should have a name and a brief description.&amp;nbsp; These are the two most important pieces of information&#xD;
    about a screen. At a very high level they identify the screen's intent and scope. Optionally, a sketch of the GUI (in&#xD;
    an appropriate format - BMP, JPEG) may be associated with the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt;.&amp;nbsp; Such a sketch provides a&#xD;
    graphical representation of the screen.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The goal for modeling screens is that, when looking at a diagram containing the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class with all&#xD;
    attributes and operations displayed, the following is apparent:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Exactly what &lt;a href=&quot;#User%20Actions&quot;>user actions&lt;/a> can be performed on the screen. These are modeled as&#xD;
        PUBLIC, NON-STATIC operations.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Exactly what types of &lt;a href=&quot;#Modeling%20Screen%20Messages&quot;>messages&lt;/a> can be displayed on the screen. These&#xD;
        are modeled as PRIVATE, STATIC operations.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Exactly what &lt;a href=&quot;#Dynamic%20Content&quot;>dynamic content&lt;/a> must be provided by the business logic. Dynamic&#xD;
        content is modeled as private attributes.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For example, in the screen class shown below:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            The user actions that can be performed on the screen are: bid on item, display image, and display bid history&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            The messages that can be displayed on the screen are a bid cancelled message and an auction closed message.&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            The dynamic content that must be provided by the business logic is: category name, item title, description,&#xD;
            etc. (all the attributes).&#xD;
        &lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For more information on each of these screen elements, see the specific sections below: &lt;a href=&quot;#User%20Actions&quot;>user&#xD;
    actions&lt;/a>, &lt;a href=&quot;#Dynamic%20Content&quot;>dynamic content&amp;nbsp;&lt;/a> and &lt;a&#xD;
    href=&quot;#Modeling%20Screen%20Messages&quot;>messages&lt;/a>).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr17.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following are some additional recommendations for screens:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Try to have ONE primary screen per Actor that either contains, or provides access to, all the User-Experience&#xD;
        Elements the Actor is to interact with. It is important that the Actor spends a considerable part of his &quot;use time&quot;&#xD;
        interacting with this primary screen.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each Actor should be related to only one screen (aggregate) representing the primary window.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        All Screens used by the same Actor should be related in some way, often via an aggregation hierarchy, starting with&#xD;
        the primary screen.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Aggregation hierarchies should be as wide and shallow as possible.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Screens should, in general, be part of one (and-only one) aggregation hierarchy, so the Actor knows where to find&#xD;
        it.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        There should be as few aggregation hierarchies as possible, because they complicate the Actors' mental model.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For some general guidelines on the creation of user-interfaces, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.base_rup/guidances/guidelines/user_interface_general_12B3C0B9.html&quot;&#xD;
    guid=&quot;6.780901688276357E-305&quot;>Guideline: User Interface (General)&lt;/a> (&quot;screen&quot; and &quot;window&quot; may be considered&#xD;
    synonymous in the context of these guidelines).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The screens should reflect the guidance provided in the project-specific guidelines.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Identifying Screens&quot; name=&quot;Identifying Screens&quot;>Identifying Screens&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The following are some suggestions for identifying screens:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Identify one central screen representing the main screen with which a particular Actor interacts. The main screen&#xD;
        should be the window that is opened when the user launches the application. It is normally always open as long as&#xD;
        the application is running, and is the place where the user spends a considerable part of his &quot;use time.&quot; Since it&#xD;
        is always open and since it constitutes the user's first contact with the system, it is the foremost vehicle for&#xD;
        enforcing the user's mental model of the system.&lt;br />&#xD;
         If such a class already exists, consider reusing it. This is because you should strive to minimize the number of&#xD;
        primary screens a particular actor needs to interact with. However, you will, of course, have to compromise;&#xD;
        primary screens should not be too complex or cluttered.&lt;br />&#xD;
         For example, for a web application, the central screen is the application's home screen.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Look for functions the user will be performing in the system.&lt;br />&#xD;
         Identify one screen for each major system function (note: these major system functions should map to use&#xD;
        cases).&lt;br />&#xD;
         For example, for an online auction application, some possible screens include: browse auction catalog, bid on&#xD;
        item, etc.&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Look for information interesting to the user, information that is manipulated by the system, and information that&#xD;
        needs to be visible and managed in the user interface.&amp;nbsp; Some sources for such information is the &lt;a&#xD;
        class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_glossary_A5D79A0C.html&quot;&#xD;
        guid=&quot;{3BF8CC04-9101-47A4-9473-C8205EA588B6}&quot;>Glossary&lt;/a>, &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.base_rup/workproducts/rup_usecase_A5D30E62.html&quot; guid=&quot;{B1526BC5-E346-42CB-A08A-3C0D7F382407}&quot;>Use&#xD;
        Case&lt;/a>&amp;nbsp;descriptions, and the key abstractions identified during &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.base_rup/tasks/architectural_analysis_2B9BE03.html&quot; guid=&quot;{8CB48402-D4C5-4E17-BB33-507315CB1BBF}&quot;>Task:&#xD;
        Architectural Analysis&lt;/a>.&lt;br />&#xD;
         Note: Some of this information may end up being modeled as screens, where other information will just be modeled&#xD;
        as dynamic content on another screen.&amp;nbsp; See &lt;a href=&quot;#Dynamic%20Content&quot;>Dynamic Content&lt;/a> for more&#xD;
        information.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Some user actions may require a complex interaction with the user, thereby justifying a secondary screen of their&#xD;
        own (e.g., a specific dialog box).&amp;nbsp; For example, a Print user action on a screen, due to its complex&#xD;
        interaction, justifies a separate dialog box.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    For each identified screen, provide a name and a brief description that conveys the screen's purpose and usage.&amp;nbsp;&#xD;
    Also, make a first pass at defining the &lt;a href=&quot;#Dynamic%20Content&quot;>dynamic content&lt;/a> that is to be contained on the&#xD;
    screen, as well as the &lt;a href=&quot;#User%20Actions&quot;>user actions&lt;/a> that the user can perform on the screen.&amp;nbsp;&amp;nbsp;&#xD;
    If the user must enter information into the system, be sure to define the necessary &lt;a href=&quot;#Input%20Forms&quot;>input&#xD;
    form&lt;/a>s.&amp;nbsp; Provide a brief description for identified dynamic content and user actions.&amp;nbsp; Remember, the&#xD;
    User-Experience Model is intended to be contract between the user-experience and the engineering teams, and the dynamic&#xD;
    content is the key integration point.&amp;nbsp; Thus, it is important that it is unambiguously documented.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Strive to minimize the number of screens, thereby also minimizing the screen navigation paths. For more information on&#xD;
    navigation paths, see &lt;a href=&quot;#Navigation&quot;>Navigation&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Screen Content&quot; name=&quot;Screen Content&quot;>Screen Content&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Screen content is the generic term for business information that appears on a screen. It is a combination of static&#xD;
    content, dynamic content , and user-supplied content.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Static content&lt;/i> is information that is provided by the presentation logic (as opposed to the business logic) of&#xD;
    the system. Some examples include: overall screen structure, field names, titles, text, images, client-side scripts,&#xD;
    and client-side compiled elements that are constant for each user of the system.&amp;nbsp;&amp;nbsp;&lt;br />&#xD;
     For a web application, static content is the information that is determined before the page is requested from the&#xD;
    server.&amp;nbsp;&amp;nbsp;&lt;br />&#xD;
     Static content is not modeled as part of the&amp;nbsp; &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>Dynamic content&lt;/i> is the dynamic information provided by the business logic of the system, as opposed to the&#xD;
    presentation logic.&amp;nbsp; The values of the dynamic content can (and usually do) change for each user of the&#xD;
    system.&amp;nbsp;&amp;nbsp;&lt;br />&#xD;
     For a web application, dynamic content is determined (and supplied by the business logic) when the page is requested.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some examples of dynamic content include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        User session content (i.e. shopping cart items, search results)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Application managed content (i.e. product descriptions, order status, inventory quantities)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Messages to the user (e.g., &quot;the entered data is invalid because ...&quot;)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        The time of day on the server&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        other computed information.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Dynamic content is where the presentation world meets to engineering world. Dynamic content is the responsibility of&#xD;
    the business logic team to produce, and the presentation logic/user-experience team to organize and present.&amp;nbsp; For&#xD;
    more information on dynamic content, see &lt;a href=&quot;#Dynamic%20Content&quot;>Dynamic Content&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;i>User-supplied content&lt;/i> is entered via input forms that are part of a screen. For more information on modeling&#xD;
    input forms, see &lt;a href=&quot;#Input%20Forms&quot;>Input Forms&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Dynamic Content&quot; name=&quot;Dynamic Content&quot;>Dynamic Content&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    As described earlier, dynamic content is dynamic information provided by the business logic of the system, as opposed&#xD;
    to the presentation logic. It is the responsibility of the business logic team to produce, and the&#xD;
    presentation/user-experience team to display on a screen.&amp;nbsp; It is available to the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/roles/rup_user_interface_designer_5C1ECFC9.html&quot;&#xD;
    guid=&quot;{0F994CCE-2B28-414A-9D31-DA23C13B95D4}&quot;>User-Interface Designer&lt;/a>when structuring the screen.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Dynamic content is represented as attributes of the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class. Dynamic content represents the state&#xD;
    of the screen.&amp;nbsp; Since the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class is an analysis-level modeling element, expressing the&#xD;
    dynamic content of the screen can be relatively free-formed. Strict data types and valid identifier names are not&#xD;
    necessary to convey the dynamic content of the screen (such information is better expressed in the detailed &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_design_model_2830034D.html&quot;&#xD;
    guid=&quot;{8CDAEAD4-5E84-4F50-87FD-3240ED047DE7}&quot;>Design Model&lt;/a>. In the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../extend.ux_model/workproducts/user_experience_model_E11A34D3.html&quot;&#xD;
    guid=&quot;{34EE80D4-460E-494D-BC01-E34D5CB7756A}&quot;>User-Experience Model&lt;/a>, it is sufficient to identify the dynamic&#xD;
    content by name and provide a short description.&amp;nbsp; Data typing the attributes is optional and should only be done&#xD;
    to help clarify the nature of the item, and should not be interpreted as a design model decision. Broad categories for&#xD;
    dynamic content data types should be used (String, Numeric, Image, Date, Currency, etc.), instead of language specific&#xD;
    types (i.e. Long, Short, etc.).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Sometimes the dynamic content is a little &quot;richer&quot; than a singular piece of content. In such cases, &quot;&lt;i>content&#xD;
    bundles&lt;/i>&quot; may need to be defined. For example: Think of a shopping cart screen. The dynamic content is the line&#xD;
    items and total price. The total price is a singular piece of content. The line items, however, each contain a product&#xD;
    id, name, quantity, unit price and line item total price (i.e., each line item contains multiple content pieces). There&#xD;
    are zero or more line items in a shopping cart, and this multiplicity must be the same for all of the line item&#xD;
    discrete pieces. For example you can't have two product ids, one product name, 6 quantities, etc. Thus, the line item&#xD;
    content pieces are bundled together in a single class, so that a single multiplicity can be shared by all line item&#xD;
    content pieces.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>Content bundles&lt;/b> are modeled as a class(es), with the dynamic content of the bundled modeled as attributes of the&#xD;
    class.&amp;nbsp; A composition relationship is drawn from the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class to the content bundle&#xD;
    class.&amp;nbsp; A special stereotype is not defined and applied for these &quot;content&quot; bundles.&amp;nbsp; However, they can&#xD;
    always be recognized by their context - they are always owned by a screen.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of a content bundle, active auction, is shown below.&amp;nbsp; In this case, information on all auctions a user&#xD;
    has open is displayed on the user's home screen.&amp;nbsp; Every active auction has an item name, starting price, minimum&#xD;
    bid increment, auction start date, auction end date, and an auction tracking number.&#xD;
&lt;/p>&lt;img alt=&quot;UMA diagram&quot; height=&quot;153&quot; src=&quot;resources/md_scr3.gif&quot; width=&quot;490&quot; border=&quot;0&quot; /> &#xD;
&lt;p>&#xD;
    Content that has a variable number of elements (i.e., list content) can be expressed with array notation. Sometimes the&#xD;
    content's multiplicity is variable, as might be seen in a product catalog with multiple categories of products. In this&#xD;
    situation, the content attribute is represented with array notation, using a pair of square brackets after its name&#xD;
    (i.e. [ ] ). See the figure below:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; height=&quot;85&quot; src=&quot;resources/md_scr4.gif&quot; width=&quot;88&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The level of detail should be appropriate to the intended audience. If the audience is unfamiliar with UML, and is&#xD;
    unlikely to adopt it, then it is best to eliminate some of the details, and use either array notation for bundled&#xD;
    content or simply use plural terms, and ensure that the screen and attributes documentation describe the nature of the&#xD;
    dynamic content sufficiently for the engineering and testing teams.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Input Forms&quot; name=&quot;Input Forms&quot;>Input Forms&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    An input form is a part of a screen that contains a collection of user input fields (i.e., user-supplied content).&#xD;
    Input forms allow the user to enter information into the system.&amp;nbsp; Input forms are processed by the application's&#xD;
    business logic.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Input forms are modeled as classes with a stereotype of &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;. The &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;&#xD;
    stereotype uses the possibly redundant term &quot;input&quot; to emphasize the role of the class it stereotypes -- it accepts&#xD;
    user input. The name of the input form should reflect the data that is being entered on the form, and &quot;form&quot; should be&#xD;
    included as the last word in the class name (e.g., &quot;account info form&quot;).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Input form fields are modeled as attributes on the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class, and can be specified with an&#xD;
    optional data type indicating the type of input element (i.e. Text, TextArea, Radio, Checkbox, Select, File).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Separate &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; and &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; classes are needed because they represent two very&#xD;
    different things. One is application content (&amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class) and the other is user input (&amp;lt;&amp;lt;input&#xD;
    form&amp;gt;&amp;gt; class). In many cases there will be a close correlation, but not always.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A single screen can contain multiple input forms. The relationship between screens and their input forms is modeled as&#xD;
    a composition relationship from the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class to the contained &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;&#xD;
    class(es).&amp;nbsp; The composition representation emphasizes the ownership relationship between the&#xD;
    &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; and the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; (A screen &quot;owns&quot; its input forms; input forms always appear&#xD;
    in the context of screens).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr5.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    It is also possible to show the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; as a shared class, being contained by multiple&#xD;
    &amp;lt;&amp;lt;screens&amp;gt;&amp;gt;.&lt;br />&#xD;
    &lt;br />&#xD;
     Note: The sharing of &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; classes between &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; classes is not recommended.&#xD;
    That is not to say that there won't be some reuse of screen element during design. It's just that if the same&#xD;
    &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class is used by multiple screens, there may be hesitation to alter the &amp;lt;&amp;lt;input&#xD;
    form&amp;gt;&amp;gt; class content because it affects other &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; classes, even though altering it is the&#xD;
    right thing to do. Introducing too much &quot;reuse&quot; at this time (early analysis) may artificially constrain the&#xD;
    User-Interface Designer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr18.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If an input form is not going to be shared across screens, the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class may be modeled as a&#xD;
    nested class (nested within the &quot;parent&quot; &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    If an input form needs to be pre-populated with default values that the user can then change, the following should be&#xD;
    &lt;a style=&quot;mso-comment-reference: KAH_1&quot;>modeled&lt;/a>:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        A &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class that contains attributes for the values that must be pre-populated. The default&#xD;
        values are considered dynamic content for the screen.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        An &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; that is &quot;owned&quot; by the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class (i.e., there is a composition&#xD;
        relationship from the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; to the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;). As described earlier, the fields&#xD;
        that the user can enter data into are modeled as attributes of the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Each of the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; fields that require default data should have an associated&#xD;
        &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class attribute.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These modeling recommendations are demonstrated in the following diagram.&amp;nbsp; In this diagram, the manage account&#xD;
    screen contains an input form where the user can enter the account information to be changed.&amp;nbsp; The input form is&#xD;
    to be pre-populated with user's existing account information.&amp;nbsp; Thus, input form fields are defined on the&#xD;
    &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class for the information to be entered by the user, and dynamic content is defined on the&#xD;
    &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class for those input form fields for which default content is to be provided (username, email,&#xD;
    creditname, etc.).&amp;nbsp; Notice, no default value will be provided for the user's email address.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; height=&quot;243&quot; src=&quot;resources/md_scr8.gif&quot; width=&quot;466&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Actions&quot; name=&quot;Actions&quot;>Actions&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Actions are things that can be done to a User-Experience Element.&amp;nbsp; Actions are modeled as operations on the&#xD;
    User-Experience Elementclasses.&amp;nbsp; There are two categories of actions, &lt;a href=&quot;#User%20Actions&quot;>user actions&lt;/a>&#xD;
    and &lt;a href=&quot;#Environment%20Actions&quot;>environment actions&lt;/a>.&amp;nbsp; Each of these is discussed in more detail below.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;User Actions&quot; name=&quot;User Actions&quot;>User Actions&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    &lt;b>&lt;a id=&quot;Identifying User Actions&quot; name=&quot;Identifying User Actions&quot;>Identifying User Actions&lt;/a>&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A user action is a user's request for an action by the system. User actions define how the user interacts with the&#xD;
    screen (i.e., user actions are those things that a user can &quot;do&quot; to the screen or input form).&amp;nbsp; A user action is&#xD;
    different than entering information into an input form. Some options for user actions include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Buttons on the screen&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Menu items on the screen&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    When identifying user actions, look for requests the user makes of the system, including responses to requests made by&#xD;
    the system to the user.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Also, if a screen is to contain a large amount of information, some additional user actions may need to be defined to&#xD;
    manipulate the large information set.&amp;nbsp; Some examples of such user actions may include:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        User actions for searching the information set.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User actions for sorting the information set.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User actions for browsing hierarchies within the information set.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        User actions for selecting multiple items in the information set.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Refer to &lt;a class=&quot;elementLinkWithType&quot; href=&quot;./../../../core.base_rup/guidances/guidelines/user_interface_general_12B3C0B9.html&quot;&#xD;
    guid=&quot;6.780901688276357E-305&quot;>Guideline: User Interface (General)&lt;/a> for more detail.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a id=&quot;Modeling User Actions&quot; name=&quot;Modeling User Actions&quot;>&lt;b>Modeling User Actions&lt;/b>&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    A user action is modeled as an operation on the User-Experience Model element class (e.g., &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; or&#xD;
    &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class). The name of the operation should reflect the user action.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The modeling of user actions is demonstrated in the following diagram.&amp;nbsp; The item detail screen contains&#xD;
    information on an item that is available for auction.&amp;nbsp; The actions the user may perform on the screen are: placing&#xD;
    a bid on the item (bid on item()), displaying the bid history (display bid history()), or display the image of the item&#xD;
    (display image()).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr10.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Environment Actions&quot; name=&quot;Environment Actions&quot;>Environment Actions&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Environment actions are those actions that the &quot;environment&quot;, as opposed to the user, performs on a screen (for a web&#xD;
    application, the &quot;environment&quot; is the web browser).&amp;nbsp; Since the User-Experience Model is an analysis-level model,&#xD;
    we don't want to get too carried away with modeling things that the environment does (during user-experience modeling,&#xD;
    we are mostly concerned with things that the user does).&amp;nbsp; However, the fact that screens are created/displayed is&#xD;
    important in analysis. We just don't care how it is done.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Thus, screen creation/rendering is modeled using static operations on the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class (the operation&#xD;
    is underlined).&amp;nbsp; Input forms are assumed to be created when their &quot;owning&quot; &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class is&#xD;
    created, so static operations are not modeled for &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; classes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The environment supports the user's navigation to a screen and the display of a message on a screen (for web&#xD;
    applications, the screen content is prepared on the server for display/rendering on the client).&amp;nbsp; In both cases,&#xD;
    the end result is a screen being created/rendered for display.&amp;nbsp; Thus, there are two types of static operations&#xD;
    that usually get modeled for &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; classes, &quot;navigate to&quot; and &quot;display&quot; operations.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    In general, all &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; classes should contain a &quot;navigate to()&quot; operation.&amp;nbsp; If a message needs to&#xD;
    be displayed on a screen, then the screen should contain a &quot;display()&quot; operation, one for each message to be&#xD;
    displayed.&amp;nbsp;&amp;nbsp;&lt;br />&#xD;
     Note: Some additional modeling is required for screen messages.&amp;nbsp; For more information on modeling screen&#xD;
    messages, see &lt;a href=&quot;#Modeling%20Screen%20Messages&quot;>Modeling Screen Messages&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The use of both the navigate to() and display() operations are shown in the following diagrams.&amp;nbsp; In this example,&#xD;
    there is a screen that contains information for an item that is available for auction.&amp;nbsp; A request to bid on the&#xD;
    item can be requested from the screen.&amp;nbsp; The Buyer requests to bid on the item whose information is displayed, but&#xD;
    the auction has already closed.&amp;nbsp; The environment supports the navigation to a new instance of the item detail&#xD;
    screen that contains an &quot;auction closed&quot; message.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr17.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/bidonitem_sb.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The rationale for using static operations to model the displaying of messages to the user is that the displaying of a&#xD;
    message on a screen involves the rebuilding of the screen (another screen instance) that contains the message. A client&#xD;
    merely browses (navigates to a screen); the infrastructure/system displays the message when the page is rendered.&lt;br />&#xD;
     Static operations are used to model actions that are performed by &quot;the system&quot;, as opposed to the user. These actions&#xD;
    are performed while the screen content is being prepared on the server for rendering on the client. Such operations are&#xD;
    &quot;creative&quot; in nature, hence the use of the static UML adornment.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some may argue that environment actions do not need to be modeled at all since creation/navigation to necessary for all&#xD;
    screens. However, modeling environment actions as operations allows the User-Interface Designer to associate messages&#xD;
    on interaction diagrams with these operations and results in more readable interaction diagrams.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Modeling the explicit display() messages allows you to model all the possible messages that a screen can display. This&#xD;
    is not (visually) captured anywhere else. You may not be able to get this information from anywhere else, as it is&#xD;
    possible to define general &quot;status&quot; message dynamic content fields&lt;font color=&quot;#0000ff&quot; size=&quot;2&quot;>.&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Additional guidelines for modeling screen messages is provided &lt;a href=&quot;#Modeling%20Screen%20Messages&quot;>below&lt;/a>, as&#xD;
    well as in the context of developing the interaction diagrams contained within the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../extend.ux_model/workproducts/user_experience_storyboard_49E2F5E1.html&quot;&#xD;
    guid=&quot;{7346D963-ECD9-4D3F-B633-E429B43B7BD7}&quot;>User-Experience Storyboard&lt;/a>s.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Navigation&quot; name=&quot;Navigation&quot;>Navigation&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Identifying Navigation Paths&quot; name=&quot;Identifying Navigation Paths&quot;>Identifying Navigation Paths&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Some &lt;a href=&quot;#User%20Actions&quot;>user action&lt;/a>s defined for the User-Experience Elements result in the navigation from&#xD;
    one element to another (and thus a navigation association in the navigation map). However, every user action does not&#xD;
    have to result in a navigation and every navigation is not necessarily the result of a user action.&amp;nbsp; &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../extend.ux_model/workproducts/user_experience_storyboard_49E2F5E1.html&quot;&#xD;
    guid=&quot;{7346D963-ECD9-4D3F-B633-E429B43B7BD7}&quot;>User-Experience Storyboard&lt;/a>s provide additional clues as to what&#xD;
    navigation paths need to be defined. If the storyboard flow diagrams show a navigation from one element to another,&#xD;
    then a navigation association should be defined between the elements in the navigation map. For more information on&#xD;
    storyboard flow diagrams, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.ux_model/guidances/guidelines/user_experience_storyboard_CCF3852D.html&quot;&#xD;
    guid=&quot;1.795569619094057E-305&quot;>Guideline: User-Experience Storyboard&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Strive to minimize the number of navigation paths. In addition to adding needless interaction overhead, screen&#xD;
    navigation paths that are too long make it more likely that the user will &quot;get lost&quot; in the system. Ideally, all&#xD;
    screens should be &quot;navigate-able to&quot; from a main screen, resulting in a maximum screen navigation length of two. Try to&#xD;
    avoid screen navigation lengths greater than three.&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    &lt;a id=&quot;Modeling Navigation Paths&quot; name=&quot;Modeling Navigation Paths&quot;>Modeling Navigation Paths&lt;/a>&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    Navigation between User-Experience Elements is modeled as a directed association relationship from the source&#xD;
    User-Experience Element to the destination User-Experience Element (e.g., the screen being navigated to).&amp;nbsp; The&#xD;
    direction of the navigation can be specified using the navigability property of the association.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For navigation resulting from a &lt;a href=&quot;#User%20Actions&quot;>user action&lt;/a>, the navigation association name should&#xD;
    reflect the user action that causes the navigation.&amp;nbsp; The following are some suggestions for naming the navigation&#xD;
    association:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        When the user action only has only one possible outcome (e.g.,&amp;nbsp; a link/navigate to another screen), the&#xD;
        relationship name should match the user action (e.g., &quot;browse auction catalog&quot;).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When the user action has multiple possible outcomes (e.g.,&amp;nbsp; enter information into a form that needs to be&#xD;
        validated), the relationship name should reflect both the user action, as well as the outcome (e.g., &quot;invalid bid&#xD;
        submitted&quot;, or &quot;items found&quot;).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    Not all navigation associations need names. Only name the associations when the names add to the understanding of the&#xD;
    diagram (i.e., when the reason for the navigation is not obvious, either from the context or the classes on either end&#xD;
    of the association).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of when a navigation association name would be needed is if there are multiple user actions (operations)&#xD;
    defined for a &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class, and there are multiple outgoing associations.&amp;nbsp; In such a case, without&#xD;
    navigation names, it would be difficult to tell which navigation paths were associated with which user actions.&amp;nbsp;&#xD;
    This situation is demonstrated in the following diagram (notice the multiple user actions and outgoing navigation paths&#xD;
    for the bid confirmation input form).:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; height=&quot;277&quot; src=&quot;resources/md_scr16.gif&quot; width=&quot;910&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    An example of when a navigation association name would not be needed is if there is a screen that contains only one&#xD;
    user action and only has one outgoing navigation association.&amp;nbsp; In such a case, it would be fairly easy to&#xD;
    associate the single outgoing navigation path with the single user action.&amp;nbsp; This situation is demonstrated in the&#xD;
    following diagram:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr15.gif&quot; border=&quot;0&quot; />&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Where an input form is the source of the navigation (i.e., when the user submitting information entered on an input&#xD;
    form is what causes the navigation), the navigation association should be drawn from the &amp;lt;&amp;lt;input form&amp;gt;&amp;gt;&#xD;
    class to the destination &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class. The intent of having the form be the source of the navigation is&#xD;
    to show which form's values were being submitted for processing. This is important to emphasize because a screen can&#xD;
    contain multiple input forms, each submitting themselves separately.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    There is no navigation from the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; to it's contained &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; classes -- the&#xD;
    &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; is rendered at the same time the &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; is.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following example demonstrates the navigability guidelines:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        From a screen containing the details of an item available for auction (item detail &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class),&#xD;
        the user may request to bid on the item (bid on item() operation).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When a bid on item user action is entered, if it is accepted, a screen is displayed (&quot;bid on item accepted&quot;&#xD;
        navigation association) where the user can enter bid information (bid on item &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class and&#xD;
        contained bid information form &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        When a bid on item user action is entered, if it is not accepted because the auction is closed, the item detail&#xD;
        screen is re-displayed with an &quot;auction closed&quot; message.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        a screen is displayed (&quot;bid on item accepted&quot; navigation association) where the user can enter bid information (bid&#xD;
        on item &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class and contained bid information form &amp;lt;&amp;lt;input form&amp;gt;&amp;gt; class).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the user submits valid bid information (submit bid() operation), the bid results screen is displayed (&quot;valid bid&#xD;
        submitted&quot; navigation association)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the user submits invalid bid information (submit bid() operation), the bid on item screen is re-displayed with&#xD;
        an &quot;invalid bid&quot; message, so the user can enter valid information (&quot;invalid bid submitted&quot; navigation association).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        If the user cancels the bid information (cancel bid() operation), the item detail screen is redisplayed with a &quot;bid&#xD;
        cancelled&quot; message (&quot;bid cancelled&quot; navigation association).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr14.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Reflexive navigation associations can be defined for screens. Reflexive navigation associations indicate that the user&#xD;
    can navigate from one instance of the screen to another instance of the screen, perhaps with some changed/additional&#xD;
    information (when the information on a screen changes, another instance of the screen is created).&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The following diagrams illustrate the use of reflexive screen navigation associations.&amp;nbsp; A reflexive navigation&#xD;
    association, &quot;bid on item auction closed&quot; is defined.&amp;nbsp; The name of the association associates the navigation with&#xD;
    the user action, bid on item().&amp;nbsp; The way to interpret this model fragment is that when the user requests to bid on&#xD;
    and item for which the auction is closed, the original item detail screen is re-displayed (a new instance of the screen&#xD;
    is created) with an &quot;auction closed&quot; message.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_scr13.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_uxm4.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The User-Interface Designer defines the valid navigation paths between the screens.&amp;nbsp; The defined navigation paths&#xD;
    must support the execution of the Use Cases.&amp;nbsp; This is validated in the &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../extend.ux_model/workproducts/user_experience_storyboard_49E2F5E1.html&quot;&#xD;
    guid=&quot;{7346D963-ECD9-4D3F-B633-E429B43B7BD7}&quot;>User-Experience Storyboard&lt;/a>s. These paths are displayed on &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../extend.ux_model/workproducts/user_experience_navmap_CF219DA6.html&quot;&#xD;
    guid=&quot;{C012CDE6-D566-4120-A518-13D1FD51D63E}&quot;>User-Experience Navigation Map&lt;/a> diagrams.&amp;nbsp; Thus, the navigation&#xD;
    map diagrams display the structure of the User-Experience Model.&amp;nbsp;&amp;nbsp;For information on the consistency rules&#xD;
    between the navigation map and the storyboards, see the &quot;Consistency with Other System Models&quot; section in &lt;a&#xD;
    class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../extend.ux_model/guidances/checklists/user_experience_model_D8305D86.html&quot;&#xD;
    guid=&quot;_6uB0QFkTEdq8uvFnmNBclw&quot;>Checklist: User-Experience Model&lt;/a>&amp;nbsp;.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Modeling Screen Messages&quot; name=&quot;Modeling Screen Messages&quot;>Modeling Screen Messages&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    When a message needs to be displayed on a screen, the following should be modeled:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    For the screen where the message is to be displayed:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Define an attribute with a name that reflects the type of message that is to be displayed. The name should be not&#xD;
        be the same as the message content (the message content is considered dynamic).&lt;br />&#xD;
         For example: &quot;&lt;i>bid status msg&lt;/i>&quot;.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define a static public &quot;navigate to&quot; operation.&lt;br />&#xD;
         For example: &quot;&lt;i>+ navigate to()&lt;/i>&quot;. If you remember from earlier, it is recommended that every&#xD;
        &amp;lt;&amp;lt;screen&amp;gt;&amp;gt; class have a navigate to() operation defined.&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Define a static private operation with a name that explicitly identifies the message to be displayed.&lt;br />&#xD;
         For example: &quot;&lt;i>- display auction closed msg()&lt;/i>&quot;.&lt;br />&#xD;
         All display messages should be private and are only executed as a result of a navigate to() message. Some may&#xD;
        argue that the display operations don't even need to be modeled (just annotate using UML notes). However, modeling&#xD;
        the display messages allows the User-Interface Designer to see exactly what messages are required to be displayed&#xD;
        on the screen, without having to look at all of the interaction diagrams.&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The following example demonstrates the use of these guidelines:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_uxm3.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&lt;br />&#xD;
&lt;br />&#xD;
&lt;p>&#xD;
    To model the displaying of the message on an interaction diagram:&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        Draw a message to the screen where the message is to be displayed. Associate the message with the &lt;i>navigate&#xD;
        to()&lt;/i> operation (see #2 above)&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        On the screen where the message is to be displayed, draw a reflexive message. Associate the message with the&#xD;
        private &lt;i>display()&lt;/i> message with the explicit name (see #3 above).&#xD;
    &lt;/li>&#xD;
&lt;/ol>&#xD;
&lt;p>&#xD;
    The following example demonstrates the use of these guidelines:&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img alt=&quot;UMA diagram&quot; src=&quot;resources/md_uxm4.gif&quot; border=&quot;0&quot; />&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Special Requirements on User-Experience Elements&quot;&#xD;
    name=&quot;Special Requirements on User-Experience Elements&quot;>Special Requirements on User-Experience Elements&lt;/a>&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Special requirements of User-Experience Elements can be:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        References to existing usability requirements, like user execution times, maximum number of mouse clicks, learning&#xD;
        times, and error rates associated with the User-Experience Element.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        References to non-functional requirements that need to be handled when the corresponding user interface is designed&#xD;
        and implemented. An example of such a requirement is that a User-Experience Element should be implemented using a&#xD;
        specific component, such as an ActiveX control.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        References to dynamic content data volumes, like the ability to handle content within a specified range (e.g., a&#xD;
        maximum number of list entries that can be displayed without delaying the scrolling mechanism).&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    These requirements are considered requirements that affect the design and implementation of the screen.&amp;nbsp; However,&#xD;
    such requirements should be captured in only one place.&amp;nbsp; Thus, the Special Requirements property of a Screen may&#xD;
    include references to existing requirements documentation (e.g., &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.base_rup/workproducts/rup_usecase_A5D30E62.html&quot; guid=&quot;{B1526BC5-E346-42CB-A08A-3C0D7F382407}&quot;>Use&#xD;
    Case&lt;/a>s, &lt;a class=&quot;elementLink&quot; href=&quot;./../../../core.base_rup/workproducts/rup_supplementary_specification_F5ACAA22.html&quot;&#xD;
    guid=&quot;{B16C2941-791C-44E6-B353-354109B5C9DE}&quot;>Supplementary Specifications&lt;/a>, etc.).&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
